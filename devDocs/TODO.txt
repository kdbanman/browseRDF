TODO list, descending priority, keep it quick
=============================================

- figure out why (and explain in contents why i'm testing for newS and newO in triplesToTulip

- convert graph membership in triplesToTulip to hash table for speed
    - check to see if there are already tulip member functions that do this

- test a simple tulipgui screen to resolve the QGLShader "" error

- get visual differentiation between uris and literals

- get test data files for exploration, ensure all data included properly

- detail logical structure of each of m,v,c in Dia
    - ... <--> {data} <--> [component] <--> {data} <--> [component] ...
    - differentiate between data requests and data sends?
    - actually, do this as a flow chart.  i like flow charts.


#FINISHED, :r !date followed by the task, as cut
================================================


Tue Mar 19 12:19:17 MDT 2013
- exploration mode flow is currently hanging, I suspect QT is being used wrong.  fix this and test the exploration mode


Mon Mar 18 15:51:17 MDT 2013
- consolidate vocabulary and communication patterns between the two flowcharts and the forming modules.  all the assumptions need to agree before I can progress


Mon Mar 18 15:50:31 MDT 2013
- *flow chart* starting from program initialization, starting from high level of reactions/data flow in m,v,c


Mon Mar 18 15:49:45 MDT 2013
- read about how data moves around in tulip graph, especially with subgraphs
    - especially look for how two separately created graphs with nodes that have identically named/typed properties would integrate


Fri Feb  8 18:30:17 MST 2013
- test code on work computer


Fri Feb  8 19:34:43 MST 2013
- update architecture section of readme with choices in dia diagram, and choices made in code construction so far.
    - uri field in tulip node sent to rdflib to query
    - rdflib retrieves, parses, adds to model, and sends an rdflib Graph()
        - not a tlp.Graph(), the model should be visualization-independent
    - window is created for the new graph, the contents are made pretty
    - the displayed tulip graph is very much a part of the controller, since it is the structure that the user uses to choose queries and update the view
    - user selects node(s), shortest path to aggregate calculated by tulip and they are added to aggregate to maintain single-graph property
    - node selection observer adds to aggregated view
    - upon window close, all unselected nodes and edges are removed from model
        - just leave the unselected triples in the model.  history is important, and we have disk storage natively in rdflib


Fri Feb  8 19:36:51 MST 2013
- describe overall program flow in dia as a flow chart


Mon Mar  4 20:02:15 MST 2013
- split model, view, and controller into separate files as originally intended
