/*
 * Module code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PropertyInterface.sip"
#include <tulip/PropertyInterface.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Observable.sip"
#include <tulip/Observable.h>
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 36 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 105 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
#include <list>
#line 39 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 52 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 55 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 72 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 76 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
#include <tulip/Node.h>
#line 79 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 94 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 1047 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
#include <tulip/LayoutProperty.h>
#line 97 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 100 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
#include <tulip/LayoutProperty.h>
#line 103 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 442 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/IntegerProperty.sip"
#include <tulip/IntegerProperty.h>
#line 106 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/IntegerProperty.sip"
#include <tulip/IntegerProperty.h>
#line 109 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 448 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/SizeProperty.sip"
#include <tulip/SizeProperty.h>
#line 112 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/SizeProperty.sip"
#include <tulip/SizeProperty.h>
#line 115 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 392 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
#include <tulip/StringProperty.h>
#line 118 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
#include <tulip/StringProperty.h>
#line 121 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 392 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ColorProperty.sip"
#include <tulip/ColorProperty.h>
#line 124 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ColorProperty.sip"
#include <tulip/ColorProperty.h>
#line 127 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 489 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/DoubleProperty.sip"
#include <tulip/DoubleProperty.h>
#line 130 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/DoubleProperty.sip"
#include <tulip/DoubleProperty.h>
#line 133 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 442 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/BooleanProperty.sip"
#include <tulip/BooleanProperty.h>
#line 136 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/BooleanProperty.sip"
#include <tulip/BooleanProperty.h>
#line 139 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 34 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ExportModule.sip"
#include <tulip/ExportModule.h>
#line 142 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginContext.sip"
#include <tulip/PluginContext.h>
#line 145 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 6 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/ostream.sip"
#include <iostream>
#line 148 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 35 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ImportModule.sip"
#include <tulip/ImportModule.h>
#line 151 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Algorithm.sip"
#include <tulip/Algorithm.h>
#line 154 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Color.sip"
#include <tulip/Color.h>
#line 157 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 160 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 33 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Coord.sip"
#include <tulip/Coord.h>
#line 163 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Size.sip"
#include <tulip/Size.h>
#line 166 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 39 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Matrix.sip"
#include <tulip/Matrix.h>
#line 169 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 121 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Matrix.sip"
#include <tulip/Matrix.h>
#line 172 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 175 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/StringCollection.sip"
#include <tulip/StringCollection.h>
#line 178 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ColorScale.sip"
#include <tulip/ColorScale.h>
#line 181 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 192 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 205 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 24 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ObservableProperty.sip"
#include <tulip/ObservableProperty.h>
#line 208 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 24 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ObservableGraph.sip"
#include <tulip/ObservableGraph.h>
#line 225 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_tulip[] = {
    's', 't', 'd', ':', ':', 'p', 'a', 'i', 'r', '<', 's', 't', 'd', '_', 'v', 'e', 'c', 't', 'o', 'r', '_', '0', '1', '0', '0', 's', 't', 'd', '_', 'p', 'a', 'i', 'r', '_', '1', '9', '0', '0', '_', '1', '9', '0', '0', ',', 's', 't', 'd', '_', 'v', 'e', 'c', 't', 'o', 'r', '_', '0', '1', '0', '0', 's', 't', 'd', '_', 'v', 'e', 'c', 't', 'o', 'r', '_', '1', '9', '0', '0', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', '_', 'p', 'a', 'i', 'r', '_', '0', '1', '0', '0', 't', 'l', 'p', '_', 'n', 'o', 'd', 'e', '_', '0', '1', '0', '0', 't', 'l', 'p', '_', 'n', 'o', 'd', 'e', '>', 0,
    't', 'l', 'p', ':', ':', 'E', 'd', 'g', 'e', 'E', 'x', 't', 'r', 'i', 'm', 'i', 't', 'y', 'S', 'h', 'a', 'p', 'e', ':', ':', 'E', 'd', 'g', 'e', 'E', 'x', 't', 'r', 'e', 'm', 'i', 't', 'y', 'S', 'h', 'a', 'p', 'e', 's', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', '*', '>', 0,
    't', 'l', 'p', ':', ':', 'L', 'a', 'b', 'e', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', ':', ':', 'L', 'a', 'b', 'e', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 's', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', '_', 's', 'e', 't', '_', '0', '1', '0', '0', 't', 'l', 'p', '_', 'n', 'o', 'd', 'e', '>', 0,
    'T', 'L', 'P', '_', 'B', 'E', 'F', 'O', 'R', 'E', '_', 'D', 'E', 'L', '_', 'I', 'N', 'H', 'E', 'R', 'I', 'T', 'E', 'D', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    's', 't', 'd', ':', ':', 'p', 'a', 'i', 'r', '<', 't', 'l', 'p', ':', ':', 'C', 'o', 'o', 'r', 'd', ',', 't', 'l', 'p', ':', ':', 'C', 'o', 'o', 'r', 'd', '>', 0,
    'T', 'L', 'P', '_', 'A', 'F', 'T', 'E', 'R', '_', 'D', 'E', 'L', '_', 'I', 'N', 'H', 'E', 'R', 'I', 'T', 'E', 'D', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', '_', 'p', 'a', 'i', 'r', '_', '1', '9', '0', '0', '_', '1', '9', '0', '0', '>', 0,
    't', 'l', 'p', ':', ':', 'G', 'r', 'a', 'p', 'h', 'E', 'v', 'e', 'n', 't', ':', ':', 'G', 'r', 'a', 'p', 'h', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    's', 't', 'd', ':', ':', 'p', 'a', 'i', 'r', '<', 't', 'l', 'p', ':', ':', 'n', 'o', 'd', 'e', ',', 't', 'l', 'p', ':', ':', 'n', 'o', 'd', 'e', '>', 0,
    'g', 'e', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'T', 'L', 'P', '_', 'B', 'E', 'F', 'O', 'R', 'E', '_', 'D', 'E', 'L', '_', 'L', 'O', 'C', 'A', 'L', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'g', 'e', 't', 'S', 't', 'r', 'i', 'n', 'g', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'L', 'a', 'y', 'o', 'u', 't', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'D', 'o', 'u', 'b', 'l', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', '_', 'v', 'e', 'c', 't', 'o', 'r', '_', '1', '9', '0', '0', '>', 0,
    'T', 'L', 'P', '_', 'A', 'F', 'T', 'E', 'R', '_', 'D', 'E', 'L', '_', 'L', 'O', 'C', 'A', 'L', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'g', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'l', 'o', 'a', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'C', 'h', 'e', 'c', 'k', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'i', 'e', 's', 0,
    'a', 'v', 'e', 'r', 'a', 'g', 'e', 'C', 'l', 'u', 's', 't', 'e', 'r', 'i', 'n', 'g', 'C', 'o', 'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'D', 'o', 'u', 'b', 'l', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'S', 't', 'r', 'i', 'n', 'g', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'L', 'a', 'y', 'o', 'u', 't', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'D', 'o', 'u', 'b', 'l', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'S', 't', 'r', 'i', 'n', 'g', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'S', 'e', 'l', 'f', 'L', 'o', 'o', 'p', 's', '>', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 's', 0,
    'g', 'e', 't', 'S', 'i', 'z', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'C', 'o', 'l', 'o', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'C', 'o', 'o', 'r', 'd', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    's', 't', 'd', ':', ':', 'l', 'i', 's', 't', '<', 't', 'l', 'p', ':', ':', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', '>', 0,
    's', 't', 'd', ':', ':', 'm', 'a', 'p', '<', 'f', 'l', 'o', 'a', 't', ',', 't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', '>', 0,
    't', 'l', 'p', ':', ':', 'E', 'd', 'g', 'e', 'S', 'h', 'a', 'p', 'e', ':', ':', 'E', 'd', 'g', 'e', 'S', 'h', 'a', 'p', 'e', 's', 0,
    't', 'l', 'p', ':', ':', 'N', 'o', 'd', 'e', 'S', 'h', 'a', 'p', 'e', ':', ':', 'N', 'o', 'd', 'e', 'S', 'h', 'a', 'p', 'e', 's', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'I', 'N', 'H', 'E', 'R', 'I', 'T', 'E', 'D', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'C', 'o', 'm', 'p', 'o', 'n', 'e', 'n', 't', 's', 0,
    'g', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 's', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'S', 'i', 'z', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'D', 'e', 'l', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'S', 'i', 'z', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'L', 'a', 'y', 'o', 'u', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'e', 'd', 'g', 'e', 's', 'U', 'n', 'i', 'f', 'o', 'r', 'm', 'Q', 'u', 'a', 'n', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'n', 'o', 'd', 'e', 's', 'U', 'n', 'i', 'f', 'o', 'r', 'm', 'Q', 'u', 'a', 'n', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    't', 'l', 'p', ':', ':', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'N', 'o', 'n', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'a', 't', 'e', 'd', 'E', 'd', 'g', 'e', 's', 0,
    'g', 'e', 't', 'N', 'o', 'n', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'a', 't', 'e', 'd', 'N', 'o', 'd', 'e', 's', 0,
    'a', 'f', 't', 'e', 'r', 'D', 'e', 'l', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'D', 'o', 'u', 'b', 'l', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', '>', 0,
    'T', 'L', 'P', '_', 'B', 'E', 'F', 'O', 'R', 'E', '_', 'S', 'E', 'T', '_', 'A', 'T', 'T', 'R', 'I', 'B', 'U', 'T', 'E', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'L', 'i', 'n', 'e', 's', 'I', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'g', 'e', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'D', 'e', 's', 'c', 'e', 'n', 'd', 'a', 'n', 't', 'G', 'r', 'a', 'p', 'h', 's', 0,
    'a', 'd', 'd', 'S', 'i', 'z', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'o', 'r', 'd', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'v', 'e', 'r', 'a', 'g', 'e', 'A', 'n', 'g', 'u', 'l', 'a', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'E', 'x', 'p', 'o', 'r', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    't', 'l', 'p', ':', ':', 'I', 'm', 'p', 'o', 'r', 't', 'M', 'o', 'd', 'u', 'l', 'e', 'F', 'a', 'c', 't', 'o', 'r', 'y', 0,
    't', 'l', 'p', ':', ':', 'P', 'l', 'u', 'g', 'i', 'n', 'I', 'n', 'f', 'o', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'E', 'v', 'e', 'n', 't', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'C', 'o', 'o', 'r', 'd', '>', 0,
    't', 'l', 'p', ':', ':', 'E', 'd', 'g', 'e', 'E', 'x', 't', 'r', 'i', 'm', 'i', 't', 'y', 'S', 'h', 'a', 'p', 'e', 0,
    'C', 'u', 'b', 'e', 'O', 'u', 't', 'l', 'i', 'n', 'e', 'd', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 0,
    'T', 'L', 'P', '_', 'A', 'F', 'T', 'E', 'R', '_', 'S', 'E', 'T', '_', 'A', 'T', 'T', 'R', 'I', 'B', 'U', 'T', 'E', 0,
    'g', 'e', 't', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'D', 'o', 'u', 'b', 'l', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'S', 'i', 'z', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'e', 'd', 'g', 'e', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'n', 'o', 'd', 'e', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 't', 'l', 'p', ':', ':', 'S', 'i', 'z', 'e', '>', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'L', 'O', 'C', 'A', 'L', '_', 'P', 'R', 'O', 'P', 'E', 'R', 'T', 'Y', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'P', 'o', 'l', 'y', 'g', 'o', 'n', 'C', 'e', 'n', 't', 'r', 'o', 'i', 'd', 0,
    'T', 'u', 'l', 'i', 'p', 'U', 's', 'e', 'r', 'H', 'a', 'n', 'd', 'B', 'o', 'o', 'k', 'I', 'n', 'd', 'e', 'x', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'C', 'o', 'o', 'r', 'd', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'L', 'a', 'y', 'o', 'u', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'D', 'e', 'l', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'S', 'c', 'a', 'l', 'e', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'c', 'o', 'u', 'n', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 's', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'I', 'n', 't', 'e', 'r', 'f', 'a', 'c', 'e', 0,
    'd', 'e', 'l', 'a', 'u', 'n', 'a', 'y', 'T', 'r', 'i', 'a', 'n', 'g', 'u', 'l', 'a', 't', 'i', 'o', 'n', 0,
    't', 'l', 'p', ':', ':', 'E', 'v', 'e', 'n', 't', ':', ':', 'E', 'v', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'R', 'a', 'd', 'i', 'u', 's', 0,
    't', 'l', 'p', ':', ':', 'T', 'r', 'i', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'T', 'e', 's', 't', 0,
    'c', 'l', 'u', 's', 't', 'e', 'r', 'i', 'n', 'g', 'C', 'o', 'e', 'f', 'f', 'i', 'c', 'i', 'e', 'n', 't', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'p', 'p', 'l', 'y', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'L', 'a', 'y', 'o', 'u', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'p', 'p', 'l', 'y', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'G', 'r', 'a', 'p', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'S', 'i', 'z', 'e', 'V', 'e', 'c', 't', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'C', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'f', 't', 'e', 'r', 'D', 'e', 'l', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'u', 'n', 'i', 'f', 'o', 'r', 'm', 'Q', 'u', 'a', 'n', 't', 'i', 'f', 'i', 'c', 'a', 't', 'i', 'o', 'n', 0,
    's', 'e', 't', 'A', 'l', 'l', 'E', 'd', 'g', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'A', 'l', 'l', 'N', 'o', 'd', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'A', 'l', 'l', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'A', 'l', 'l', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    't', 'l', 'p', ':', ':', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    't', 'l', 'p', ':', ':', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    't', 'l', 'p', ':', ':', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    't', 'l', 'p', ':', ':', 'S', 't', 'r', 'i', 'n', 'g', 'C', 'o', 'l', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    's', 't', 'd', ':', ':', 'l', 'i', 's', 't', '<', 't', 'l', 'p', ':', ':', 'e', 'd', 'g', 'e', '>', 0,
    'T', 'L', 'P', '_', 'R', 'E', 'M', 'O', 'V', 'E', '_', 'A', 'T', 'T', 'R', 'I', 'B', 'U', 'T', 'E', 0,
    'o', 'b', 's', 'e', 'r', 'v', 'e', 'r', 's', 'H', 'o', 'l', 'd', 'C', 'o', 'u', 'n', 't', 'e', 'r', 0,
    'g', 'e', 't', 'O', 'b', 's', 't', 'r', 'u', 'c', 't', 'i', 'o', 'n', 's', 'E', 'd', 'g', 'e', 's', 0,
    't', 'l', 'p', ':', ':', 'B', 'i', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'T', 'e', 's', 't', 0,
    't', 'l', 'p', ':', ':', 'O', 'u', 't', 'e', 'r', 'P', 'l', 'a', 'n', 'a', 'r', 'T', 'e', 's', 't', 0,
    'g', 'e', 't', 'E', 'x', 'p', 'o', 'r', 't', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'g', 'e', 't', 'I', 'm', 'p', 'o', 'r', 't', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'L', 'i', 's', 't', 0,
    'a', 'p', 'p', 'l', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'C', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'p', 'p', 'l', 'y', 'L', 'a', 'y', 'o', 'u', 't', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'a', 'p', 'p', 'l', 'y', 'D', 'o', 'u', 'b', 'l', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'S', 'i', 'z', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'e', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'p', 'u', 's', 'h', 'B', 'a', 'c', 'k', 'E', 'd', 'g', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'p', 'u', 's', 'h', 'B', 'a', 'c', 'k', 'N', 'o', 'd', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 'v', 'e', 'r', 's', 'e', 'E', 'd', 'g', 'e', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    't', 'l', 'p', ':', ':', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'A', 'l', 'l', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'A', 'l', 'l', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    't', 'l', 'p', ':', ':', 'D', 'o', 'u', 'b', 'l', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    't', 'l', 'p', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    't', 'l', 'p', ':', ':', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    't', 'l', 'p', ':', ':', 'E', 'd', 'g', 'e', 'M', 'a', 'p', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    't', 'l', 'p', ':', ':', 'N', 'o', 'd', 'e', 'M', 'a', 'p', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    's', 't', 'd', ':', ':', 's', 'e', 't', '<', 't', 'l', 'p', ':', ':', 'e', 'd', 'g', 'e', '>', 0,
    's', 't', 'd', ':', ':', 's', 'e', 't', '<', 't', 'l', 'p', ':', ':', 'n', 'o', 'd', 'e', '>', 0,
    'v', 'o', 'r', 'o', 'n', 'o', 'i', 'E', 'd', 'g', 'e', 's', 'F', 'o', 'r', 'S', 'i', 't', 'e', 0,
    't', 'l', 'p', ':', ':', 'V', 'o', 'r', 'o', 'n', 'o', 'i', 'D', 'i', 'a', 'g', 'r', 'a', 'm', 0,
    'T', 'L', 'P', '_', 'B', 'E', 'F', 'O', 'R', 'E', '_', 'S', 'E', 'T', '_', 'E', 'N', 'D', 'S', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'G', 'r', 'a', 'p', 'h', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    'c', 'o', 'u', 'n', 't', 'G', 'r', 'a', 'p', 'h', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 's', 0,
    'a', 'p', 'p', 'l', 'y', 'C', 'o', 'l', 'o', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'S', 'i', 'z', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'l', 'p', ':', ':', 'P', 'l', 'u', 'g', 'i', 'n', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'a', 'd', 'd', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'L', 'a', 'y', 'o', 'u', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    't', 'l', 'p', ':', ':', 'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'p', 'o', 'p', 'B', 'a', 'c', 'k', 'E', 'd', 'g', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'p', 'o', 'p', 'B', 'a', 'c', 'k', 'N', 'o', 'd', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'a', 'd', 'd', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    't', 'l', 'p', ':', ':', 'W', 'i', 't', 'h', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'v', 'o', 'r', 'o', 'n', 'o', 'i', 'C', 'e', 'l', 'l', 'F', 'o', 'r', 'S', 'i', 't', 'e', 0,
    't', 'l', 'p', ':', ':', 'L', 'a', 'b', 'e', 'l', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'T', 'L', 'P', '_', 'A', 'F', 'T', 'E', 'R', '_', 'S', 'E', 'T', '_', 'E', 'N', 'D', 'S', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    't', 'l', 'p', ':', ':', 'P', 'l', 'a', 'n', 'a', 'r', 'i', 't', 'y', 'T', 'e', 's', 't', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 'T', 'e', 's', 't', 0,
    'l', 'o', 'a', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'F', 'r', 'o', 'm', 'D', 'i', 'r', 0,
    'a', 'p', 'p', 'l', 'y', 'S', 'i', 'z', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'g', 'e', 't', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'e', 'x', 'i', 's', 't', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'I', 'n', 't', 'e', 'g', 'e', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'B', 'o', 'o', 'l', 'e', 'a', 'n', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'D', 'e', 's', 'c', 'e', 'n', 'd', 'a', 'n', 't', 'G', 'r', 'a', 'p', 'h', 0,
    't', 'l', 'p', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'G', 'r', 'a', 'p', 'h', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    't', 'l', 'p', ':', ':', 'G', 'r', 'a', 'p', 'h', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 'S', 't', 'a', 't', 'e', 0,
    'a', 'd', 'd', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    't', 'l', 'p', ':', ':', 'G', 'r', 'a', 'p', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'n', 'g', 'u', 'l', 'a', 'r', 'R', 'e', 's', 'o', 'l', 'u', 't', 'i', 'o', 'n', 's', 0,
    'p', 'e', 'r', 'f', 'e', 'c', 't', 'A', 's', 'p', 'e', 'c', 't', 'R', 'a', 't', 'i', 'o', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    's', 'e', 't', 'E', 'd', 'g', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'N', 'o', 'd', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'S', 't', 'r', 'i', 'n', 'g', 'V', 'a', 'l', 'u', 'e', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    't', 'l', 'p', ':', ':', 'S', 'i', 'z', 'e', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'P', 'l', 'u', 'g', 'i', 'n', 'O', 'b', 'j', 'e', 'c', 't', 0,
    't', 'l', 'p', ':', ':', 'W', 'i', 't', 'h', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'C', 'u', 'b', 'i', 'c', 'B', 'S', 'p', 'l', 'i', 'n', 'e', 'C', 'u', 'r', 'v', 'e', 0,
    'o', 'b', 's', 'e', 'r', 'v', 'a', 'b', 'l', 'e', 'D', 'e', 'l', 'e', 't', 'e', 'd', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'C', 'o', 'n', 'v', 'e', 'x', 'H', 'u', 'l', 'l', 0,
    'i', 's', 'P', 'l', 'a', 'n', 'a', 'r', 'E', 'm', 'b', 'e', 'd', 'd', 'i', 'n', 'g', 0,
    'c', 'l', 'e', 'a', 'n', 'C', 'o', 'm', 'p', 'u', 't', 'e', 'd', 'T', 'r', 'e', 'e', 0,
    't', 'l', 'p', ':', ':', 'P', 'l', 'u', 'g', 'i', 'n', 'L', 'o', 'a', 'd', 'e', 'r', 0,
    'a', 'v', 'e', 'r', 'a', 'g', 'e', 'P', 'a', 't', 'h', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'g', 'e', 't', 'S', 't', 'r', 'i', 'n', 'g', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'D', 'o', 'u', 'b', 'l', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'L', 'a', 'y', 'o', 'u', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 's', 0,
    'i', 's', 'D', 'e', 's', 'c', 'e', 'n', 'd', 'a', 'n', 't', 'G', 'r', 'a', 'p', 'h', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'a', 'd', 'd', 'C', 'o', 'l', 'o', 'r', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'd', 'd', 'F', 'l', 'o', 'a', 't', 'P', 'a', 'r', 'a', 'm', 'e', 't', 'e', 'r', 0,
    'a', 'v', 'e', 'r', 'a', 'g', 'e', 'E', 'd', 'g', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    't', 'l', 'p', ':', ':', 'S', 'i', 'z', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    't', 'l', 'p', ':', ':', 'E', 'x', 'p', 'o', 'r', 't', 'M', 'o', 'd', 'u', 'l', 'e', 0,
    't', 'l', 'p', ':', ':', 'I', 'm', 'p', 'o', 'r', 't', 'M', 'o', 'd', 'u', 'l', 'e', 0,
    't', 'l', 'p', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'E', 'd', 'g', 'e', 0,
    't', 'l', 'p', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 'N', 'a', 'm', 'e', 0,
    'T', 'L', 'P', '_', 'D', 'E', 'L', '_', 'S', 'U', 'B', 'G', 'R', 'A', 'P', 'H', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'S', 'U', 'B', 'G', 'R', 'A', 'P', 'H', 0,
    'T', 'L', 'P', '_', 'R', 'E', 'V', 'E', 'R', 'S', 'E', '_', 'E', 'D', 'G', 'E', 0,
    'T', 'L', 'P', '_', 'M', 'O', 'D', 'I', 'F', 'I', 'C', 'A', 'T', 'I', 'O', 'N', 0,
    't', 'l', 'p', ':', ':', 'A', 'c', 'y', 'c', 'l', 'i', 'c', 'T', 'e', 's', 't', 0,
    'T', 'u', 'l', 'i', 'p', 'P', 'l', 'u', 'g', 'i', 'n', 's', 'P', 'a', 't', 'h', 0,
    'n', 'e', 'w', 'C', 'l', 'o', 'n', 'e', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'a', 'd', 'd', 'G', 'r', 'a', 'p', 'h', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    'd', 'e', 'l', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'G', 'r', 'a', 'p', 'h', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'a', 'd', 'd', 'C', 'l', 'o', 'n', 'e', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    't', 'l', 'p', ':', ':', 'E', 'l', 'e', 'm', 'e', 'n', 't', 'T', 'y', 'p', 'e', 0,
    'a', 'd', 'd', 'L', 'o', 'c', 'a', 'l', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'E', 'm', 'b', 'e', 'd', 'd', 'i', 'n', 'g', 0,
    'g', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 'S', 't', 'r', 'i', 'n', 'g', 0,
    't', 'l', 'p', ':', ':', 'B', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'B', 'o', 'x', 0,
    'C', 'a', 't', 'm', 'u', 'l', 'l', 'R', 'o', 'm', 'C', 'u', 'r', 'v', 'e', 0,
    'g', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 'N', 'a', 'm', 'e', 0,
    't', 'l', 'p', ':', ':', 'G', 'r', 'a', 'p', 'h', 'E', 'v', 'e', 'n', 't', 0,
    'u', 'n', 'h', 'o', 'l', 'd', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 's', 0,
    'T', 'L', 'P', '_', 'I', 'N', 'F', 'O', 'R', 'M', 'A', 'T', 'I', 'O', 'N', 0,
    'p', 'l', 'a', 'n', 'a', 'r', 'E', 'm', 'b', 'e', 'd', 'd', 'i', 'n', 'g', 0,
    'm', 'a', 'k', 'e', 'B', 'i', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    't', 'l', 'p', ':', ':', 'S', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 's', 't', 0,
    'T', 'u', 'l', 'i', 'p', 'D', 'o', 'c', 'P', 'r', 'o', 'f', 'i', 'l', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'F', 'r', 'o', 'm', 'G', 'r', 'a', 'p', 'h', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'M', 'e', 't', 'a', 'N', 'o', 'd', 'e', 's', 0,
    'c', 'a', 'n', 'P', 'o', 'p', 'T', 'h', 'e', 'n', 'U', 'n', 'p', 'o', 'p', 0,
    'g', 'e', 't', 'S', 'i', 'z', 'e', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'M', 'e', 't', 'a', 'I', 'n', 'f', 'o', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'M', 'e', 't', 'a', 'I', 'n', 'f', 'o', 0,
    'd', 'e', 'l', 'A', 'l', 'l', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 's', 0,
    'i', 'n', 'd', 'u', 'c', 'e', 'd', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    't', 'l', 'p', ':', ':', 'O', 'b', 's', 'e', 'r', 'v', 'a', 'b', 'l', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'g', 'e', 't', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'i', 'e', 's', 0,
    't', 'l', 'p', ':', ':', 'D', 'e', 'p', 'e', 'n', 'd', 'e', 'n', 'c', 'y', 0,
    'g', 'e', 't', 'T', 'u', 'l', 'i', 'p', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'E', 'd', 'g', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'r', 'e', 's', 'i', 'z', 'e', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'N', 'o', 'd', 'e', 'E', 'l', 't', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 's', 'E', 'q', 'u', 'a', 'l', 'T', 'o', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 's', 'E', 'q', 'u', 'a', 'l', 'T', 'o', 0,
    's', 'e', 't', 'A', 'l', 'l', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'A', 'l', 'l', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', 'S', 'c', 'a', 'l', 'e', 0,
    'v', 'o', 'r', 'o', 'n', 'o', 'i', 'D', 'i', 'a', 'g', 'r', 'a', 'm', 0,
    'd', 'e', 'g', 'r', 'e', 'e', 'O', 'f', 'V', 'e', 'r', 't', 'e', 'x', 0,
    't', 'l', 'p', ':', ':', 'E', 'd', 'g', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    't', 'l', 'p', ':', ':', 'N', 'o', 'd', 'e', 'S', 'h', 'a', 'p', 'e', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'L', 'i', 's', 't', 'e', 'n', 'e', 'r', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    'i', 's', 'T', 'r', 'i', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'm', 'a', 'k', 'e', 'R', 'o', 'o', 't', 'e', 'd', 'T', 'r', 'e', 'e', 0,
    't', 'l', 'p', ':', ':', 'S', 'e', 'l', 'f', 'L', 'o', 'o', 'p', 's', 0,
    'T', 'u', 'l', 'i', 'p', 'B', 'i', 't', 'm', 'a', 'p', 'D', 'i', 'r', 0,
    'r', 'e', 'a', 'c', 'h', 'a', 'b', 'l', 'e', 'N', 'o', 'd', 'e', 's', 0,
    't', 'l', 'p', ':', ':', 'E', 'D', 'G', 'E', '_', 'T', 'Y', 'P', 'E', 0,
    'c', 'r', 'e', 'a', 't', 'e', 'M', 'e', 't', 'a', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'N', 't', 'h', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'a', 'p', 'p', 'l', 'y', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    's', 'e', 't', 'P', 'r', 'e', 'v', 'i', 'e', 'w', 'M', 'o', 'd', 'e', 0,
    'c', 'r', 'o', 's', 's', 'i', 'n', 'g', 'N', 'u', 'm', 'b', 'e', 'r', 0,
    'r', 'e', 'g', 'i', 's', 't', 'e', 'r', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    't', 'l', 'p', ':', ':', 'A', 'l', 'g', 'o', 'r', 'i', 't', 'h', 'm', 0,
    'p', 'l', 'u', 'g', 'i', 'n', 'P', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'p', 'o', 'w', 'e', 'r', 'I', 't', 'e', 'r', 'a', 't', 'i', 'o', 'n', 0,
    'C', 'h', 'r', 'i', 's', 't', 'm', 'a', 's', 'T', 'r', 'e', 'e', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'E', 'D', 'G', 'E', 'S', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'N', 'O', 'D', 'E', 'S', 0,
    'i', 's', 'B', 'i', 'c', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'i', 's', 'O', 'u', 't', 'e', 'r', 'P', 'l', 'a', 'n', 'a', 'r', 0,
    't', 'l', 'p', ':', ':', 'T', 'r', 'e', 'e', 'T', 'e', 's', 't', 0,
    'm', 'a', 'k', 'e', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'F', 'i', 'l', 'e', 's', 0,
    'g', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'i', 'e', 's', 0,
    'e', 'x', 'i', 's', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'E', 'd', 'g', 'e', 's', 0,
    'n', 'u', 'm', 'b', 'e', 'r', 'O', 'f', 'N', 'o', 'd', 'e', 's', 0,
    'g', 'e', 't', 'I', 'n', 'O', 'u', 't', 'E', 'd', 'g', 'e', 's', 0,
    'g', 'e', 't', 'I', 'n', 'O', 'u', 't', 'N', 'o', 'd', 'e', 's', 0,
    's', 'w', 'a', 'p', 'E', 'd', 'g', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    's', 'e', 't', 'S', 'u', 'p', 'e', 'r', 'G', 'r', 'a', 'p', 'h', 0,
    'g', 'e', 't', 'S', 'u', 'p', 'e', 'r', 'G', 'r', 'a', 'p', 'h', 0,
    'b', 'e', 'f', 'o', 'r', 'e', 'S', 'e', 't', 'E', 'n', 'd', 's', 0,
    'i', 's', 'P', 'r', 'e', 'v', 'i', 'e', 'w', 'M', 'o', 'd', 'e', 0,
    'p', 'l', 'u', 'g', 'i', 'n', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'b', 'o', 'o', 'l', 'e', 'a', 'n', 'R', 'e', 's', 'u', 'l', 't', 0,
    'i', 'n', 't', 'e', 'g', 'e', 'r', 'R', 'e', 's', 'u', 'l', 't', 0,
    'g', 'e', 't', 'T', 'u', 'l', 'i', 'p', 'M', 'i', 'n', 'o', 'r', 0,
    'g', 'e', 't', 'T', 'u', 'l', 'i', 'p', 'M', 'a', 'j', 'o', 'r', 0,
    'g', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'A', 't', 'P', 'o', 's', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'A', 't', 'P', 'o', 's', 0,
    's', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'S', 'c', 'a', 'l', 'e', 0,
    't', 'l', 'p', ':', ':', 'I', 't', 'e', 'r', 'a', 't', 'o', 'r', 0,
    'H', 'a', 'l', 'f', 'C', 'y', 'l', 'i', 'n', 'd', 'e', 'r', 0,
    'C', 'u', 'b', 'e', 'O', 'u', 't', 'l', 'i', 'n', 'e', 'd', 0,
    'T', 'L', 'P', '_', 'D', 'E', 'L', '_', 'E', 'D', 'G', 'E', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'E', 'D', 'G', 'E', 0,
    'T', 'L', 'P', '_', 'D', 'E', 'L', '_', 'N', 'O', 'D', 'E', 0,
    'T', 'L', 'P', '_', 'A', 'D', 'D', '_', 'N', 'O', 'D', 'E', 0,
    'i', 'n', 'i', 't', 'T', 'u', 'l', 'i', 'p', 'L', 'i', 'b', 0,
    'I', 'N', 'V', '_', 'D', 'I', 'R', 'E', 'C', 'T', 'E', 'D', 0,
    'g', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    's', 'e', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 0,
    'o', 'p', 'e', 'n', 'M', 'e', 't', 'a', 'N', 'o', 'd', 'e', 0,
    's', 'e', 't', 'E', 'd', 'g', 'e', 'O', 'r', 'd', 'e', 'r', 0,
    'g', 'e', 't', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 's', 0,
    'a', 'f', 't', 'e', 'r', 'S', 'e', 't', 'E', 'n', 'd', 's', 0,
    'T', 'L', 'P', '_', 'C', 'O', 'N', 'T', 'I', 'N', 'U', 'E', 0,
    's', 'e', 't', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    's', 'e', 't', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'V', 'a', 'l', 'u', 'e', 0,
    'd', 'o', 'u', 'b', 'l', 'e', 'R', 'e', 's', 'u', 'l', 't', 0,
    'l', 'a', 'y', 'o', 'u', 't', 'R', 'e', 's', 'u', 'l', 't', 0,
    'g', 'e', 't', 'C', 'l', 'a', 's', 's', 'N', 'a', 'm', 'e', 0,
    't', 'l', 'p', ':', ':', 'D', 'a', 't', 'a', 'S', 'e', 't', 0,
    'n', 'e', 'x', 't', 'F', 'a', 'c', 'e', 'E', 'd', 'g', 'e', 0,
    'B', 'e', 'z', 'i', 'e', 'r', 'C', 'u', 'r', 'v', 'e', 0,
    't', 'r', 'e', 'a', 't', 'E', 'v', 'e', 'n', 't', 's', 0,
    'a', 'd', 'd', 'L', 'i', 's', 't', 'e', 'n', 'e', 'r', 0,
    'a', 'd', 'd', 'O', 'b', 's', 'e', 'r', 'v', 'e', 'r', 0,
    'T', 'L', 'P', '_', 'I', 'N', 'V', 'A', 'L', 'I', 'D', 0,
    'c', 'o', 'm', 'p', 'u', 't', 'e', 'T', 'r', 'e', 'e', 0,
    'i', 's', 'C', 'o', 'n', 'n', 'e', 'c', 't', 'e', 'd', 0,
    'a', 'c', 'y', 'c', 'l', 'i', 'c', 'T', 'e', 's', 't', 0,
    'm', 'a', 'k', 'e', 'A', 'c', 'y', 'c', 'l', 'i', 'c', 0,
    'l', 'o', 'a', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 's', 0,
    'T', 'u', 'l', 'i', 'p', 'L', 'i', 'b', 'D', 'i', 'r', 0,
    'm', 'a', 'x', 'D', 'i', 's', 't', 'a', 'n', 'c', 'e', 0,
    'c', 'o', 'p', 'y', 'T', 'o', 'G', 'r', 'a', 'p', 'h', 0,
    'n', 'e', 'w', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'g', 'e', 't', 'P', 'r', 'o', 'p', 'e', 'r', 't', 'y', 0,
    'g', 'e', 't', 'O', 'u', 't', 'E', 'd', 'g', 'e', 's', 0,
    'g', 'e', 't', 'O', 'u', 't', 'N', 'o', 'd', 'e', 's', 0,
    'g', 'e', 't', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'd', 'e', 'l', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'a', 'd', 'd', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    'r', 'e', 'v', 'e', 'r', 's', 'e', 'E', 'd', 'g', 'e', 0,
    's', 'h', 'o', 'w', 'P', 'r', 'e', 'v', 'i', 'e', 'w', 0,
    'f', 'a', 'c', 't', 'o', 'r', 'y', 'N', 'a', 'm', 'e', 0,
    'g', 'e', 't', 'T', 'y', 'p', 'e', 'n', 'a', 'm', 'e', 0,
    'e', 'x', 'p', 'o', 'r', 't', 'G', 'r', 'a', 'p', 'h', 0,
    'i', 'm', 'p', 'o', 'r', 't', 'G', 'r', 'a', 'p', 'h', 0,
    'c', 'o', 'l', 'o', 'r', 'R', 'e', 's', 'u', 'l', 't', 0,
    'g', 'e', 't', 'C', 'o', 'l', 'o', 'r', 'M', 'a', 'p', 0,
    'd', 'e', 't', 'e', 'r', 'm', 'i', 'n', 'a', 'n', 't', 0,
    '_', '_', 's', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    '_', '_', 'g', 'e', 't', 'i', 't', 'e', 'm', '_', '_', 0,
    'n', 'b', 'V', 'e', 'r', 't', 'i', 'c', 'e', 's', 0,
    'R', 'o', 'u', 'n', 'd', 'e', 'd', 'B', 'o', 'x', 0,
    'G', 'l', 'o', 'w', 'S', 'p', 'h', 'e', 'r', 'e', 0,
    't', 'r', 'e', 'a', 't', 'E', 'v', 'e', 'n', 't', 0,
    'T', 'L', 'P', '_', 'D', 'E', 'L', 'E', 'T', 'E', 0,
    't', 'l', 'p', ':', ':', 'E', 'v', 'e', 'n', 't', 0,
    'i', 's', 'F', 'r', 'e', 'e', 'T', 'r', 'e', 'e', 0,
    's', 'i', 'm', 'p', 'l', 'e', 'T', 'e', 's', 't', 0,
    'm', 'a', 'k', 'e', 'S', 'i', 'm', 'p', 'l', 'e', 0,
    'l', 'o', 'a', 'd', 'P', 'l', 'u', 'g', 'i', 'n', 0,
    'U', 'N', 'D', 'I', 'R', 'E', 'C', 'T', 'E', 'D', 0,
    'i', 's', 'M', 'e', 't', 'a', 'E', 'd', 'g', 'e', 0,
    'i', 's', 'M', 'e', 't', 'a', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'I', 'n', 'E', 'd', 'g', 'e', 's', 0,
    'g', 'e', 't', 'O', 'n', 'e', 'E', 'd', 'g', 'e', 0,
    'g', 'e', 't', 'O', 'u', 't', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'I', 'n', 'N', 'o', 'd', 'e', 's', 0,
    'g', 'e', 't', 'O', 'n', 'e', 'N', 'o', 'd', 'e', 0,
    'i', 's', 'S', 'u', 'b', 'G', 'r', 'a', 'p', 'h', 0,
    't', 'l', 'p', ':', ':', 'G', 'r', 'a', 'p', 'h', 0,
    's', 'e', 't', 'C', 'o', 'm', 'm', 'e', 'n', 't', 0,
    'T', 'L', 'P', '_', 'C', 'A', 'N', 'C', 'E', 'L', 0,
    'p', 'l', 'u', 'g', 'i', 'n', 'N', 'a', 'm', 'e', 0,
    'e', 'd', 'g', 'e', 'L', 'e', 'n', 'g', 't', 'h', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'M', 'a', 'x', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 'M', 'i', 'n', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'M', 'a', 'x', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 'M', 'i', 'n', 0,
    's', 'i', 'z', 'e', 'R', 'e', 's', 'u', 'l', 't', 0,
    'g', 'e', 't', 'R', 'e', 'l', 'e', 'a', 's', 'e', 0,
    'i', 's', 'G', 'r', 'a', 'd', 'i', 'e', 'n', 't', 0,
    'g', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    's', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    't', 'l', 'p', ':', ':', 'M', 'a', 't', '4', 'f', 0,
    't', 'l', 'p', ':', ':', 'M', 'a', 't', '3', 'f', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'o', 'r', 'd', 0,
    't', 'l', 'p', ':', ':', 'C', 'o', 'l', 'o', 'r', 0,
    't', 'l', 'p', ':', ':', 'V', 'e', 'c', '4', 'i', 0,
    't', 'l', 'p', ':', ':', 'V', 'e', 'c', '4', 'f', 0,
    'd', 'o', 't', 'P', 'r', 'o', 'd', 'u', 'c', 't', 0,
    't', 'l', 'p', ':', ':', 'V', 'e', 'c', '3', 'f', 0,
    'B', 'i', 'l', 'l', 'b', 'o', 'a', 'r', 'd', 0,
    's', 'e', 'n', 'd', 'E', 'v', 'e', 'n', 't', 0,
    'g', 'e', 't', 'O', 'b', 'j', 'e', 'c', 't', 0,
    'i', 's', 'A', 'c', 'y', 'c', 'l', 'i', 'c', 0,
    'm', 'i', 'n', 'D', 'e', 'g', 'r', 'e', 'e', 0,
    'm', 'a', 'x', 'D', 'e', 'g', 'r', 'e', 'e', 0,
    's', 'a', 'v', 'e', 'G', 'r', 'a', 'p', 'h', 0,
    'l', 'o', 'a', 'd', 'G', 'r', 'a', 'p', 'h', 0,
    'e', 'x', 'i', 's', 't', 'E', 'd', 'g', 'e', 0,
    'i', 's', 'E', 'l', 'e', 'm', 'e', 'n', 't', 0,
    'g', 'e', 't', 'I', 'n', 'N', 'o', 'd', 'e', 0,
    'g', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    's', 'e', 't', 'T', 'a', 'r', 'g', 'e', 't', 0,
    's', 'e', 't', 'S', 'o', 'u', 'r', 'c', 'e', 0,
    'n', 'o', 'r', 'm', 'a', 'l', 'i', 'z', 'e', 0,
    'g', 'e', 't', 'A', 'u', 't', 'h', 'o', 'r', 0,
    'p', 'u', 's', 'h', '_', 'b', 'a', 'c', 'k', 0,
    'i', 'n', 't', 'e', 'r', 's', 'e', 'c', 't', 0,
    't', 'r', 'a', 'n', 's', 'l', 'a', 't', 'e', 0,
    't', 'r', 'a', 'n', 's', 'p', 'o', 's', 'e', 0,
    't', 'l', 'p', ':', ':', 'S', 'i', 'z', 'e', 0,
    't', 'l', 'p', ':', ':', 'e', 'd', 'g', 'e', 0,
    't', 'l', 'p', ':', ':', 'n', 'o', 'd', 'e', 0,
    'P', 'o', 'l', 'y', 'l', 'i', 'n', 'e', 0,
    'T', 'r', 'i', 'a', 'n', 'g', 'l', 'e', 0,
    'P', 'e', 'n', 't', 'a', 'g', 'o', 'n', 0,
    'i', 's', 'P', 'l', 'a', 'n', 'a', 'r', 0,
    'i', 's', 'S', 'i', 'm', 'p', 'l', 'e', 0,
    'f', 'i', 'n', 'i', 's', 'h', 'e', 'd', 0,
    'd', 'a', 'g', 'L', 'e', 'v', 'e', 'l', 0,
    'n', 'e', 'w', 'G', 'r', 'a', 'p', 'h', 0,
    'c', 'a', 'n', 'U', 'n', 'p', 'o', 'p', 0,
    'o', 'p', 'p', 'o', 's', 'i', 't', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 's', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 's', 0,
    'd', 'e', 'l', 'E', 'd', 'g', 'e', 's', 0,
    'a', 'd', 'd', 'E', 'd', 'g', 'e', 's', 0,
    'd', 'e', 'l', 'N', 'o', 'd', 'e', 's', 0,
    'a', 'd', 'd', 'N', 'o', 'd', 'e', 's', 0,
    's', 'e', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'g', 'e', 't', 'E', 'r', 'r', 'o', 'r', 0,
    'p', 'r', 'o', 'g', 'r', 'e', 's', 's', 0,
    'T', 'L', 'P', '_', 'S', 'T', 'O', 'P', 0,
    'g', 'e', 't', 'G', 'r', 'a', 'p', 'h', 0,
    'g', 'e', 't', 'G', 'r', 'o', 'u', 'p', 0,
    'g', 'e', 't', 'M', 'i', 'n', 'o', 'r', 0,
    'g', 'e', 't', 'M', 'a', 'j', 'o', 'r', 0,
    'c', 'o', 'n', 't', 'a', 'i', 'n', 's', 0,
    'c', 'o', 'f', 'a', 'c', 't', 'o', 'r', 0,
    '_', '_', 'i', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'i', 's', 'u', 'b', '_', '_', 0,
    '_', '_', 'i', 'a', 'd', 'd', '_', '_', 0,
    '_', '_', 'i', 'd', 'i', 'v', '_', '_', 0,
    '_', '_', 'i', 'm', 'u', 'l', '_', '_', 0,
    '_', '_', 'h', 'a', 's', 'h', '_', '_', 0,
    '_', '_', 'r', 'e', 'p', 'r', '_', '_', 0,
    '_', '_', 'n', 'e', 'x', 't', '_', '_', 0,
    '_', '_', 'i', 't', 'e', 'r', '_', '_', 0,
    'n', 'b', 'E', 'd', 'g', 'e', 's', 0,
    'n', 'b', 'S', 'i', 't', 'e', 's', 0,
    'H', 'e', 'x', 'a', 'g', 'o', 'n', 0,
    'D', 'i', 'a', 'm', 'o', 'n', 'd', 0,
    'g', 'e', 't', 'T', 'y', 'p', 'e', 0,
    'g', 'e', 't', 'E', 'd', 'g', 'e', 0,
    'g', 'e', 't', 'N', 'o', 'd', 'e', 0,
    'i', 's', 'A', 'l', 'i', 'v', 'e', 0,
    'a', 'b', 'o', 'r', 't', 'e', 'd', 0,
    'l', 'o', 'a', 'd', 'i', 'n', 'g', 0,
    's', 'e', 't', 'N', 'a', 'm', 'e', 0,
    's', 'e', 't', 'E', 'n', 'd', 's', 0,
    'g', 'e', 't', 'R', 'o', 'o', 't', 0,
    'd', 'e', 'l', 'E', 'd', 'g', 'e', 0,
    'd', 'e', 'l', 'N', 'o', 'd', 'e', 0,
    'a', 'd', 'd', 'E', 'd', 'g', 'e', 0,
    'a', 'd', 'd', 'N', 'o', 'd', 'e', 0,
    'r', 'o', 't', 'a', 't', 'e', 'Z', 0,
    'r', 'o', 't', 'a', 't', 'e', 'Y', 0,
    'r', 'o', 't', 'a', 't', 'e', 'X', 0,
    'r', 'e', 'v', 'e', 'r', 's', 'e', 0,
    'd', 'e', 's', 't', 'r', 'o', 'y', 0,
    'g', 'e', 't', 'I', 'n', 'f', 'o', 0,
    'g', 'e', 't', 'D', 'a', 't', 'e', 0,
    'g', 'e', 't', 'N', 'a', 'm', 'e', 0,
    'd', 'a', 't', 'a', 'S', 'e', 't', 0,
    'g', 'e', 't', 'K', 'e', 'y', 's', 0,
    'i', 'n', 'v', 'e', 'r', 's', 'e', 0,
    '_', '_', 'x', 'o', 'r', '_', '_', 0,
    '_', '_', 'd', 'i', 'v', '_', '_', 0,
    '_', '_', 's', 'u', 'b', '_', '_', 0,
    '_', '_', 'a', 'd', 'd', '_', '_', 0,
    '_', '_', 'm', 'u', 'l', '_', '_', 0,
    'i', 's', 'V', 'a', 'l', 'i', 'd', 0,
    'h', 'a', 's', 'N', 'e', 'x', 't', 0,
    '_', '_', 'l', 'e', '_', '_', 0,
    '_', '_', 'g', 'e', '_', '_', 0,
    'v', 'e', 'r', 't', 'e', 'x', 0,
    'B', 'o', 't', 't', 'o', 'm', 0,
    'C', 'e', 'n', 't', 'e', 'r', 0,
    'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'q', 'u', 'a', 'r', 'e', 0,
    'C', 'i', 'r', 'c', 'l', 'e', 0,
    's', 'e', 'n', 'd', 'e', 'r', 0,
    'i', 's', 'T', 'r', 'e', 'e', 0,
    'l', 'o', 'a', 'd', 'e', 'd', 0,
    'c', 'a', 'n', 'P', 'o', 'p', 0,
    'o', 'u', 't', 'd', 'e', 'g', 0,
    'c', 'a', 'n', 'c', 'e', 'l', 0,
    'g', 'e', 't', 'M', 'i', 'n', 0,
    'g', 'e', 't', 'M', 'a', 'x', 0,
    'r', 'e', 'm', 'o', 'v', 'e', 0,
    'e', 'x', 'p', 'a', 'n', 'd', 0,
    'c', 'e', 'n', 't', 'e', 'r', 0,
    'h', 'e', 'i', 'g', 'h', 't', 0,
    'g', 'e', 't', 'A', 'G', 'L', 0,
    'g', 'e', 't', 'B', 'G', 'L', 0,
    'g', 'e', 't', 'G', 'G', 'L', 0,
    'g', 'e', 't', 'R', 'G', 'L', 0,
    '_', '_', 'l', 't', '_', '_', 0,
    '_', '_', 'g', 't', '_', '_', 0,
    '_', '_', 'n', 'e', '_', '_', 0,
    '_', '_', 'e', 'q', '_', '_', 0,
    't', 'a', 'r', 'g', 'e', 't', 0,
    's', 'o', 'u', 'r', 'c', 'e', 0,
    'R', 'i', 'g', 'h', 't', 0,
    'A', 'r', 'r', 'o', 'w', 0,
    'C', 'r', 'o', 's', 's', 0,
    's', 't', 'a', 'r', 't', 0,
    'u', 'n', 'p', 'o', 'p', 0,
    'i', 'n', 'd', 'e', 'g', 0,
    'g', 'e', 't', 'I', 'd', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    's', 't', 'a', 't', 'e', 0,
    'e', 'r', 'a', 's', 'e', 0,
    'c', 'h', 'e', 'c', 'k', 0,
    'g', 'r', 'a', 'p', 'h', 0,
    'e', 'x', 'i', 's', 't', 0,
    's', 'c', 'a', 'l', 'e', 0,
    'e', 'm', 'p', 't', 'y', 0,
    'd', 'e', 'p', 't', 'h', 0,
    'w', 'i', 'd', 't', 'h', 0,
    't', 'u', 'l', 'i', 'p', 0,
    'c', 'e', 'l', 'l', 0,
    'L', 'e', 'f', 't', 0,
    'N', 'o', 'n', 'e', 0,
    'R', 'i', 'n', 'g', 0,
    'C', 'u', 'b', 'e', 0,
    'C', 'o', 'n', 'e', 0,
    't', 'y', 'p', 'e', 0,
    'p', 'u', 's', 'h', 0,
    'e', 'n', 'd', 's', 0,
    's', 't', 'o', 'p', 0,
    'c', 'o', 'p', 'y', 0,
    's', 'i', 'z', 'e', 0,
    'g', 'e', 't', 'D', 0,
    'g', 'e', 't', 'W', 0,
    's', 'e', 't', 'D', 0,
    's', 'e', 't', 'W', 0,
    'g', 'e', 't', 'Z', 0,
    'g', 'e', 't', 'Y', 0,
    'g', 'e', 't', 'X', 0,
    's', 'e', 't', 'Z', 0,
    's', 'e', 't', 'Y', 0,
    's', 'e', 't', 'X', 0,
    's', 'e', 't', 'V', 0,
    's', 'e', 't', 'S', 0,
    's', 'e', 't', 'H', 0,
    'g', 'e', 't', 'V', 0,
    'g', 'e', 't', 'S', 0,
    'g', 'e', 't', 'H', 0,
    's', 'e', 't', 'A', 0,
    's', 'e', 't', 'B', 0,
    's', 'e', 't', 'G', 0,
    's', 'e', 't', 'R', 0,
    'g', 'e', 't', 'A', 0,
    'g', 'e', 't', 'B', 0,
    'g', 'e', 't', 'G', 0,
    'g', 'e', 't', 'R', 0,
    'd', 'i', 's', 't', 0,
    'n', 'o', 'r', 'm', 0,
    'f', 'i', 'l', 'l', 0,
    'n', 'e', 'x', 't', 0,
    'T', 'o', 'p', 0,
    'o', 'l', 'd', 0,
    'r', 'u', 'n', 0,
    's', 'e', 't', 0,
    't', 'l', 'p', 0,
    'e', '3', 0,
    'e', '2', 0,
    'e', '1', 0,
    'n', '2', 0,
    'n', '1', 0,
    'a', 't', 0,
};
#line 115 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Module.sip"

int throwInvalidNodeException(const tlp::Graph *graph, tlp::node n) {
    std::ostringstream oss;
    std::string graphName;
    graph->getAttribute("name", graphName);
    oss << "Node with id " << n.id << " does not belong to graph \"" << graphName <<"\" (id " << graph->getId() <<")";
    PyErr_SetString(PyExc_Exception, oss.str().c_str());
    return -1;
}

int throwInvalidEdgeException(const tlp::Graph *graph, tlp::edge e) {
    std::ostringstream oss;
    std::string graphName;
    graph->getAttribute("name", graphName);
    oss << "Edge with id " << e.id << " does not belong to graph \"" << graphName <<"\" (id " << graph->getId() <<")";
    PyErr_SetString(PyExc_Exception, oss.str().c_str());
    return -1;
}


void printErrorMessage(const std::string &errMsg) {
    std::string pythonCode = "import sys\n"
                             "sys.stderr.write(\"";
    pythonCode += errMsg;
    pythonCode += "\\n\")";
    PyRun_SimpleString(pythonCode.c_str());
}

std::vector<std::string> getAlgorithmPluginsListOfType(const std::string& type) {
    std::vector<std::string> ret;
    tlp::Iterator<tlp::AlgorithmPlugin *> *itP = tlp::AlgorithmPlugin::factory->availablePluginObjects();
    while (itP->hasNext()) {
          tlp::AlgorithmPlugin *plugin = itP->next();
          if (type == plugin->getClassName())
             ret.push_back(plugin->getName());
    }
    delete itP;
    return ret;
}

bool pluginExists(std::string pluginName, std::string type) {
    if (type == "Import" || type == "Export") {
        std::string importFactoType = tlp::TemplateFactoryInterface::standardizeName(typeid(tlp::ImportModule).name());
        std::string exportFactoType = tlp::TemplateFactoryInterface::standardizeName(typeid(tlp::ExportModule).name());
        std::map< std::string, tlp::TemplateFactoryInterface* >::iterator it = tlp::TemplateFactoryInterface::allFactories->begin();
        for (; it != tlp::TemplateFactoryInterface::allFactories->end() ; ++it) {
            if ((it->first == importFactoType && type == "Import") || (it->first == exportFactoType && type == "Export"))
                return it->second->pluginExists(pluginName);
        }
        return false;
    } else {
        std::vector<std::string> algoList = getAlgorithmPluginsListOfType(type);
        return std::find(algoList.begin(), algoList.end(), pluginName) != algoList.end();
    }
}

void releaseSIPWrapper(void *wrappedCppObject, const sipTypeDef *td) {
    PyObject *pyObj = sipGetPyObject(wrappedCppObject, td);
    if (pyObj) {
        sipTransferTo(pyObj, pyObj);
        sipSimpleWrapper *wrapper = reinterpret_cast<sipSimpleWrapper *>(pyObj);
        sipCommonDtor(wrapper);
    }
}

#line 53 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
void releaseGraphWrapper(tlp::Graph *graph) {
    releaseSIPWrapper(graph, sipType_tlp_Graph);
}

void releaseGraphHierarchyWrappers(tlp::Graph *graph) {
    tlp::Graph *sg = NULL;
    forEach(sg, graph->getSubGraphs()) {
        releaseGraphHierarchyWrappers(sg);
    }
    releaseGraphWrapper(graph);
}

void initializeGraphViewProperties(tlp::Graph *graph) {
    if (!graph->existProperty("viewSize")) {
        graph->getProperty<tlp::SizeProperty>("viewSize")->setAllNodeValue(tlp::Size(1,1,1));
        graph->getProperty<tlp::SizeProperty>("viewSize")->setAllEdgeValue(tlp::Size(0.125,0.125,0.5));
    }
    if (!graph->existProperty("viewColor")) {
        graph->getProperty<tlp::ColorProperty>("viewColor")->setAllNodeValue(tlp::Color(255,0,0));
        graph->getProperty<tlp::ColorProperty>("viewColor")->setAllEdgeValue(tlp::Color(0,0,0));
    }
    if (!graph->existProperty("viewShape")) {
        graph->getProperty<tlp::IntegerProperty>("viewShape")->setAllNodeValue(4);
        graph->getProperty<tlp::IntegerProperty>("viewShape")->setAllEdgeValue(0);
    }
    if (!graph->existProperty("viewFont")) {
        graph->getProperty<tlp::StringProperty>("viewFont")->setAllNodeValue(tlp::TulipBitmapDir + "font.ttf");
        graph->getProperty<tlp::StringProperty>("viewFont")->setAllEdgeValue(tlp::TulipBitmapDir + "font.ttf");
    }
    if (!graph->existProperty("viewFontSize")) {
        graph->getProperty<tlp::IntegerProperty>("viewFontSize")->setAllNodeValue(18);
        graph->getProperty<tlp::IntegerProperty>("viewFontSize")->setAllEdgeValue(18);
    }
    if (!graph->existProperty("viewSrcAnchorShape")) {
        graph->getProperty<tlp::IntegerProperty>("viewSrcAnchorShape")->setAllEdgeValue(UINT_MAX);
    }
    if (!graph->existProperty("viewSrcAnchorSize")) {
        graph->getProperty<tlp::SizeProperty>("viewSrcAnchorSize")->setAllEdgeValue(tlp::Size(0.25,0.25,0.25));
    }
    if (!graph->existProperty("viewTgtAnchorShape")) {
        graph->getProperty<tlp::IntegerProperty>("viewTgtAnchorShape")->setAllEdgeValue(50);
    }
    if (!graph->existProperty("viewTgtAnchorSize")) {
        graph->getProperty<tlp::SizeProperty>("viewTgtAnchorSize")->setAllEdgeValue(tlp::Size(0.25,0.25,0.25));
    }
}
#line 970 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"

void sipVH_tulip_0(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::Event& a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<tlp::Event *>(&a0),sipType_tlp_Event,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_1(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::vector<tlp::Event>& a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new std::vector<tlp::Event>(a0),sipType_std_vector_0100tlp_Event,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_2(sip_gilstate_t sipGILState,PyObject *sipMethod,bool a0,const std::string& a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"bN",a0,new std::string(a1),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_3(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::string& a0,const std::string& a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"NN",new std::string(a0),sipType_std_string,NULL,new std::string(a1),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_4(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::string& a0,const std::string& a1,const std::string& a2,const std::string& a3,const std::string& a4,const std::string& a5,const std::list<tlp::Dependency>& a6)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNNNNNN",new std::string(a0),sipType_std_string,NULL,new std::string(a1),sipType_std_string,NULL,new std::string(a2),sipType_std_string,NULL,new std::string(a3),sipType_std_string,NULL,new std::string(a4),sipType_std_string,NULL,new std::string(a5),sipType_std_string,NULL,new std::list<tlp::Dependency>(a6),sipType_std_list_0100tlp_Dependency,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_5(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::string& a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new std::string(a0),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_6(sip_gilstate_t sipGILState,PyObject *sipMethod,int a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"i",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_7(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::IteratorNode *a0,bool a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"Db",a0,sipType_tlp_IteratorNode,NULL,a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_8(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::Graph *a0,const std::string& a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DN",a0,sipType_tlp_Graph,NULL,new std::string(a1),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_9(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::Graph *a0,tlp::Graph *a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DD",a0,sipType_tlp_Graph,NULL,a1,sipType_tlp_Graph,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_10(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::Graph *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_Graph,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_11(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::Graph *a0,const tlp::edge a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DN",a0,sipType_tlp_Graph,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_12(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::Graph *a0,const tlp::node a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DN",a0,sipType_tlp_Graph,NULL,new tlp::node(a1),sipType_tlp_node,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_13(sip_gilstate_t sipGILState,PyObject *sipMethod,std::string a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new std::string(a0),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

std::string sipVH_tulip_14(sip_gilstate_t sipGILState,PyObject *sipMethod)
{
    std::string sipRes;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H5",sipType_std_string,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::ProgressState sipVH_tulip_15(sip_gilstate_t sipGILState,PyObject *sipMethod)
{
    tlp::ProgressState sipRes = (tlp::ProgressState)0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"F",sipType_tlp_ProgressState,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_16(sip_gilstate_t sipGILState,PyObject *sipMethod,bool a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"b",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_17(sip_gilstate_t sipGILState,PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_18(sip_gilstate_t sipGILState,PyObject *sipMethod)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

tlp::ProgressState sipVH_tulip_19(sip_gilstate_t sipGILState,PyObject *sipMethod,int a0,int a1)
{
    tlp::ProgressState sipRes = (tlp::ProgressState)0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"ii",a0,a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"F",sipType_tlp_ProgressState,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_20(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::CoordVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_CoordVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_21(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::CoordVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_CoordVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_22(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::CoordVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_CoordVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::IteratorEdge * sipVH_tulip_23(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::Graph *a0)
{
    tlp::IteratorEdge * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<tlp::Graph *>(a0),sipType_tlp_Graph,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H0",sipType_tlp_IteratorEdge,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::IteratorNode * sipVH_tulip_24(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::Graph *a0)
{
    tlp::IteratorNode * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",const_cast<tlp::Graph *>(a0),sipType_tlp_Graph,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H0",sipType_tlp_IteratorNode,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_25(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::string& a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new std::string(a0),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_26(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::edge a0,const std::string& a1)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NN",new tlp::edge(a0),sipType_tlp_edge,NULL,new std::string(a1),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_27(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::node a0,const std::string& a1)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NN",new tlp::node(a0),sipType_tlp_node,NULL,new std::string(a1),sipType_std_string,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

std::string sipVH_tulip_28(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::edge a0)
{
    std::string sipRes;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::edge(a0),sipType_tlp_edge,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H5",sipType_std_string,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

std::string sipVH_tulip_29(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::node a0)
{
    std::string sipRes;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::node(a0),sipType_tlp_node,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H5",sipType_std_string,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_30(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::edge a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::edge(a0),sipType_tlp_edge,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_31(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::node a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::node(a0),sipType_tlp_node,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_32(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::LayoutProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_LayoutProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_33(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::LayoutProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_LayoutProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_34(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::LayoutProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_LayoutProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_35(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::IntegerVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_IntegerVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_36(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::IntegerVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_IntegerVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_37(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::IntegerVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_IntegerVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_38(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::IntegerProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_IntegerProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_39(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::IntegerProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_IntegerProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_40(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::IntegerProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_IntegerProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_41(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::SizeVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_SizeVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_42(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::SizeVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_SizeVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_43(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::SizeVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_SizeVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_44(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::SizeProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_SizeProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_45(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::SizeProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_SizeProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_46(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::SizeProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_SizeProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_47(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::StringVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_StringVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_48(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::StringVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_StringVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_49(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::StringVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_StringVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_50(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::StringProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_StringProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_51(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::StringProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_StringProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_52(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::StringProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_StringProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_53(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::ColorVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_ColorVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_54(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::ColorVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_ColorVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_55(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::ColorVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_ColorVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_56(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::ColorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_ColorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_57(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::ColorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_ColorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_58(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::ColorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_ColorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_59(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::DoubleVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_DoubleVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_60(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::DoubleVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_DoubleVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_61(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::DoubleVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_DoubleVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_62(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::DoubleProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_DoubleProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_63(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::DoubleProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_DoubleProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_64(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::DoubleProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_DoubleProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_65(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::BooleanVectorProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_BooleanVectorProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_66(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::BooleanVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_BooleanVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_67(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::BooleanVectorProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_BooleanVectorProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_68(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::BooleanProperty *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_BooleanProperty,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

bool sipVH_tulip_69(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::edge a0,tlp::edge a1,tlp::BooleanProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::edge(a0),sipType_tlp_edge,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL,a2,sipType_tlp_BooleanProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_70(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::node a0,tlp::node a1,tlp::BooleanProperty *a2,bool a3)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"NNDb",new tlp::node(a0),sipType_tlp_node,NULL,new tlp::node(a1),sipType_tlp_node,NULL,a2,sipType_tlp_BooleanProperty,NULL,a3);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_71(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::PropertyInterface *a0)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",a0,sipType_tlp_PropertyInterface,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_72(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::PropertyInterface *a0,const tlp::edge a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DN",a0,sipType_tlp_PropertyInterface,NULL,new tlp::edge(a1),sipType_tlp_edge,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_73(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::PropertyInterface *a0,const tlp::node a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"DN",a0,sipType_tlp_PropertyInterface,NULL,new tlp::node(a1),sipType_tlp_node,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

tlp::ExportModule * sipVH_tulip_74(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::AlgorithmContext a0)
{
    tlp::ExportModule * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::AlgorithmContext(a0),sipType_tlp_AlgorithmContext,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H2",sipType_tlp_ExportModule,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_75(sip_gilstate_t sipGILState,PyObject *sipMethod,std::ostream& a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"D",&a0,sipType_std_ostream,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"b",&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::ImportModule * sipVH_tulip_76(sip_gilstate_t sipGILState,PyObject *sipMethod,tlp::AlgorithmContext a0)
{
    tlp::ImportModule * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::AlgorithmContext(a0),sipType_tlp_AlgorithmContext,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H2",sipType_tlp_ImportModule,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::Algorithm * sipVH_tulip_77(sip_gilstate_t sipGILState,PyObject *sipMethod,const tlp::AlgorithmContext& a0)
{
    tlp::Algorithm * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"N",new tlp::AlgorithmContext(a0),sipType_tlp_AlgorithmContext,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H2",sipType_tlp_Algorithm,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

bool sipVH_tulip_78(sip_gilstate_t sipGILState,PyObject *sipMethod,std::string& a0)
{
    bool sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"(bH5)",&sipRes,sipType_std_string,&a0) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

tlp::Color sipVH_tulip_79(sip_gilstate_t sipGILState,PyObject *sipMethod,const float a0)
{
    tlp::Color sipRes;
    PyObject *resObj = sipCallMethod(0,sipMethod,"f",a0);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"H5",sipType_tlp_Color,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}

void sipVH_tulip_80(sip_gilstate_t sipGILState,PyObject *sipMethod,const float a0,const tlp::Color& a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"fN",a0,new tlp::Color(a1),sipType_tlp_Color,NULL);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}

void sipVH_tulip_81(sip_gilstate_t sipGILState,PyObject *sipMethod,const std::vector<tlp::Color> a0,const bool a1)
{
    PyObject *resObj = sipCallMethod(0,sipMethod,"Nb",new std::vector<tlp::Color>(a0),sipType_std_vector_0100tlp_Color,NULL,a1);

    if (!resObj || sipParseResult(0,sipMethod,resObj,"Z") < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_tlp_PropertyInterface(void **);}
static const sipTypeDef *sipSubClass_tlp_PropertyInterface(void **sipCppRet)
{
    tlp::PropertyInterface *sipCpp = reinterpret_cast<tlp::PropertyInterface *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 34 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PropertyInterface.sip"
    if (dynamic_cast<tlp::BooleanProperty *>(sipCpp)) {
        sipType = sipType_tlp_BooleanProperty;
    } else if (dynamic_cast<tlp::ColorProperty *>(sipCpp)) {
        sipType = sipType_tlp_ColorProperty;
    } else if (dynamic_cast<tlp::DoubleProperty *>(sipCpp)) {
        sipType = sipType_tlp_DoubleProperty;
    } else if (dynamic_cast<tlp::GraphProperty *>(sipCpp)) {
        sipType = sipType_tlp_GraphProperty;
    } else if (dynamic_cast<tlp::IntegerProperty *>(sipCpp)) {
        sipType = sipType_tlp_IntegerProperty;
    } else if (dynamic_cast<tlp::LayoutProperty *>(sipCpp)) {
        sipType = sipType_tlp_LayoutProperty;
    } else if (dynamic_cast<tlp::SizeProperty *>(sipCpp)) {
        sipType = sipType_tlp_SizeProperty;
    } else if (dynamic_cast<tlp::StringProperty *>(sipCpp)) {
        sipType = sipType_tlp_StringProperty;

    } else if (dynamic_cast<tlp::BooleanVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_BooleanVectorProperty;
    } else if (dynamic_cast<tlp::ColorVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_ColorVectorProperty;
    } else if (dynamic_cast<tlp::DoubleVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_DoubleVectorProperty;
    } else if (dynamic_cast<tlp::IntegerVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_IntegerVectorProperty;
    } else if (dynamic_cast<tlp::CoordVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_CoordVectorProperty;
    } else if (dynamic_cast<tlp::SizeVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_SizeVectorProperty;
    } else if (dynamic_cast<tlp::StringVectorProperty *>(sipCpp)) {
        sipType = sipType_tlp_StringVectorProperty;
    } else {
        sipType = NULL;
    }
#line 2216 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_tlp_Event(void **);}
static const sipTypeDef *sipSubClass_tlp_Event(void **sipCppRet)
{
    tlp::Event *sipCpp = reinterpret_cast<tlp::Event *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 34 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Observable.sip"
   sipType = NULL;
#line 2231 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"

    return sipType;
}


/* Convert to a sub-class if possible. */
extern "C" {static const sipTypeDef *sipSubClass_tlp_GraphEvent(void **);}
static const sipTypeDef *sipSubClass_tlp_GraphEvent(void **sipCppRet)
{
    tlp::Event *sipCpp = reinterpret_cast<tlp::Event *>(*sipCppRet);
    const sipTypeDef *sipType;

#line 9 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphEvent.sip"
   if (dynamic_cast<tlp::GraphEvent*>(sipCpp)) {
        sipType = sipType_tlp_GraphEvent;
   } else {
        sipType = NULL;
    }
#line 2250 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"

    return sipType;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__LabelPosition__LabelPositions, {0}}, sipNameNr_LabelPositions, 69, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__EdgeExtrimityShape__EdgeExtremityShapes, {0}}, sipNameNr_EdgeExtremityShapes, 45, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__EdgeShape__EdgeShapes, {0}}, sipNameNr_EdgeShapes, 48, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__NodeShape__NodeShapes, {0}}, sipNameNr_NodeShapes, 76, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__GraphEvent__GraphEventType, {0}}, sipNameNr_GraphEventType, 56, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__Event__EventType, {0}}, sipNameNr_EventType, 51, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__EDGE_TYPE, {0}}, sipNameNr_EDGE_TYPE, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__ElementType, {0}}, sipNameNr_ElementType, 21, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_tlp__ProgressState, {0}}, sipNameNr_ProgressState, 21, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_tulip_std_list_0100tlp_Dependency.mtd_base,
    &sipTypeDef_tulip_std_list_0100tlp_edge.mtd_base,
    &sipTypeDef_tulip_std_map_2200_0100tlp_Color.mtd_base,
    &sipTypeDef_tulip_std_pair_0100std_vector_0100std_pair_1900_1900_0100std_vector_0100std_vector_1900.mtd_base,
    &sipTypeDef_tulip_std_pair_0100tlp_Coord_0100tlp_Coord.mtd_base,
    &sipTypeDef_tulip_std_pair_0100tlp_node_0100tlp_node.mtd_base,
    &sipTypeDef_tulip_std_set_0100tlp_edge.mtd_base,
    &sipTypeDef_tulip_std_set_0100tlp_node.mtd_base,
    &sipTypeDef_tulip_std_vector_0100std_string.mtd_base,
    &sipTypeDef_tulip_std_vector_0100std_pair_0100tlp_node_0100tlp_node.mtd_base,
    &sipTypeDef_tulip_std_vector_0100std_pair_1900_1900.mtd_base,
    &sipTypeDef_tulip_std_vector_0100std_set_0100tlp_node.mtd_base,
    &sipTypeDef_tulip_std_vector_0100std_vector_1900.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_Color.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_Coord.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_Event.mtd_base,
    &sipTypeDef_tulip_std_vector_0101tlp_PropertyInterface.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_SelfLoops.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_Size.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_edge.mtd_base,
    &sipTypeDef_tulip_std_vector_0100tlp_node.mtd_base,
    &sipTypeDef_tulip_tlp.ctd_base,
    &sipTypeDef_tulip_tlp_AcyclicTest.ctd_base,
    &sipTypeDef_tulip_tlp_Algorithm.ctd_base,
    &sipTypeDef_tulip_tlp_AlgorithmContext.ctd_base,
    &sipTypeDef_tulip_tlp_AlgorithmPlugin.ctd_base,
    &sipTypeDef_tulip_tlp_BiconnectedTest.ctd_base,
    &sipTypeDef_tulip_tlp_BooleanAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_BooleanProperty.ctd_base,
    &sipTypeDef_tulip_tlp_BooleanVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_BoundingBox.ctd_base,
    &sipTypeDef_tulip_tlp_Color.ctd_base,
    &sipTypeDef_tulip_tlp_ColorAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_ColorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_ColorScale.ctd_base,
    &sipTypeDef_tulip_tlp_ColorVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_ConnectedTest.ctd_base,
    &sipTypeDef_tulip_tlp_Coord.ctd_base,
    &sipTypeDef_tulip_tlp_CoordVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_DataSet.ctd_base,
    &sipTypeDef_tulip_tlp_Dependency.ctd_base,
    &sipTypeDef_tulip_tlp_DoubleAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_DoubleProperty.ctd_base,
    &sipTypeDef_tulip_tlp_DoubleVectorProperty.ctd_base,
    &enumTypes[6].etd_base,
    &sipTypeDef_tulip_tlp_EdgeExtrimityShape.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_tulip_tlp_EdgeMapIterator.ctd_base,
    &sipTypeDef_tulip_tlp_EdgeShape.ctd_base,
    &enumTypes[2].etd_base,
    &enumTypes[7].etd_base,
    &sipTypeDef_tulip_tlp_Event.ctd_base,
    &enumTypes[5].etd_base,
    &sipTypeDef_tulip_tlp_ExportModule.ctd_base,
    &sipTypeDef_tulip_tlp_ExportModuleFactory.ctd_base,
    &sipTypeDef_tulip_tlp_Graph.ctd_base,
    &sipTypeDef_tulip_tlp_GraphEvent.ctd_base,
    &enumTypes[4].etd_base,
    &sipTypeDef_tulip_tlp_GraphObserver.ctd_base,
    &sipTypeDef_tulip_tlp_GraphProperty.ctd_base,
    &sipTypeDef_tulip_tlp_ImportModule.ctd_base,
    &sipTypeDef_tulip_tlp_ImportModuleFactory.ctd_base,
    &sipTypeDef_tulip_tlp_IntegerAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_IntegerProperty.ctd_base,
    &sipTypeDef_tulip_tlp_IntegerVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_IteratorEdge.ctd_base,
    &sipTypeDef_tulip_tlp_IteratorGraph.ctd_base,
    &sipTypeDef_tulip_tlp_IteratorNode.ctd_base,
    &sipTypeDef_tulip_tlp_IteratorString.ctd_base,
    &sipTypeDef_tulip_tlp_LabelPosition.ctd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_tulip_tlp_LayoutAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_LayoutProperty.ctd_base,
    &sipTypeDef_tulip_tlp_Mat3f.ctd_base,
    &sipTypeDef_tulip_tlp_Mat4f.ctd_base,
    &sipTypeDef_tulip_tlp_NodeMapIterator.ctd_base,
    &sipTypeDef_tulip_tlp_NodeShape.ctd_base,
    &enumTypes[3].etd_base,
    &sipTypeDef_tulip_tlp_Observable.ctd_base,
    &sipTypeDef_tulip_tlp_OuterPlanarTest.ctd_base,
    &sipTypeDef_tulip_tlp_PlanarityTest.ctd_base,
    &sipTypeDef_tulip_tlp_PluginInfoInterface.ctd_base,
    &sipTypeDef_tulip_tlp_PluginLoader.ctd_base,
    &sipTypeDef_tulip_tlp_PluginProgress.ctd_base,
    &enumTypes[8].etd_base,
    &sipTypeDef_tulip_tlp_PropertyInterface.ctd_base,
    &sipTypeDef_tulip_tlp_PropertyObserver.ctd_base,
    &sipTypeDef_tulip_tlp_SelfLoops.ctd_base,
    &sipTypeDef_tulip_tlp_SimpleTest.ctd_base,
    &sipTypeDef_tulip_tlp_Size.ctd_base,
    &sipTypeDef_tulip_tlp_SizeAlgorithm.ctd_base,
    &sipTypeDef_tulip_tlp_SizeProperty.ctd_base,
    &sipTypeDef_tulip_tlp_SizeVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_StringCollection.ctd_base,
    &sipTypeDef_tulip_tlp_StringProperty.ctd_base,
    &sipTypeDef_tulip_tlp_StringVectorProperty.ctd_base,
    &sipTypeDef_tulip_tlp_TreeTest.ctd_base,
    &sipTypeDef_tulip_tlp_TriconnectedTest.ctd_base,
    &sipTypeDef_tulip_tlp_Vec3f.ctd_base,
    &sipTypeDef_tulip_tlp_Vec4f.ctd_base,
    &sipTypeDef_tulip_tlp_Vec4i.ctd_base,
    &sipTypeDef_tulip_tlp_VoronoiDiagram.ctd_base,
    &sipTypeDef_tulip_tlp_WithDependency.ctd_base,
    &sipTypeDef_tulip_tlp_WithParameter.ctd_base,
    &sipTypeDef_tulip_tlp_edge.ctd_base,
    &sipTypeDef_tulip_tlp_node.ctd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"std_pair_0100tlp_node_0100tlp_node", "std::pair<tlp::node,tlp::node>"},
    {"std_pair_1900_1900", "std::pair<uint,uint>"},
    {"std_set_0100tlp_node", "std::set<tlp::node>"},
    {"std_vector_0100std_pair_1900_1900", "std::vector<std_pair_1900_1900>"},
    {"std_vector_0100std_vector_1900", "std::vector<std_vector_1900>"},
    {"std_vector_1900", "std::vector<uint>"},
    {"tlp::GraphPointer", "tlp::Graph *"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_tulip_0,
    (sipVirtHandlerFunc)sipVH_tulip_1,
    (sipVirtHandlerFunc)sipVH_tulip_2,
    (sipVirtHandlerFunc)sipVH_tulip_3,
    (sipVirtHandlerFunc)sipVH_tulip_4,
    (sipVirtHandlerFunc)sipVH_tulip_5,
    (sipVirtHandlerFunc)sipVH_tulip_6,
    (sipVirtHandlerFunc)sipVH_tulip_7,
    (sipVirtHandlerFunc)sipVH_tulip_8,
    (sipVirtHandlerFunc)sipVH_tulip_9,
    (sipVirtHandlerFunc)sipVH_tulip_10,
    (sipVirtHandlerFunc)sipVH_tulip_11,
    (sipVirtHandlerFunc)sipVH_tulip_12,
    (sipVirtHandlerFunc)sipVH_tulip_13,
    (sipVirtHandlerFunc)sipVH_tulip_14,
    (sipVirtHandlerFunc)sipVH_tulip_15,
    (sipVirtHandlerFunc)sipVH_tulip_16,
    (sipVirtHandlerFunc)sipVH_tulip_17,
    (sipVirtHandlerFunc)sipVH_tulip_18,
    (sipVirtHandlerFunc)sipVH_tulip_19,
    (sipVirtHandlerFunc)sipVH_tulip_20,
    (sipVirtHandlerFunc)sipVH_tulip_21,
    (sipVirtHandlerFunc)sipVH_tulip_22,
    (sipVirtHandlerFunc)sipVH_tulip_23,
    (sipVirtHandlerFunc)sipVH_tulip_24,
    (sipVirtHandlerFunc)sipVH_tulip_25,
    (sipVirtHandlerFunc)sipVH_tulip_26,
    (sipVirtHandlerFunc)sipVH_tulip_27,
    (sipVirtHandlerFunc)sipVH_tulip_28,
    (sipVirtHandlerFunc)sipVH_tulip_29,
    (sipVirtHandlerFunc)sipVH_tulip_30,
    (sipVirtHandlerFunc)sipVH_tulip_31,
    (sipVirtHandlerFunc)sipVH_tulip_32,
    (sipVirtHandlerFunc)sipVH_tulip_33,
    (sipVirtHandlerFunc)sipVH_tulip_34,
    (sipVirtHandlerFunc)sipVH_tulip_35,
    (sipVirtHandlerFunc)sipVH_tulip_36,
    (sipVirtHandlerFunc)sipVH_tulip_37,
    (sipVirtHandlerFunc)sipVH_tulip_38,
    (sipVirtHandlerFunc)sipVH_tulip_39,
    (sipVirtHandlerFunc)sipVH_tulip_40,
    (sipVirtHandlerFunc)sipVH_tulip_41,
    (sipVirtHandlerFunc)sipVH_tulip_42,
    (sipVirtHandlerFunc)sipVH_tulip_43,
    (sipVirtHandlerFunc)sipVH_tulip_44,
    (sipVirtHandlerFunc)sipVH_tulip_45,
    (sipVirtHandlerFunc)sipVH_tulip_46,
    (sipVirtHandlerFunc)sipVH_tulip_47,
    (sipVirtHandlerFunc)sipVH_tulip_48,
    (sipVirtHandlerFunc)sipVH_tulip_49,
    (sipVirtHandlerFunc)sipVH_tulip_50,
    (sipVirtHandlerFunc)sipVH_tulip_51,
    (sipVirtHandlerFunc)sipVH_tulip_52,
    (sipVirtHandlerFunc)sipVH_tulip_53,
    (sipVirtHandlerFunc)sipVH_tulip_54,
    (sipVirtHandlerFunc)sipVH_tulip_55,
    (sipVirtHandlerFunc)sipVH_tulip_56,
    (sipVirtHandlerFunc)sipVH_tulip_57,
    (sipVirtHandlerFunc)sipVH_tulip_58,
    (sipVirtHandlerFunc)sipVH_tulip_59,
    (sipVirtHandlerFunc)sipVH_tulip_60,
    (sipVirtHandlerFunc)sipVH_tulip_61,
    (sipVirtHandlerFunc)sipVH_tulip_62,
    (sipVirtHandlerFunc)sipVH_tulip_63,
    (sipVirtHandlerFunc)sipVH_tulip_64,
    (sipVirtHandlerFunc)sipVH_tulip_65,
    (sipVirtHandlerFunc)sipVH_tulip_66,
    (sipVirtHandlerFunc)sipVH_tulip_67,
    (sipVirtHandlerFunc)sipVH_tulip_68,
    (sipVirtHandlerFunc)sipVH_tulip_69,
    (sipVirtHandlerFunc)sipVH_tulip_70,
    (sipVirtHandlerFunc)sipVH_tulip_71,
    (sipVirtHandlerFunc)sipVH_tulip_72,
    (sipVirtHandlerFunc)sipVH_tulip_73,
    (sipVirtHandlerFunc)sipVH_tulip_74,
    (sipVirtHandlerFunc)sipVH_tulip_75,
    (sipVirtHandlerFunc)sipVH_tulip_76,
    (sipVirtHandlerFunc)sipVH_tulip_77,
    (sipVirtHandlerFunc)sipVH_tulip_78,
    (sipVirtHandlerFunc)sipVH_tulip_79,
    (sipVirtHandlerFunc)sipVH_tulip_80,
    (sipVirtHandlerFunc)sipVH_tulip_81,
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"stl", -1, NULL},
    {NULL, -1, NULL}
};


/* This defines the class sub-convertors that this module defines. */
static sipSubClassConvertorDef convertorsTable[] = {
    {sipSubClass_tlp_PropertyInterface, {85, 255, 0}, NULL},
    {sipSubClass_tlp_Event, {51, 255, 0}, NULL},
    {sipSubClass_tlp_GraphEvent, {51, 255, 0}, NULL},
    {NULL, {0, 0, 0}, NULL}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_tulip = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_tulip,
    0,
    -1,
    sipStrings_tulip,
    importsTable,
    NULL,
    106,
    typesTable,
    NULL,
    0,
    NULL,
    7,
    typedefsTable,
    virtHandlersTable,
    convertorsTable,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_tulip;
const sipExportedModuleDef *sipModuleAPI_tulip_stl;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_tulip
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        inittulip
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "tulip",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Module.sip"
    std::string tlpImportHook =
    "try:\n"
    "   _origimportfunc\n"
    "except NameError:\n"
    "   import sys\n"
#if PY_MAJOR_VERSION >= 3
    "   import builtins\n"
    "   _origimportfunc = builtins.__import__\n"
#else
    "   import __builtin__\n"
    "   _origimportfunc = __builtin__.__import__\n"
#endif
    "   def tlpimporthook(name, globals={}, locals={}, fromlist=[], level=-1):\n"
    "       fullname = name\n"
    "       m = _origimportfunc(name, globals, locals, fromlist, level)\n"
    "       if fullname.startswith(\"tulip\"):\n"
    "           if fromlist and len(fromlist) > 0 and fromlist[0] == \"*\":\n"
    "               curTlpDict = None\n"
    "               if \"tlp\" in locals:\n"
    "                   curTlpDict = locals[\"tlp\"].__dict__\n"
    "                   if curTlpDict:\n"
    "                       m = type(fullname, (object,), dict(m.__dict__))\n"
    "                       m.tlp = type(\"tlp\", (object,), dict(m.tlp.__dict__))\n"
    "                       for k in curTlpDict.keys():\n"
    "                           if not k.startswith(\"_\"):\n"
    "                               setattr(m.tlp, k, curTlpDict[k])\n"
    "       return m\n"
#if PY_MAJOR_VERSION >= 3
    "   builtins.__import__ = tlpimporthook\n"
#else
    "   __builtin__.__import__ = tlpimporthook\n"
#endif
     ;

    PyRun_SimpleString(tlpImportHook.c_str());

    // Try to load plugins when importing the module from the Python shell
    if (tlp::TulipPluginsPath.empty()) {
        tlp::initTulipLib();
    }
    tlp::loadPlugins();

#line 2619 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipcmodule.cpp"
    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_tulip, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_tulip), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule(SIP_MODULE_NAME);
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>(SIP_MODULE_NAME));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI_tulip = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, SIP_MODULE_NAME "._C_API"));
#else
    sipAPI_tulip = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI_tulip == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_tulip,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_tulip,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    /* Get the APIs of the modules that this one is dependent on. */
    sipModuleAPI_tulip_stl = sipModuleAPI_tulip.em_imports[0].im_module;

    SIP_MODULE_RETURN(sipModule);
}
