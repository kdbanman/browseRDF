/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:10 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PlanarityTest.sip"
#include <tulip/PlanarityTest.h>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPlanarityTest.cpp"

#line 105 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
#include <list>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPlanarityTest.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 34 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPlanarityTest.cpp"
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 51 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPlanarityTest.cpp"


PyDoc_STRVAR(doc_tlp_PlanarityTest_isPlanar, "tlp.PlanarityTest.isPlanar(graph)\n"
    "\n"
    "Returns :const:`True` if the graph is planar (i.e. the graph can be drawn in such a way that no edges cross each other),\n"
    ":const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to perform the planarity test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_PlanarityTest_isPlanar(PyObject *, PyObject *);}
static PyObject *meth_tlp_PlanarityTest_isPlanar(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::PlanarityTest::isPlanar(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PlanarityTest, sipName_isPlanar, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_PlanarityTest_isPlanarEmbedding, "tlp.PlanarityTest.isPlanarEmbedding(graph)\n"
    "\n"
    "Returns :const:`True` if the current embedding of the graph is planar, :const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to perform the planar embedding test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_PlanarityTest_isPlanarEmbedding(PyObject *, PyObject *);}
static PyObject *meth_tlp_PlanarityTest_isPlanarEmbedding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::PlanarityTest::isPlanarEmbedding(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PlanarityTest, sipName_isPlanarEmbedding, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_PlanarityTest_planarEmbedding, "tlp.PlanarityTest.planarEmbedding(graph)\n"
    "\n"
    "Changes the order of edges around the nodes in order to make the\n"
    "embedding planar (the graph must be planar for that).\n"
    "Returns :const:`True` if the graph is planar, :const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to compute a planar embedding\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_PlanarityTest_planarEmbedding(PyObject *, PyObject *);}
static PyObject *meth_tlp_PlanarityTest_planarEmbedding(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::PlanarityTest::planarEmbedding(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PlanarityTest, sipName_planarEmbedding, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_PlanarityTest_getObstructionsEdges, "tlp.PlanarityTest.getObstructionsEdges(graph)\n"
    "\n"
    "Returns a list of edges that prevents to make the graph planar\n"
    "(ie. part of the minor of K3,3 or K5).\n"
    "\n"
    ":param graph: the graph on which to compute the obstruction edges\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: list of :class:`tlp.edge`");

extern "C" {static PyObject *meth_tlp_PlanarityTest_getObstructionsEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_PlanarityTest_getObstructionsEdges(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            std::list<tlp::edge> *sipRes;

            sipRes = new std::list<tlp::edge>(tlp::PlanarityTest::getObstructionsEdges(a0));

            return sipConvertFromNewType(sipRes,sipType_std_list_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PlanarityTest, sipName_getObstructionsEdges, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_PlanarityTest(void *, const sipTypeDef *);}
static void *cast_tlp_PlanarityTest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_PlanarityTest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_PlanarityTest(void *, int);}
static void release_tlp_PlanarityTest(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::PlanarityTest *>(sipCppV);
}


extern "C" {static void dealloc_tlp_PlanarityTest(sipSimpleWrapper *);}
static void dealloc_tlp_PlanarityTest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_PlanarityTest(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_PlanarityTest[] = {
    {SIP_MLNAME_CAST(sipName_getObstructionsEdges), meth_tlp_PlanarityTest_getObstructionsEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_PlanarityTest_getObstructionsEdges)},
    {SIP_MLNAME_CAST(sipName_isPlanar), meth_tlp_PlanarityTest_isPlanar, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_PlanarityTest_isPlanar)},
    {SIP_MLNAME_CAST(sipName_isPlanarEmbedding), meth_tlp_PlanarityTest_isPlanarEmbedding, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_PlanarityTest_isPlanarEmbedding)},
    {SIP_MLNAME_CAST(sipName_planarEmbedding), meth_tlp_PlanarityTest_planarEmbedding, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_PlanarityTest_planarEmbedding)}
};


sipClassTypeDef sipTypeDef_tulip_tlp_PlanarityTest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__PlanarityTest,
        {0}
    },
    {
        sipNameNr_PlanarityTest,
        {21, 255, 0},
        4, methods_tlp_PlanarityTest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_PlanarityTest,
    0,
    0,
    0,
    release_tlp_PlanarityTest,
    cast_tlp_PlanarityTest,
    0,
    0,
    0
};
