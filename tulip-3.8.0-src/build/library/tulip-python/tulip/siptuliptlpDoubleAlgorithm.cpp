/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:11 2013
 */

#include "sipAPItulip.h"

#line 37 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/DoubleAlgorithm.sip"
#include <tulip/DoubleAlgorithm.h>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"

#line 32 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/DoubleProperty.sip"
#include <tulip/DoubleProperty.h>
#line 16 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginContext.sip"
#include <tulip/PluginContext.h>
#line 19 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 23 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"
#line 105 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
#include <list>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 39 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpDoubleAlgorithm.cpp"


class siptlp_DoubleAlgorithm : public tlp::DoubleAlgorithm
{
public:
    siptlp_DoubleAlgorithm(const tlp::AlgorithmContext&);
    siptlp_DoubleAlgorithm(const tlp::DoubleAlgorithm&);
    virtual ~siptlp_DoubleAlgorithm();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool run();
    bool check(std::string&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_DoubleAlgorithm(const siptlp_DoubleAlgorithm &);
    siptlp_DoubleAlgorithm &operator = (const siptlp_DoubleAlgorithm &);

    char sipPyMethods[2];
};

siptlp_DoubleAlgorithm::siptlp_DoubleAlgorithm(const tlp::AlgorithmContext& a0): tlp::DoubleAlgorithm(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_DoubleAlgorithm::siptlp_DoubleAlgorithm(const tlp::DoubleAlgorithm& a0): tlp::DoubleAlgorithm(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_DoubleAlgorithm::~siptlp_DoubleAlgorithm()
{
    sipCommonDtor(sipPySelf);
}

bool siptlp_DoubleAlgorithm::run()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_DoubleAlgorithm,sipName_run);

    if (!sipMeth)
        return 0;

    extern bool sipVH_tulip_17(sip_gilstate_t,PyObject *);

    return sipVH_tulip_17(sipGILState,sipMeth);
}

bool siptlp_DoubleAlgorithm::check(std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_check);

    if (!sipMeth)
        return tlp::Algorithm::check(a0);

    extern bool sipVH_tulip_78(sip_gilstate_t,PyObject *,std::string&);

    return sipVH_tulip_78(sipGILState,sipMeth,a0);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_DoubleAlgorithm(void *, const sipTypeDef *);}
static void *cast_tlp_DoubleAlgorithm(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_DoubleAlgorithm)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_Algorithm)->ctd_cast((tlp::Algorithm *)(tlp::DoubleAlgorithm *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_DoubleAlgorithm(void *, int);}
static void release_tlp_DoubleAlgorithm(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_DoubleAlgorithm *>(sipCppV);
    else
        delete reinterpret_cast<tlp::DoubleAlgorithm *>(sipCppV);
}


extern "C" {static void dealloc_tlp_DoubleAlgorithm(sipSimpleWrapper *);}
static void dealloc_tlp_DoubleAlgorithm(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_DoubleAlgorithm *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_DoubleAlgorithm(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_DoubleAlgorithm(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_DoubleAlgorithm(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_DoubleAlgorithm *sipCpp = 0;

    {
        const tlp::AlgorithmContext * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_AlgorithmContext, &a0))
        {
            sipCpp = new siptlp_DoubleAlgorithm(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::DoubleAlgorithm * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_DoubleAlgorithm, &a0))
        {
            sipCpp = new siptlp_DoubleAlgorithm(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_DoubleAlgorithm[] = {{23, 255, 1}};


extern "C" {static PyObject *varget_tlp_DoubleAlgorithm_doubleResult(void *, PyObject *);}
static PyObject *varget_tlp_DoubleAlgorithm_doubleResult(void *sipSelf, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::DoubleAlgorithm *sipCpp = reinterpret_cast<tlp::DoubleAlgorithm *>(sipSelf);

    sipVal = sipCpp->doubleResult;

    return sipConvertFromType(sipVal,sipType_tlp_DoubleProperty, NULL);
}


extern "C" {static int varset_tlp_DoubleAlgorithm_doubleResult(void *, PyObject *, PyObject *);}
static int varset_tlp_DoubleAlgorithm_doubleResult(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::DoubleAlgorithm *sipCpp = reinterpret_cast<tlp::DoubleAlgorithm *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::DoubleProperty *>(sipForceConvertToType(sipPy,sipType_tlp_DoubleProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->doubleResult = sipVal;

    return 0;
}

sipVariableDef variables_tlp_DoubleAlgorithm[] = {
    {InstanceVariable, sipName_doubleResult, (PyMethodDef *)varget_tlp_DoubleAlgorithm_doubleResult, (PyMethodDef *)varset_tlp_DoubleAlgorithm_doubleResult, NULL, NULL},
};


sipClassTypeDef sipTypeDef_tulip_tlp_DoubleAlgorithm = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__DoubleAlgorithm,
        {0}
    },
    {
        sipNameNr_DoubleAlgorithm,
        {21, 255, 0},
        0, 0,
        0, 0,
        1, variables_tlp_DoubleAlgorithm,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_tlp_DoubleAlgorithm,
    0,
    init_tlp_DoubleAlgorithm,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_DoubleAlgorithm,
    0,
    0,
    0,
    release_tlp_DoubleAlgorithm,
    cast_tlp_DoubleAlgorithm,
    0,
    0,
    0
};
