/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/TriconnectedTest.sip"
#include <tulip/TriconnectedTest.h>
#line 26 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpTriconnectedTest.cpp"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 44 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpTriconnectedTest.cpp"


PyDoc_STRVAR(doc_tlp_TriconnectedTest_isTriconnected, "tlp.TriconnectedTest.isTriconnected(graph)\n"
    "\n"
    "Returns :const:`True` if the graph is triconnected (i.e. a connected graph such that deleting any two nodes (and incident edges)\n"
    "results in a graph that is still connected), :const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to perform the triconnected test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_TriconnectedTest_isTriconnected(PyObject *, PyObject *);}
static PyObject *meth_tlp_TriconnectedTest_isTriconnected(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::TriconnectedTest::isTriconnected(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TriconnectedTest, sipName_isTriconnected, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_TriconnectedTest(void *, const sipTypeDef *);}
static void *cast_tlp_TriconnectedTest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_TriconnectedTest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_TriconnectedTest(void *, int);}
static void release_tlp_TriconnectedTest(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::TriconnectedTest *>(sipCppV);
}


extern "C" {static void dealloc_tlp_TriconnectedTest(sipSimpleWrapper *);}
static void dealloc_tlp_TriconnectedTest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_TriconnectedTest(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_TriconnectedTest[] = {
    {SIP_MLNAME_CAST(sipName_isTriconnected), meth_tlp_TriconnectedTest_isTriconnected, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_TriconnectedTest_isTriconnected)}
};


sipClassTypeDef sipTypeDef_tulip_tlp_TriconnectedTest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__TriconnectedTest,
        {0}
    },
    {
        sipNameNr_TriconnectedTest,
        {21, 255, 0},
        1, methods_tlp_TriconnectedTest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_TriconnectedTest,
    0,
    0,
    0,
    release_tlp_TriconnectedTest,
    cast_tlp_TriconnectedTest,
    0,
    0,
    0
};
