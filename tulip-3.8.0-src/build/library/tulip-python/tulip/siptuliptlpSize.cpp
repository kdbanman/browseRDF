/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Size.sip"
#include <tulip/Size.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSize.cpp"



PyDoc_STRVAR(doc_tlp_Size_set, "tlp.Size.set(width, height, depth)\n"
    "\n"
    "Sets the three component of the size.\n"
    "\n"
    ":param width: a value\n"
    ":type width: float\n"
    ":param height: a value\n"
    ":type height: float\n"
    ":param depth: a value\n"
    ":type depth: float\n"
    "tlp.Size.set(size)\n"
    "\n"
    "Sets the three component of the size from another one.\n"
    "\n"
    ":param size: a size\n"
    ":type size: :class:`tlp.Size`");

extern "C" {static PyObject *meth_tlp_Size_set(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_set(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0 = 0;
        float a1 = 0;
        float a2 = 0;
        tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|fff", &sipSelf, sipType_tlp_Size, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->set(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Size * a0;
        tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Size, &sipCpp, sipType_tlp_Size, &a0))
        {
            sipCpp->set(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_set, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_setW, "tlp.Size.setW(width)\n"
    "\n"
    "Sets the width component of the size.\n"
    "\n"
    ":param width: a value\n"
    ":type width: float");

extern "C" {static PyObject *meth_tlp_Size_setW(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_setW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Size, &sipCpp, &a0))
        {
            sipCpp->setW(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_setW, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_setH, "tlp.Size.setH(height)\n"
    "\n"
    "Sets the height component of the size.\n"
    "\n"
    ":param height: a value\n"
    ":type height: float");

extern "C" {static PyObject *meth_tlp_Size_setH(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_setH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Size, &sipCpp, &a0))
        {
            sipCpp->setH(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_setH, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_setD, "tlp.Size.setD(depth)\n"
    "\n"
    "Sets the depth component of the size.\n"
    "\n"
    ":param depth: a value\n"
    ":type depth: float");

extern "C" {static PyObject *meth_tlp_Size_setD(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_setD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Size, &sipCpp, &a0))
        {
            sipCpp->setD(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_setD, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_getW, "tlp.Size.getW()\n"
    "\n"
    "Returns the width component of the size.\n"
    "\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Size_getW(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_getW(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Size, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getW();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_getW, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_getH, "tlp.Size.getH()\n"
    "\n"
    "Returns the height component of the size.\n"
    "\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Size_getH(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_getH(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Size, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getH();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_getH, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_getD, "tlp.Size.getD()\n"
    "\n"
    "Returns the depth component of the size.\n"
    "\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Size_getD(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_getD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Size, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getD();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_getD, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Size_get, "tlp.Size.get()\n"
    "\n"
    "Returns the component of the size as a tuple.\n"
    "\n"
    ":rtype: (float, float, float)");

extern "C" {static PyObject *meth_tlp_Size_get(PyObject *, PyObject *);}
static PyObject *meth_tlp_Size_get(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        float a2;
        const tlp::Size *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Size, &sipCpp))
        {
            sipCpp->get(a0,a1,a2);

            return sipBuildResult(0,"(fff)",a0,a1,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Size, sipName_get, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_Size___xor__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Size___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Size * a0;
        const tlp::Size * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Size, &a0, sipType_tlp_Size, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 ^ *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,xor_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Size___div__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Size___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Size * a0;
        const tlp::Size * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Size, &a0, sipType_tlp_Size, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    {
        tlp::Size * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Size, &a0, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Size___sub__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Size___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Size * a0;
        const tlp::Size * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Size, &a0, sipType_tlp_Size, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    {
        tlp::Size * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Size, &a0, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Size___add__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Size___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Size * a0;
        const tlp::Size * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Size, &a0, sipType_tlp_Size, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    {
        tlp::Size * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Size, &a0, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Size___mul__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Size___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Size * a0;
        const tlp::Size * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Size, &a0, sipType_tlp_Size, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    {
        tlp::Size * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Size, &a0, &a1))
        {
            tlp::Size *sipRes;

            sipRes = new tlp::Size((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Size,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,mul_slot,NULL,sipArg0,sipArg1);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_Size(void *, const sipTypeDef *);}
static void *cast_tlp_Size(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_Size)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_Vec3f)->ctd_cast((tlp::Vec3f *)(tlp::Size *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_Size(void *, int);}
static void release_tlp_Size(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::Size *>(sipCppV);
}


extern "C" {static void assign_tlp_Size(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_Size(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::Size *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::Size *>(sipSrc);
}


extern "C" {static void *array_tlp_Size(SIP_SSIZE_T);}
static void *array_tlp_Size(SIP_SSIZE_T sipNrElem)
{
    return new tlp::Size[sipNrElem];
}


extern "C" {static void *copy_tlp_Size(const void *, SIP_SSIZE_T);}
static void *copy_tlp_Size(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::Size(reinterpret_cast<const tlp::Size *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_Size(sipSimpleWrapper *);}
static void dealloc_tlp_Size(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_Size(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_Size(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_Size(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::Size *sipCpp = 0;

    {
        float a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "f", &a0))
        {
#line 45 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Size.sip"
		sipCpp = new tlp::Size();
		(*sipCpp)[0] = a0;
		(*sipCpp)[1] = a0;
		(*sipCpp)[2] = a0;
#line 560 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSize.cpp"

            return sipCpp;
        }
    }

    {
        float a0 = 0;
        float a1 = 0;
        float a2 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|fff", &a0, &a1, &a2))
        {
            sipCpp = new tlp::Size(a0,a1,a2);

            return sipCpp;
        }
    }

    {
        const tlp::Size * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Size, &a0))
        {
            sipCpp = new tlp::Size(*a0);

            return sipCpp;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp = new tlp::Size(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_Size[] = {{98, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_Size[] = {
    {(void *)slot_tlp_Size___xor__, xor_slot},
    {(void *)slot_tlp_Size___div__, div_slot},
    {(void *)slot_tlp_Size___sub__, sub_slot},
    {(void *)slot_tlp_Size___add__, add_slot},
    {(void *)slot_tlp_Size___mul__, mul_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_Size[] = {
    {SIP_MLNAME_CAST(sipName_get), meth_tlp_Size_get, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_get)},
    {SIP_MLNAME_CAST(sipName_getD), meth_tlp_Size_getD, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_getD)},
    {SIP_MLNAME_CAST(sipName_getH), meth_tlp_Size_getH, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_getH)},
    {SIP_MLNAME_CAST(sipName_getW), meth_tlp_Size_getW, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_getW)},
    {SIP_MLNAME_CAST(sipName_set), meth_tlp_Size_set, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_set)},
    {SIP_MLNAME_CAST(sipName_setD), meth_tlp_Size_setD, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_setD)},
    {SIP_MLNAME_CAST(sipName_setH), meth_tlp_Size_setH, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_setH)},
    {SIP_MLNAME_CAST(sipName_setW), meth_tlp_Size_setW, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Size_setW)}
};

PyDoc_STRVAR(doc_tlp_Size, "Bases: :class:`tlp.Vec3f`\n"
    "\n"
    "This class represents a size in a third dimensional space (width, height, depth). Constructors and operators \n"
    "are similar to those defined in its base class :class:`tlp.Vec3f`.");


sipClassTypeDef sipTypeDef_tulip_tlp_Size = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__Size,
        {0}
    },
    {
        sipNameNr_Size,
        {21, 255, 0},
        8, methods_tlp_Size,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_Size,
    -1,
    -1,
    supers_tlp_Size,
    slots_tlp_Size,
    init_tlp_Size,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_Size,
    assign_tlp_Size,
    array_tlp_Size,
    copy_tlp_Size,
    release_tlp_Size,
    cast_tlp_Size,
    0,
    0,
    0
};
