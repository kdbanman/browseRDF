/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
#include <tulip/GraphProperty.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 34 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
#include <tulip/Node.h>
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 41 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/set.sip"
#include <set>
#line 44 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 24 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ObservableProperty.sip"
#include <tulip/ObservableProperty.h>
#line 47 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 50 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 53 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"


class siptlp_GraphProperty : public tlp::GraphProperty
{
public:
    siptlp_GraphProperty(tlp::Graph *,std::string);
    virtual ~siptlp_GraphProperty();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    tlp::IteratorNode * getNonDefaultValuatedNodes(const tlp::Graph *) const;
    tlp::IteratorEdge * getNonDefaultValuatedEdges(const tlp::Graph *) const;
    std::string getTypename() const;
    std::string getNodeDefaultStringValue() const;
    std::string getEdgeDefaultStringValue() const;
    bool setAllNodeStringValue(const std::string&);
    bool setAllEdgeStringValue(const std::string&);
    void erase(const tlp::node);
    void erase(const tlp::edge);
    std::string getNodeStringValue(const tlp::node);
    std::string getEdgeStringValue(const tlp::edge);
    bool setNodeStringValue(const tlp::node,const std::string&);
    bool setEdgeStringValue(const tlp::edge,const std::string&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GraphProperty(const siptlp_GraphProperty &);
    siptlp_GraphProperty &operator = (const siptlp_GraphProperty &);

    char sipPyMethods[13];
};

siptlp_GraphProperty::siptlp_GraphProperty(tlp::Graph *a0,std::string a1): tlp::GraphProperty(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GraphProperty::~siptlp_GraphProperty()
{
    sipCommonDtor(sipPySelf);
}

tlp::IteratorNode * siptlp_GraphProperty::getNonDefaultValuatedNodes(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_GraphProperty,sipName_getNonDefaultValuatedNodes);

    if (!sipMeth)
        return 0;

    extern tlp::IteratorNode * sipVH_tulip_24(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_24(sipGILState,sipMeth,a0);
}

tlp::IteratorEdge * siptlp_GraphProperty::getNonDefaultValuatedEdges(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_GraphProperty,sipName_getNonDefaultValuatedEdges);

    if (!sipMeth)
        return 0;

    extern tlp::IteratorEdge * sipVH_tulip_23(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_23(sipGILState,sipMeth,a0);
}

std::string siptlp_GraphProperty::getTypename() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_GraphProperty,sipName_getTypename);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_GraphProperty::getNodeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_GraphProperty,sipName_getNodeDefaultStringValue);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_GraphProperty::getEdgeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,sipName_GraphProperty,sipName_getEdgeDefaultStringValue);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

bool siptlp_GraphProperty::setAllNodeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_GraphProperty,sipName_setAllNodeStringValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

bool siptlp_GraphProperty::setAllEdgeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_GraphProperty,sipName_setAllEdgeStringValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

void siptlp_GraphProperty::erase(const tlp::node a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_GraphProperty,sipName_erase);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_31(sip_gilstate_t,PyObject *,const tlp::node);

    sipVH_tulip_31(sipGILState,sipMeth,a0);
}

void siptlp_GraphProperty::erase(const tlp::edge a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_GraphProperty,sipName_erase);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_30(sip_gilstate_t,PyObject *,const tlp::edge);

    sipVH_tulip_30(sipGILState,sipMeth,a0);
}

std::string siptlp_GraphProperty::getNodeStringValue(const tlp::node a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_GraphProperty,sipName_getNodeStringValue);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_29(sip_gilstate_t,PyObject *,const tlp::node);

    return sipVH_tulip_29(sipGILState,sipMeth,a0);
}

std::string siptlp_GraphProperty::getEdgeStringValue(const tlp::edge a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_GraphProperty,sipName_getEdgeStringValue);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_28(sip_gilstate_t,PyObject *,const tlp::edge);

    return sipVH_tulip_28(sipGILState,sipMeth,a0);
}

bool siptlp_GraphProperty::setNodeStringValue(const tlp::node a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_GraphProperty,sipName_setNodeStringValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH_tulip_27(sip_gilstate_t,PyObject *,const tlp::node,const std::string&);

    return sipVH_tulip_27(sipGILState,sipMeth,a0,a1);
}

bool siptlp_GraphProperty::setEdgeStringValue(const tlp::edge a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_GraphProperty,sipName_setEdgeStringValue);

    if (!sipMeth)
        return 0;

    extern bool sipVH_tulip_26(sip_gilstate_t,PyObject *,const tlp::edge,const std::string&);

    return sipVH_tulip_26(sipGILState,sipMeth,a0,a1);
}


extern "C" {static PyObject *meth_tlp_GraphProperty_getNodeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_getNodeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GraphProperty, &sipCpp))
        {
            tlp::Graph *sipRes;

            sipRes = sipCpp->getNodeDefaultValue();

            return sipConvertFromType(sipRes,sipType_tlp_Graph,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_getNodeDefaultValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GraphProperty_getEdgeDefaultValue, "tlp.GraphProperty.getEdgeDefaultValue() -> list of tlp.edge");

extern "C" {static PyObject *meth_tlp_GraphProperty_getEdgeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_getEdgeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GraphProperty, &sipCpp))
        {
            std::set<tlp::edge> *sipRes;

            sipRes = new std::set<tlp::edge>(sipCpp->getEdgeDefaultValue());

            return sipConvertFromNewType(sipRes,sipType_std_set_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_getEdgeDefaultValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_GraphProperty_getNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_getNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            tlp::Graph *sipRes = 0;
            int sipIsErr = 0;

#line 49 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = sipCpp->getNodeValue(*a0);
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 369 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_tlp_Graph,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_getNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GraphProperty_getEdgeValue, "tlp.GraphProperty.getEdgeValue(tlp.edge) -> list of tlp.edge");

extern "C" {static PyObject *meth_tlp_GraphProperty_getEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_getEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            std::set<tlp::edge> *sipRes = 0;
            int sipIsErr = 0;

#line 62 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = new std::set<tlp::edge>(sipCpp->getEdgeValue(*a0));
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 407 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_set_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_getEdgeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_GraphProperty_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        tlp::Graph * a1;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 71 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setNodeValue(*a0, a1);
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 443 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_setNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GraphProperty_setEdgeValue, "tlp.GraphProperty.setEdgeValue(tlp.edge, list of tlp.edge)");

extern "C" {static PyObject *meth_tlp_GraphProperty_setEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_setEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        const std::set<tlp::edge> * a1;
        int a1State = 0;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_std_set_0100tlp_edge,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 85 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setEdgeValue(*a0, *a1);
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 483 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
            sipReleaseType(const_cast<std::set<tlp::edge> *>(a1),sipType_std_set_0100tlp_edge,a1State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_setEdgeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_GraphProperty_setAllNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_setAllNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            sipCpp->setAllNodeValue(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_setAllNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GraphProperty_setAllEdgeValue, "tlp.GraphProperty.setAllEdgeValue(list of tlp.edge)");

extern "C" {static PyObject *meth_tlp_GraphProperty_setAllEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_GraphProperty_setAllEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::set<tlp::edge> * a0;
        int a0State = 0;
        tlp::GraphProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GraphProperty, &sipCpp, sipType_std_set_0100tlp_edge,&a0, &a0State))
        {
            sipCpp->setAllEdgeValue(*a0);
            sipReleaseType(const_cast<std::set<tlp::edge> *>(a0),sipType_std_set_0100tlp_edge,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName_setAllEdgeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_GraphProperty___repr__(PyObject *);}
static PyObject *slot_tlp_GraphProperty___repr__(PyObject *sipSelf)
{
    tlp::GraphProperty *sipCpp = reinterpret_cast<tlp::GraphProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_GraphProperty));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 138 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	std::ostringstream oss;
	oss << "<graph property " << sipCpp->getName() << ">";
	std::string s = oss.str();
#if PY_MAJOR_VERSION >= 3
    sipRes = PyUnicode_FromString(s.c_str());
#else
	sipRes = PyString_FromString(s.c_str());
#endif
#line 577 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_tlp_GraphProperty___setitem__(PyObject *,PyObject *);}
static int slot_tlp_GraphProperty___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::GraphProperty *sipCpp = reinterpret_cast<tlp::GraphProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_GraphProperty));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        tlp::Graph * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J8", sipType_tlp_node, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 111 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setNodeValue(*a0, a1);
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 611 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        const tlp::edge * a0;
        const std::set<tlp::edge> * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_tlp_edge, &a0, sipType_std_set_0100tlp_edge,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 129 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipCpp->setEdgeValue(*a0, *a1);
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 635 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"
            sipReleaseType(const_cast<std::set<tlp::edge> *>(a1),sipType_std_set_0100tlp_edge,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_GraphProperty___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_GraphProperty___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::GraphProperty *sipCpp = reinterpret_cast<tlp::GraphProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_GraphProperty));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_node, &a0))
        {
            tlp::Graph *sipRes = 0;
            int sipIsErr = 0;

#line 102 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = sipCpp->getNodeValue(*a0);
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 676 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_tlp_Graph,NULL);
        }
    }

    {
        const tlp::edge * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_edge, &a0))
        {
            std::set<tlp::edge> *sipRes = 0;
            int sipIsErr = 0;

#line 120 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/GraphProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = new std::set<tlp::edge>(sipCpp->getEdgeValue(*a0));
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 699 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpGraphProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_set_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GraphProperty, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GraphProperty(void *, const sipTypeDef *);}
static void *cast_tlp_GraphProperty(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GraphProperty)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_PropertyInterface)->ctd_cast((tlp::PropertyInterface *)(tlp::GraphProperty *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GraphProperty(void *, int);}
static void release_tlp_GraphProperty(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GraphProperty *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GraphProperty *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GraphProperty(sipSimpleWrapper *);}
static void dealloc_tlp_GraphProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GraphProperty *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GraphProperty(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GraphProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GraphProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GraphProperty *sipCpp = 0;

    {
        tlp::Graph * a0;
        std::string a1def = "";
        std::string * a1 = &a1def;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8|J1", sipType_tlp_Graph, &a0, sipType_std_string,&a1, &a1State))
        {
            sipCpp = new siptlp_GraphProperty(a0,*a1);
            sipReleaseType(a1,sipType_std_string,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GraphProperty[] = {{85, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_GraphProperty[] = {
    {(void *)slot_tlp_GraphProperty___repr__, repr_slot},
    {(void *)slot_tlp_GraphProperty___setitem__, setitem_slot},
    {(void *)slot_tlp_GraphProperty___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_GraphProperty[] = {
    {SIP_MLNAME_CAST(sipName_getEdgeDefaultValue), meth_tlp_GraphProperty_getEdgeDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GraphProperty_getEdgeDefaultValue)},
    {SIP_MLNAME_CAST(sipName_getEdgeValue), meth_tlp_GraphProperty_getEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GraphProperty_getEdgeValue)},
    {SIP_MLNAME_CAST(sipName_getNodeDefaultValue), meth_tlp_GraphProperty_getNodeDefaultValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeValue), meth_tlp_GraphProperty_getNodeValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllEdgeValue), meth_tlp_GraphProperty_setAllEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GraphProperty_setAllEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setAllNodeValue), meth_tlp_GraphProperty_setAllNodeValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEdgeValue), meth_tlp_GraphProperty_setEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GraphProperty_setEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setNodeValue), meth_tlp_GraphProperty_setNodeValue, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_tulip_tlp_GraphProperty = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_tlp__GraphProperty,
        {0}
    },
    {
        sipNameNr_GraphProperty,
        {21, 255, 0},
        8, methods_tlp_GraphProperty,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_tlp_GraphProperty,
    slots_tlp_GraphProperty,
    init_tlp_GraphProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GraphProperty,
    0,
    0,
    0,
    release_tlp_GraphProperty,
    cast_tlp_GraphProperty,
    0,
    0,
    0
};
