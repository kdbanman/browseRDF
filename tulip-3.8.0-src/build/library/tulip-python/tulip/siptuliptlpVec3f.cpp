/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:11:08 2013
 */

#include "sipAPItulip.h"




PyDoc_STRVAR(doc_tlp_Vec3f_fill, "tlp.Vec3f.fill(val)\n"
    "\n"
    "Set the same value to each component of the vector.\n"
    "\n"
    ":param val: a value\n"
    ":type val: float");

extern "C" {static PyObject *meth_tlp_Vec3f_fill(PyObject *, PyObject *);}
static PyObject *meth_tlp_Vec3f_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Vec3f *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Vec3f, &sipCpp, &a0))
        {
            tlp::Vec3f *sipRes;

            sipRes = &sipCpp->fill(a0);

            return sipConvertFromType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName_fill, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Vec3f_norm, "tlp.Vec3f.norm()\n"
    "\n"
    "Computes and returns the euclidean norm of the vector.\n"
    "\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Vec3f_norm(PyObject *, PyObject *);}
static PyObject *meth_tlp_Vec3f_norm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Vec3f, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->norm();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName_norm, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Vec3f_dist, "tlp.Vec3f.dist(v)\n"
    "\n"
    "Computes and returns the distance between the vector (3d point) and another one.\n"
    "\n"
    ":param v: a vector\n"
    ":type v: :class:`tlp.Vec3f`\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Vec3f_dist(PyObject *, PyObject *);}
static PyObject *meth_tlp_Vec3f_dist(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;
        const tlp::Vec3f *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Vec3f, &sipCpp, sipType_tlp_Vec3f, &a0))
        {
            float sipRes;

            sipRes = sipCpp->dist(*a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName_dist, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Vec3f_dotProduct, "tlp.Vec3f.dotProduct(v)\n"
    "\n"
    "Computes and returns the dot product (scalar product) of the vector with another one\n"
    "\n"
    ":param v: a vector\n"
    ":type v: :class:`tlp.Vec3f`\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_Vec3f_dotProduct(PyObject *, PyObject *);}
static PyObject *meth_tlp_Vec3f_dotProduct(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;
        const tlp::Vec3f *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Vec3f, &sipCpp, sipType_tlp_Vec3f, &a0))
        {
            float sipRes;

            sipRes = sipCpp->dotProduct(*a0);

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName_dotProduct, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_Vec3f___le__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___le__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->tlp::Vec3f::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,le_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___ge__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->tlp::Vec3f::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,ge_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___repr__(PyObject *);}
static PyObject *slot_tlp_Vec3f___repr__(PyObject *sipSelf)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 200 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		std::ostringstream oss;
		oss << *sipCpp;
		std::string s = oss.str();
		s[0] = '[';
		s[s.size() - 1] = ']';
#if PY_MAJOR_VERSION >= 3
        sipRes = PyUnicode_FromString(s.c_str());
#else
        sipRes = PyString_FromString(s.c_str());
#endif
#line 233 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec3f.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_tlp_Vec3f___eq__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec3f::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,eq_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___ne__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec3f::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,ne_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___lt__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec3f::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,lt_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___gt__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec3f::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,gt_slot,sipType_tlp_Vec3f,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec3f___xor__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec3f * a0;
        const tlp::Vec3f * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec3f, &a0, sipType_tlp_Vec3f, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 ^ *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,xor_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec3f___div__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec3f * a0;
        const tlp::Vec3f * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec3f, &a0, sipType_tlp_Vec3f, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    {
        tlp::Vec3f * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Vec3f, &a0, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec3f___sub__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec3f * a0;
        const tlp::Vec3f * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec3f, &a0, sipType_tlp_Vec3f, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    {
        tlp::Vec3f * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Vec3f, &a0, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec3f___add__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec3f * a0;
        const tlp::Vec3f * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec3f, &a0, sipType_tlp_Vec3f, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    {
        tlp::Vec3f * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Vec3f, &a0, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec3f___mul__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec3f * a0;
        const tlp::Vec3f * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec3f, &a0, sipType_tlp_Vec3f, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    {
        tlp::Vec3f * a0;
        float a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9f", sipType_tlp_Vec3f, &a0, &a1))
        {
            tlp::Vec3f *sipRes;

            sipRes = new tlp::Vec3f((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec3f,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec3f___ixor__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec3f)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp->tlp::Vec3f::operator^=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec3f___isub__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec3f)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->tlp::Vec3f::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp->tlp::Vec3f::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec3f___iadd__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec3f)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->tlp::Vec3f::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp->tlp::Vec3f::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec3f___idiv__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec3f)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->tlp::Vec3f::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp->tlp::Vec3f::operator/=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec3f___imul__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec3f)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        float a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1f", &a0))
        {
            sipCpp->tlp::Vec3f::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp->tlp::Vec3f::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_tlp_Vec3f___setitem__(PyObject *,PyObject *);}
static int slot_tlp_Vec3f___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        float a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "if", &a0, &a1))
        {
            int sipIsErr = 0;

#line 126 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
	if (a0 < 3)
		(*sipCpp)[a0] = a1;
	else
		sipIsErr = 1;	
#line 838 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec3f.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_Vec3f___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec3f___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec3f *sipCpp = reinterpret_cast<tlp::Vec3f *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec3f));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1u", &a0))
        {
            float sipRes;

            sipRes = (*sipCpp)[a0];

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec3f, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_Vec3f(void *, const sipTypeDef *);}
static void *cast_tlp_Vec3f(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_Vec3f)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_Vec3f(void *, int);}
static void release_tlp_Vec3f(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::Vec3f *>(sipCppV);
}


extern "C" {static void assign_tlp_Vec3f(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_Vec3f(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::Vec3f *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::Vec3f *>(sipSrc);
}


extern "C" {static void *array_tlp_Vec3f(SIP_SSIZE_T);}
static void *array_tlp_Vec3f(SIP_SSIZE_T sipNrElem)
{
    return new tlp::Vec3f[sipNrElem];
}


extern "C" {static void *copy_tlp_Vec3f(const void *, SIP_SSIZE_T);}
static void *copy_tlp_Vec3f(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::Vec3f(reinterpret_cast<const tlp::Vec3f *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_Vec3f(sipSimpleWrapper *);}
static void dealloc_tlp_Vec3f(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_Vec3f(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_Vec3f(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_Vec3f(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::Vec3f *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::Vec3f();

            return sipCpp;
        }
    }

    {
        float a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "f", &a0))
        {
#line 106 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		sipCpp = new tlp::Vec3f();
		(*sipCpp)[0] = a0;
		(*sipCpp)[1] = a0;
		(*sipCpp)[2] = a0;
#line 958 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec3f.cpp"

            return sipCpp;
        }
    }

    {
        float a0;
        float a1;
        float a2;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "fff", &a0, &a1, &a2))
        {
#line 114 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		sipCpp = new tlp::Vec3f();
		(*sipCpp)[0] = a0;
		(*sipCpp)[1] = a1;
		(*sipCpp)[2] = a2;
#line 976 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec3f.cpp"

            return sipCpp;
        }
    }

    {
        const tlp::Vec3f * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Vec3f, &a0))
        {
            sipCpp = new tlp::Vec3f(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_Vec3f[] = {
    {(void *)slot_tlp_Vec3f___le__, le_slot},
    {(void *)slot_tlp_Vec3f___ge__, ge_slot},
    {(void *)slot_tlp_Vec3f___repr__, repr_slot},
    {(void *)slot_tlp_Vec3f___eq__, eq_slot},
    {(void *)slot_tlp_Vec3f___ne__, ne_slot},
    {(void *)slot_tlp_Vec3f___lt__, lt_slot},
    {(void *)slot_tlp_Vec3f___gt__, gt_slot},
    {(void *)slot_tlp_Vec3f___xor__, xor_slot},
    {(void *)slot_tlp_Vec3f___div__, div_slot},
    {(void *)slot_tlp_Vec3f___sub__, sub_slot},
    {(void *)slot_tlp_Vec3f___add__, add_slot},
    {(void *)slot_tlp_Vec3f___mul__, mul_slot},
    {(void *)slot_tlp_Vec3f___ixor__, ixor_slot},
    {(void *)slot_tlp_Vec3f___isub__, isub_slot},
    {(void *)slot_tlp_Vec3f___iadd__, iadd_slot},
    {(void *)slot_tlp_Vec3f___idiv__, idiv_slot},
    {(void *)slot_tlp_Vec3f___imul__, imul_slot},
    {(void *)slot_tlp_Vec3f___setitem__, setitem_slot},
    {(void *)slot_tlp_Vec3f___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_Vec3f[] = {
    {SIP_MLNAME_CAST(sipName_dist), meth_tlp_Vec3f_dist, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Vec3f_dist)},
    {SIP_MLNAME_CAST(sipName_dotProduct), meth_tlp_Vec3f_dotProduct, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Vec3f_dotProduct)},
    {SIP_MLNAME_CAST(sipName_fill), meth_tlp_Vec3f_fill, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Vec3f_fill)},
    {SIP_MLNAME_CAST(sipName_norm), meth_tlp_Vec3f_norm, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Vec3f_norm)}
};

PyDoc_STRVAR(doc_tlp_Vec3f, "This class represents a vector with 3 floating point components.\n"
    "It can be instantiated as illustrated in the code below: ::\n"
    "\n"
    "	# Initializes a Vec3f with all components set to 0.0\n"
    "	v = tlp.Vec3f()\n"
    "	\n"
    "	# Initializes a Vec3f with all components set to 1.0\n"
    "	v2 = tlp.Vec3f(1.0)\n"
    "	\n"
    "	# Initializes a Vec3f by specifying the value of each component\n"
    "	v3 = tlp.Vec3f(1.0, 2.0, 3.0) \n"
    "	\n"
    "	# Initializes a Vec3f by copy\n"
    "	v4 = tlp.Vec3f(v3)\n"
    "\n"
    "Numerous mathematical operations are available to work with vectors. The sample code below illustrates them: ::\n"
    "\n"
    "	# Instantiate two vectors\n"
    "	v = tlp.Vec3f(4.5, 1.0, 3.0)\n"
    "	v2 = tlp.Vec3f(1.5, 2.0, 6.0)\n"
    "	\n"
    "	# Add two vectors, operator += is also available\n"
    "	v3 = v + v2\n"
    "	\n"
    "	# Add a value to all components of a vector, operator += is also available\n"
    "	v4 = v + 2.0\n"
    "	\n"
    "	# Subtract two vectors, operator -= is also available\n"
    "	v5 = v - v2\n"
    "	\n"
    "	# Subtract a value to all components of a vector, operator -= is also available\n"
    "	v6 = v - 3.0\n"
    "	\n"
    "	# Multiply two vectors (not vector product), operator *= is also available\n"
    "	v7 = v * v2\n"
    "	\n"
    "	# Multiply each component of a vector by a value, operator *= is also available\n"
    "	v8 = v * 2.0\n"
    "	\n"
    "	# Divide two vectors, operator /= is also available\n"
    "	v9 = v / v2\n"
    "	\n"
    "	# Divide each component of a vector by a value, operator /= is also available\n"
    "	v10 = v / 2.0\n"
    "	\n"
    "	# Perform a vector product, operator ^= is also available\n"
    "	v11 = v ^ v2\n"
    "\n"
    "Each component of the vector can be read / written through the [] operator: ::\n"
    "\n"
    "	v = tlp.Vec3f(1.0, 2.0, 3.0)\n"
    "	\n"
    "	# read first component\n"
    "	a = v[0]\n"
    "	\n"
    "	# write third component\n"
    "	v[2] = 4.0\n"
    "	\n"
    "Operators for vectors equality (==), vectors difference (!=) and vectors comparison (<, >) are also available.\n"
    "	");


sipClassTypeDef sipTypeDef_tulip_tlp_Vec3f = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__Vec3f,
        {0}
    },
    {
        sipNameNr_Vec3f,
        {21, 255, 0},
        4, methods_tlp_Vec3f,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_Vec3f,
    -1,
    -1,
    0,
    slots_tlp_Vec3f,
    init_tlp_Vec3f,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_Vec3f,
    assign_tlp_Vec3f,
    array_tlp_Vec3f,
    copy_tlp_Vec3f,
    release_tlp_Vec3f,
    cast_tlp_Vec3f,
    0,
    0,
    0
};
