/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:11:08 2013
 */

#include "sipAPItulip.h"

#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 26 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpIteratorString.cpp"

#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpIteratorString.cpp"


extern "C" {static PyObject *meth_tlp_IteratorString_next(PyObject *, PyObject *);}
static PyObject *meth_tlp_IteratorString_next(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IteratorString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_IteratorString, &sipCpp))
        {
            std::string *sipRes = 0;
            int sipIsErr = 0;

#line 39 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
    if (sipCpp->hasNext()) {
// if iterator is on base types (int, double, pointers, ...),
// ITERATOR_NO_COPY has to be defined when compiling the generated bindings file    
#ifdef ITERATOR_NO_COPY
    	sipRes = sipCpp->next();
#else
    	sipRes = new std::string(sipCpp->next());
#endif
    } else {
        PyErr_SetString(PyExc_Exception, "tlp::IteratorString : next() has been called but there is no more elements to iterate on.");
        sipIsErr = -1;
    }
#line 60 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpIteratorString.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IteratorString, sipName_next, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_IteratorString_hasNext(PyObject *, PyObject *);}
static PyObject *meth_tlp_IteratorString_hasNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IteratorString *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_IteratorString, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->hasNext();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IteratorString, sipName_hasNext, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_IteratorString___next__(PyObject *);}
static PyObject *slot_tlp_IteratorString___next__(PyObject *sipSelf)
{
    tlp::IteratorString *sipCpp = reinterpret_cast<tlp::IteratorString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_IteratorString));

    if (!sipCpp)
        return 0;


    {
        {
            std::string *sipRes = 0;

#line 62 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
    if (sipCpp->hasNext()) {
// if iterator is on base types (int, double, pointers, ...),
// ITERATOR_NO_COPY has to be defined when compiling the generated bindings file    
#ifdef ITERATOR_NO_COPY
    	sipRes = sipCpp->next();
#else
    	sipRes = new std::string(sipCpp->next());
#endif
    } else {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
#line 127 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpIteratorString.cpp"

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_tlp_IteratorString___iter__(PyObject *);}
static PyObject *slot_tlp_IteratorString___iter__(PyObject *sipSelf)
{
    tlp::IteratorString *sipCpp = reinterpret_cast<tlp::IteratorString *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_IteratorString));

    if (!sipCpp)
        return 0;


    {
        {
            tlp::IteratorString *sipRes = 0;

#line 57 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
    sipRes = sipCpp;
#line 152 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpIteratorString.cpp"

            return sipConvertFromType(sipRes,sipType_tlp_IteratorString,NULL);
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_IteratorString(void *, const sipTypeDef *);}
static void *cast_tlp_IteratorString(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_IteratorString)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_IteratorString(void *, int);}
static void release_tlp_IteratorString(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::IteratorString *>(sipCppV);
}


extern "C" {static void dealloc_tlp_IteratorString(sipSimpleWrapper *);}
static void dealloc_tlp_IteratorString(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_IteratorString(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_IteratorString[] = {
    {(void *)slot_tlp_IteratorString___next__, next_slot},
    {(void *)slot_tlp_IteratorString___iter__, iter_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_IteratorString[] = {
    {SIP_MLNAME_CAST(sipName_hasNext), meth_tlp_IteratorString_hasNext, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_next), meth_tlp_IteratorString_next, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_tulip_tlp_IteratorString = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__IteratorString,
        {0}
    },
    {
        sipNameNr_IteratorString,
        {21, 255, 0},
        2, methods_tlp_IteratorString,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    slots_tlp_IteratorString,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_IteratorString,
    0,
    0,
    0,
    release_tlp_IteratorString,
    cast_tlp_IteratorString,
    0,
    0,
    0
};
