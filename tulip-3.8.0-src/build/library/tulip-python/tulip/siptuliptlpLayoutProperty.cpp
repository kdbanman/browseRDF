/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
#include <tulip/LayoutProperty.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 34 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
#include <tulip/Node.h>
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 191 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 40 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 44 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 47 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 50 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 33 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Coord.sip"
#include <tulip/Coord.h>
#line 53 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 56 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
#line 24 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/ObservableProperty.sip"
#include <tulip/ObservableProperty.h>
#line 59 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"


class siptlp_LayoutProperty : public tlp::LayoutProperty
{
public:
    siptlp_LayoutProperty(tlp::Graph *,std::string);
    virtual ~siptlp_LayoutProperty();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void erase(const tlp::node);
    void erase(const tlp::edge);
    std::string getTypename() const;
    std::string getNodeDefaultStringValue() const;
    std::string getEdgeDefaultStringValue() const;
    std::string getNodeStringValue(const tlp::node) const;
    std::string getEdgeStringValue(const tlp::edge) const;
    bool setNodeStringValue(const tlp::node,const std::string&);
    bool setEdgeStringValue(const tlp::edge,const std::string&);
    bool setAllNodeStringValue(const std::string&);
    bool setAllEdgeStringValue(const std::string&);
    tlp::IteratorNode * getNonDefaultValuatedNodes(const tlp::Graph *) const;
    tlp::IteratorEdge * getNonDefaultValuatedEdges(const tlp::Graph *) const;
    bool copy(tlp::node,tlp::node,tlp::LayoutProperty *,bool);
    bool copy(tlp::edge,tlp::edge,tlp::LayoutProperty *,bool);
    void copy(tlp::LayoutProperty *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_LayoutProperty(const siptlp_LayoutProperty &);
    siptlp_LayoutProperty &operator = (const siptlp_LayoutProperty &);

    char sipPyMethods[18];
};

siptlp_LayoutProperty::siptlp_LayoutProperty(tlp::Graph *a0,std::string a1): tlp::LayoutProperty(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_LayoutProperty::~siptlp_LayoutProperty()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_LayoutProperty::erase(const tlp::node a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_erase);

    if (!sipMeth)
    {
        tlp::LayoutProperty::erase(a0);
        return;
    }

    extern void sipVH_tulip_31(sip_gilstate_t,PyObject *,const tlp::node);

    sipVH_tulip_31(sipGILState,sipMeth,a0);
}

void siptlp_LayoutProperty::erase(const tlp::edge a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_erase);

    if (!sipMeth)
    {
        tlp::LayoutProperty::erase(a0);
        return;
    }

    extern void sipVH_tulip_30(sip_gilstate_t,PyObject *,const tlp::edge);

    sipVH_tulip_30(sipGILState,sipMeth,a0);
}

std::string siptlp_LayoutProperty::getTypename() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_getTypename);

    if (!sipMeth)
        return tlp::LayoutProperty::getTypename();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_LayoutProperty::getNodeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_getNodeDefaultStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::getNodeDefaultStringValue();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_LayoutProperty::getEdgeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_getEdgeDefaultStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::getEdgeDefaultStringValue();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_LayoutProperty::getNodeStringValue(const tlp::node a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_getNodeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::getNodeStringValue(a0);

    extern std::string sipVH_tulip_29(sip_gilstate_t,PyObject *,const tlp::node);

    return sipVH_tulip_29(sipGILState,sipMeth,a0);
}

std::string siptlp_LayoutProperty::getEdgeStringValue(const tlp::edge a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_getEdgeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::getEdgeStringValue(a0);

    extern std::string sipVH_tulip_28(sip_gilstate_t,PyObject *,const tlp::edge);

    return sipVH_tulip_28(sipGILState,sipMeth,a0);
}

bool siptlp_LayoutProperty::setNodeStringValue(const tlp::node a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setNodeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::setNodeStringValue(a0,a1);

    extern bool sipVH_tulip_27(sip_gilstate_t,PyObject *,const tlp::node,const std::string&);

    return sipVH_tulip_27(sipGILState,sipMeth,a0,a1);
}

bool siptlp_LayoutProperty::setEdgeStringValue(const tlp::edge a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setEdgeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::setEdgeStringValue(a0,a1);

    extern bool sipVH_tulip_26(sip_gilstate_t,PyObject *,const tlp::edge,const std::string&);

    return sipVH_tulip_26(sipGILState,sipMeth,a0,a1);
}

bool siptlp_LayoutProperty::setAllNodeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setAllNodeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::setAllNodeStringValue(a0);

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

bool siptlp_LayoutProperty::setAllEdgeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setAllEdgeStringValue);

    if (!sipMeth)
        return tlp::LayoutProperty::setAllEdgeStringValue(a0);

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

tlp::IteratorNode * siptlp_LayoutProperty::getNonDefaultValuatedNodes(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_getNonDefaultValuatedNodes);

    if (!sipMeth)
        return tlp::LayoutProperty::getNonDefaultValuatedNodes(a0);

    extern tlp::IteratorNode * sipVH_tulip_24(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_24(sipGILState,sipMeth,a0);
}

tlp::IteratorEdge * siptlp_LayoutProperty::getNonDefaultValuatedEdges(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_getNonDefaultValuatedEdges);

    if (!sipMeth)
        return tlp::LayoutProperty::getNonDefaultValuatedEdges(a0);

    extern tlp::IteratorEdge * sipVH_tulip_23(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_23(sipGILState,sipMeth,a0);
}

bool siptlp_LayoutProperty::copy(tlp::node a0,tlp::node a1,tlp::LayoutProperty *a2,bool a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
        return tlp::LayoutProperty::copy(a0,a1,a2,a3);

    extern bool sipVH_tulip_34(sip_gilstate_t,PyObject *,tlp::node,tlp::node,tlp::LayoutProperty *,bool);

    return sipVH_tulip_34(sipGILState,sipMeth,a0,a1,a2,a3);
}

bool siptlp_LayoutProperty::copy(tlp::edge a0,tlp::edge a1,tlp::LayoutProperty *a2,bool a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
        return tlp::LayoutProperty::copy(a0,a1,a2,a3);

    extern bool sipVH_tulip_33(sip_gilstate_t,PyObject *,tlp::edge,tlp::edge,tlp::LayoutProperty *,bool);

    return sipVH_tulip_33(sipGILState,sipMeth,a0,a1,a2,a3);
}

void siptlp_LayoutProperty::copy(tlp::LayoutProperty *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
    {
        tlp::LayoutProperty::copy(a0);
        return;
    }

    extern void sipVH_tulip_32(sip_gilstate_t,PyObject *,tlp::LayoutProperty *);

    sipVH_tulip_32(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_setAllNodeValue, "tlp.LayoutProperty.setAllNodeValue(val)\n"
    "\n"
    "Sets the same value on the whole set of nodes.\n"
    "\n"
    ":param val: the value to set on the nodes.\n"
    ":type val: :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_setAllNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setAllNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Coord, &a0))
        {
            sipCpp->setAllNodeValue(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setAllNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_setAllEdgeValue, "tlp.LayoutProperty.setAllEdgeValue(val)\n"
    "\n"
    "Sets the same value on the whole set of edges.\n"
    "\n"
    ":param val: the value to set on the edges.\n"
    ":type val: list of :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_setAllEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setAllEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_std_vector_0100tlp_Coord,&a0, &a0State))
        {
            sipCpp->setAllEdgeValue(*a0);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setAllEdgeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getNodeDefaultValue, "tlp.LayoutProperty.getNodeDefaultValue()\n"
    "\n"
    "Returns the default value associated to the nodes.\n"
    "\n"
    ":rtype: :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getNodeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNodeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->getNodeDefaultValue());

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNodeDefaultValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getEdgeDefaultValue, "tlp.LayoutProperty.getEdgeDefaultValue()\n"
    "\n"
    "Returns the default value associated to the edges.\n"
    "\n"
    ":rtype: list of :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getEdgeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getEdgeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            std::vector<tlp::Coord> *sipRes;

            sipRes = new std::vector<tlp::Coord>(sipCpp->getEdgeDefaultValue());

            return sipConvertFromNewType(sipRes,sipType_std_vector_0100tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getEdgeDefaultValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getNodeValue, "tlp.LayoutProperty.getNodeValue(node)\n"
    "\n"
    "Returns the value associated to a particular node.\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":rtype: :class:`tlp.Coord`\n"
    ":throws: an exception if the node does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            tlp::Coord *sipRes = 0;
            int sipIsErr = 0;

#line 106 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipRes = sipCpp->getNodeValue(*a0);
#else
		sipRes = new tlp::Coord(sipCpp->getNodeValue(*a0));
#endif		
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 521 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getEdgeValue, "tlp.LayoutProperty.getEdgeValue(edge) \n"
    "\n"
    "Returns the value associated to a particular edge.\n"
    "\n"
    ":param edge: an existing edge\n"
    ":type edge: :class:`tlp.edge`\n"
    ":rtype: list of :class:`tlp.Coord`\n"
    ":throws: an exception if the edge does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            std::vector<tlp::Coord> *sipRes = 0;
            int sipIsErr = 0;

#line 132 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipRes = sipCpp->getEdgeValue(*a0);
#else
		sipRes = new std::vector<tlp::Coord>(sipCpp->getEdgeValue(*a0));
#endif		
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 570 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_vector_0100tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getEdgeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_setNodeValue, "tlp.LayoutProperty.setNodeValue(node, val)\n"
    "\n"
    "Sets the value of a particular node.\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":param val: the value to set on the node\n"
    ":type val: :class:`tlp.Coord`\n"
    ":throws: an exception if the node does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        const tlp::Coord * a1;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_Coord, &a1))
        {
            int sipIsErr = 0;

#line 159 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipCpp->setNodeValue(*a0, a1);
#else
		sipCpp->setNodeValue(*a0, *a1);
#endif		
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 620 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_setEdgeValue, "tlp.LayoutProperty.setEdgeValue(edge, val)\n"
    "\n"
    "Sets the value of a particular edge.\n"
    "\n"
    ":param edge: an existing edge\n"
    ":type edge: :class:`tlp.edge`\n"
    ":param val: the value to set on the edge\n"
    ":type val: list of :class:`tlp.Coord`\n"
    ":throws: an exception if the edge does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_setEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        const std::vector<tlp::Coord> * a1;
        int a1State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_std_vector_0100tlp_Coord,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 186 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipCpp->setEdgeValue(*a0, a1);
#else
		sipCpp->setEdgeValue(*a0, *a1);
#endif		
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 672 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a1),sipType_std_vector_0100tlp_Coord,a1State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setEdgeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_erase(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_erase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::erase(*a0) : sipCpp->erase(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::edge * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::erase(*a0) : sipCpp->erase(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_erase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getTypename(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getTypename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getTypename() : sipCpp->getTypename()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getTypename, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getName(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getNodeDefaultStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNodeDefaultStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getNodeDefaultStringValue() : sipCpp->getNodeDefaultStringValue()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNodeDefaultStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getEdgeDefaultStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getEdgeDefaultStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getEdgeDefaultStringValue() : sipCpp->getEdgeDefaultStringValue()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getEdgeDefaultStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getNodeStringValue(*a0) : sipCpp->getNodeStringValue(*a0)));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::edge * a0;
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getEdgeStringValue(*a0) : sipCpp->getEdgeStringValue(*a0)));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_setNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_std_string,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::setNodeStringValue(*a0,*a1) : sipCpp->setNodeStringValue(*a0,*a1));
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_setEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::edge * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_std_string,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::setEdgeStringValue(*a0,*a1) : sipCpp->setEdgeStringValue(*a0,*a1));
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_setAllNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setAllNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::string * a0;
        int a0State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::setAllNodeStringValue(*a0) : sipCpp->setAllNodeStringValue(*a0));
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setAllNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_setAllEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_setAllEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::string * a0;
        int a0State = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::setAllEdgeStringValue(*a0) : sipCpp->setAllEdgeStringValue(*a0));
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_setAllEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getNonDefaultValuatedNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNonDefaultValuatedNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Graph * a0 = 0;
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::IteratorNode *sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getNonDefaultValuatedNodes(a0) : sipCpp->getNonDefaultValuatedNodes(a0));

            return sipConvertFromType(sipRes,sipType_tlp_IteratorNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNonDefaultValuatedNodes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_LayoutProperty_getNonDefaultValuatedEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getNonDefaultValuatedEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Graph * a0 = 0;
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::IteratorEdge *sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::getNonDefaultValuatedEdges(a0) : sipCpp->getNonDefaultValuatedEdges(a0));

            return sipConvertFromType(sipRes,sipType_tlp_IteratorEdge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getNonDefaultValuatedEdges, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_copy, "tlp.LayoutProperty.copy(nodeDst, nodeSrc, prop[, ifNotDefault=False])\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the value hold by a property on a node to another node on this property.\n"
    "\n"
    ":param nodeDst: the node to copy the value to.\n"
    ":type nodeDst: :class:`tlp.node`\n"
    ":param nodeSrc: the node to copy the value from.\n"
    ":type nodeSrc: :class:`tlp.node`\n"
    ":param prop: the property holding the value to copy.\n"
    ":type prop: :class:`tlp.LayoutProperty`\n"
    ":param ifNotDefault: whether to ignore default-valuated nodes or not. Defaults to :const:`False`.\n"
    ":type ifNotDefault: boolean\n"
    "tlp.LayoutProperty.copy(edgeDst, edgeSrc, prop[, ifNotDefault=False])\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the value hold by a property on an edge to another edge on this property.\n"
    "\n"
    ":param edgeDst: the node to copy the value to.\n"
    ":type edgeDst: :class:`tlp.edge`\n"
    ":param edgeSrc: the node to copy the value from.\n"
    ":type edgeSrc: :class:`tlp.edge`\n"
    ":param prop: the property holding the value to copy.\n"
    ":type prop: :class:`tlp.LayoutProperty`\n"
    ":param ifNotDefault: whether to ignore default-valuated nodes or not. Defaults to :const:`False`.\n"
    ":type ifNotDefault: boolean\n"
    "tlp.LayoutProperty.copy(prop)\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the values hold by a property on this property.\n"
    "\n"
    ":param prop: the property to copy\n"
    ":type prop: :class:`tlp.LayoutProperty`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_copy(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::node * a0;
        tlp::node * a1;
        tlp::LayoutProperty * a2;
        bool a3 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J8|b", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_node, &a1, sipType_tlp_LayoutProperty, &a2, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::copy(*a0,*a1,a2,a3) : sipCpp->copy(*a0,*a1,a2,a3));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        tlp::edge * a0;
        tlp::edge * a1;
        tlp::LayoutProperty * a2;
        bool a3 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J8|b", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_tlp_edge, &a1, sipType_tlp_LayoutProperty, &a2, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::copy(*a0,*a1,a2,a3) : sipCpp->copy(*a0,*a1,a2,a3));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        tlp::LayoutProperty * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_LayoutProperty, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::LayoutProperty::copy(a0) : sipCpp->copy(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_copy, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getMax, "tlp.LayoutProperty.getMax([subgraph = None])\n"
    "\n"
    "Returns the maximum coordinate in that layout property,\n"
    "i.e. the top-right corner of the graph drawing bounding box.\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case return the maximum coordinate of the sub-graph layout.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: :class:`tlp.Coord` \n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getMax(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getMax(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::Coord *sipRes = 0;
            int sipIsErr = 0;

#line 399 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipRes = new tlp::Coord(sipCpp->getMax(a0));
    }
#line 1192 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getMax, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_getMin, "tlp.LayoutProperty.getMin([subgraph = None])\n"
    "\n"
    "Returns the minimum coordinate in that layout property,\n"
    "i.e. the bottom-left corner of the graph drawing bounding box.\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case return the minimum coordinate of the sub-graph layout.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: :class:`tlp.Coord` \n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_getMin(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_getMin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::Coord *sipRes = 0;
            int sipIsErr = 0;

#line 429 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipRes = new tlp::Coord(sipCpp->getMin(a0));
    }
#line 1245 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_getMin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_translate, "tlp.LayoutProperty.translate(move[, subgraph = None])\n"
    "\n"
    "Translates the current layout according to a movement vector.\n"
    "\n"
    ":param move: a movement vector\n"
    ":type move: :class:`tlp.Vec3f`\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case translates the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.translate(move, itNodes, itEdges)\n"
    "\n"
    "Translates the layout of a set of nodes and edges provided through iterators according to a movement vector.\n"
    "\n"
    ":param move: a movement vector\n"
    ":type move: :class:`tlp.Vec3f`\n"
    ":param itNodes: an iterator on graph nodes\n"
    ":type itNodes: :class:`tlp.IteratorNode`\n"
    ":param itEdges: an iterator on graph edges\n"
    ":type itEdges: :class:`tlp.IteratorEdge`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_translate(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Vec3f, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 459 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->translate(*a0, a1);
    }
#line 1308 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Vec3f * a0;
        tlp::IteratorNode * a1;
        tlp::IteratorEdge * a2;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Vec3f, &a0, sipType_tlp_IteratorNode, &a1, sipType_tlp_IteratorEdge, &a2))
        {
            sipCpp->translate(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_translate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_scale, "tlp.LayoutProperty.scale(scaleFactors[, subgraph = None])\n"
    "\n"
    "Scales the layout according to a vector of scale factors (sx, sy, sz).\n"
    "\n"
    ":param move: a vector of scale factors\n"
    ":type move: :class:`tlp.Vec3f`\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case scales the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.scale(scaleFactors, itNodes, itEdges)\n"
    "\n"
    "Scales the layout of the nodes and edges provided through iterators according to a vector of scale factors (sx, sy, sz).\n"
    "\n"
    ":param move: a vector of scale factors\n"
    ":type move: :class:`tlp.Vec3f`\n"
    ":param itNodes: an iterator on graph nodes\n"
    ":type itNodes: :class:`tlp.IteratorNode`\n"
    ":param itEdges: an iterator on graph edges\n"
    ":type itEdges: :class:`tlp.IteratorEdge`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_scale(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_scale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec3f * a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Vec3f, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 507 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->scale(*a0, a1);
    }
#line 1387 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Vec3f * a0;
        tlp::IteratorNode * a1;
        tlp::IteratorEdge * a2;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J8J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Vec3f, &a0, sipType_tlp_IteratorNode, &a1, sipType_tlp_IteratorEdge, &a2))
        {
            sipCpp->scale(*a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_scale, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_rotateX, "tlp.LayoutProperty.rotateX(alpha[, subgraph = None])\n"
    "\n"
    ".. versionadded:: 3.7\n"
    "\n"
    "Rotates the layout around the X-axis according to an angle in degrees.\n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case rotates the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.rotateX(alpha, itNodes, itEdges)\n"
    "\n"
    "Rotates the layout around the X-axis of the nodes and edges provided through iterators according to an angle in degrees. \n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param itNodes: an iterator on graph nodes\n"
    ":type itNodes: :class:`tlp.IteratorNode`\n"
    ":param itEdges: an iterator on graph edges\n"
    ":type itEdges: :class:`tlp.IteratorEdge`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_rotateX(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_rotateX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 556 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->rotateX(a0, a1);
    }
#line 1468 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
        tlp::IteratorNode * a1;
        tlp::IteratorEdge * a2;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ8J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_IteratorNode, &a1, sipType_tlp_IteratorEdge, &a2))
        {
            sipCpp->rotateX(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_rotateX, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_rotateY, "tlp.LayoutProperty.rotateY(alpha[, subgraph = None])\n"
    "\n"
    ".. versionadded:: 3.7\n"
    "\n"
    "Rotates the layout around the Y-axis according to an angle in degrees.\n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case rotates the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.rotateY(alpha, itNodes, itEdges)\n"
    "\n"
    "Rotates the layout around the Y-axis of the nodes and edges provided through iterators according to an angle in degrees. \n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param itNodes: an iterator on graph nodes\n"
    ":type itNodes: :class:`tlp.IteratorNode`\n"
    ":param itEdges: an iterator on graph edges\n"
    ":type itEdges: :class:`tlp.IteratorEdge`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_rotateY(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_rotateY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 589 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->rotateY(a0, a1);
    }
#line 1549 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
        tlp::IteratorNode * a1;
        tlp::IteratorEdge * a2;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ8J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_IteratorNode, &a1, sipType_tlp_IteratorEdge, &a2))
        {
            sipCpp->rotateY(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_rotateY, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_rotateZ, "tlp.LayoutProperty.rotateZ(alpha[, subgraph = None])\n"
    "\n"
    "Rotates the layout around the Z-axis according to an angle in degrees.\n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case rotates the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.rotateZ(alpha, itNodes, itEdges)\n"
    "\n"
    "Rotates the layout around the Z-axis of the nodes and edges provided through iterators according to an angle in degrees. \n"
    "\n"
    ":param alpha: an angle in degrees\n"
    ":type alpha: float\n"
    ":param itNodes: an iterator on graph nodes\n"
    ":type itNodes: :class:`tlp.IteratorNode`\n"
    ":param itEdges: an iterator on graph edges\n"
    ":type itEdges: :class:`tlp.IteratorEdge`");

extern "C" {static PyObject *meth_tlp_LayoutProperty_rotateZ(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_rotateZ(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 619 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->rotateZ(a0, a1);
    }
#line 1628 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        double a0;
        tlp::IteratorNode * a1;
        tlp::IteratorEdge * a2;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BdJ8J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, &a0, sipType_tlp_IteratorNode, &a1, sipType_tlp_IteratorEdge, &a2))
        {
            sipCpp->rotateZ(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_rotateZ, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_center, "tlp.LayoutProperty.center([subgraph = None])\n"
    "\n"
    "Centers the layout, meaning translating it in order that the center of its bounding box is (0,0,0)\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case only centers the layout of that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.center(newCenter[, subgraph = None])\n"
    "\n"
    ".. versionadded:: 3.7\n"
    "\n"
    "Centers the layout to newCenter, meaning translating it in order that\n"
    "the center of its bounding box is equal to newCenter.\n"
    "\n"
    ":param newCenter: the new center of the layout\n"
    ":type newCenter: :class:`tlp.Vec3f`\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case only centers the layout of that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_center(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_center(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            int sipIsErr = 0;

#line 695 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->center(a0);
    }
#line 1706 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Vec3f * a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Vec3f, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 728 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->center(*a0, a1);
    }
#line 1738 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_center, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_normalize, "tlp.LayoutProperty.normalize([subgraph = None])\n"
    "\n"
    "Normalizes the layout, meaning dividing each nodes and edges coordinate by the maximum magnitude of the whole coordinates set\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case only normalizes the layout of that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_normalize(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_normalize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            int sipIsErr = 0;

#line 756 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
        sipCpp->normalize(a0);
    }
#line 1789 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_normalize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_perfectAspectRatio, "tlp.LayoutProperty.perfectAspectRatio()\n"
    "\n"
    "Scales the layout in order to approach an aspect ratio (width / height) of 1.0 . ");

extern "C" {static PyObject *meth_tlp_LayoutProperty_perfectAspectRatio(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_perfectAspectRatio(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            sipCpp->perfectAspectRatio();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_perfectAspectRatio, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_edgeLength, "tlp.LayoutProperty.edgeLength(edge)\n"
    "\n"
    "Returns the length of an edge, the bends are taken into account.\n"
    "Thus, it measures the length of a polyline.\n"
    "\n"
    ":param edge: an existing edge\n"
    ":type edge: :class:`tlp.edge`\n"
    ":rtype: float\n"
    ":throws: an exception if the edge does not belong to the graph attached to the property\n"
    "\n"
    ".. warning:: This function only measures the length of the polyline between bends, when using curves like Bezier etc... the result will not be the length of the curve.");

extern "C" {static PyObject *meth_tlp_LayoutProperty_edgeLength(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_edgeLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            double sipRes = 0;
            int sipIsErr = 0;

#line 797 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
        if (sipCpp->getGraph()->isElement(*a0)) {
		sipRes = sipCpp->edgeLength(*a0);
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 1866 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_edgeLength, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_averageEdgeLength, "tlp.LayoutProperty.averageEdgeLength([subgraph=None])\n"
    "\n"
    ".. versionadded:: 3.7\n"
    "\n"
    "Returns the average edge length of the layout, the bends are taken into account.\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case only computes the average edge length for that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: float\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_averageEdgeLength(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_averageEdgeLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            double sipRes = 0;
            int sipIsErr = 0;

#line 821 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }

    if (sipIsErr == 0) {
        sipRes = sipCpp->averageEdgeLength(a0);
    }
#line 1921 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_averageEdgeLength, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_averageAngularResolution, "tlp.LayoutProperty.averageAngularResolution([subgraph = None])\n"
    "\n"
    "Returns the average angular resolution of the layout.\n"
    "It is only defined for 2D drawing, meaning the third coordinate is omitted\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case computes the average angular resolution for the layout of the nodes belonging to that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: float\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.averageAngularResolution(node[, subgraph = None])\n"
    "\n"
    "Returns the average angular resolution of a node.\n"
    "It is only defined for 2D drawing, meaning the third coordinate is omitted\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case computes the average angular resolution of a node in that sub-graph.\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: float\n"
    ":throws: an exception if the node does not belong to the graph attached to the property or if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_averageAngularResolution(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_averageAngularResolution(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            double sipRes = 0;
            int sipIsErr = 0;

#line 852 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }

    if (sipIsErr == 0) {
        sipRes = sipCpp->averageAngularResolution(a0);
    }
#line 1986 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    {
        const tlp::node * a0;
        const tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_Graph, &a1))
        {
            double sipRes = 0;
            int sipIsErr = 0;

#line 886 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
	if (sipCpp->getGraph()->isElement(*a0)) {
		if (a1 && a1->isElement(*a0)) {
			sipRes = sipCpp->averageAngularResolution(*a0, a1);
		} else {
			if (!a1) {
				sipRes = sipCpp->averageAngularResolution(*a0);
			} else {
				sipIsErr = throwInvalidNodeException(const_cast<tlp::Graph*>(a1), *a0);
			}
		}
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
        }
    }
#line 2030 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_averageAngularResolution, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_angularResolutions, "tlp.LayoutProperty.angularResolutions(node[, subgraph=None])\n"
    "\n"
    "Returns a list of all angular resolution of a node.\n"
    "It is only defined for 2D drawing, meaning the third coordinates is omitted\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case returns the list of angular resolution for the node in that sub-graph\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":rtype: list of float\n"
    ":throws: an exception if the node does not belong to the graph attached to the property or if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_angularResolutions(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_angularResolutions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        const tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_Graph, &a1))
        {
            std::vector<double> *sipRes = 0;
            int sipIsErr = 0;

#line 930 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
	if (sipCpp->getGraph()->isElement(*a0)) {
		if (a1 && a1->isElement(*a0)) {
			sipRes = new std::vector<double>(sipCpp->angularResolutions(*a0, a1));
		} else {
			if (!a1) {
				sipRes = new std::vector<double>(sipCpp->angularResolutions(*a0));
			} else {
				sipIsErr = throwInvalidNodeException(const_cast<tlp::Graph*>(a1), *a0);
			}
		}
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
        }
    }
#line 2098 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_vector_2400,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_angularResolutions, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_computeEmbedding, "tlp.LayoutProperty.computeEmbedding([subgraph=None])\n"
    "\n"
    "Fixes embedding of the graph according to the layout,\n"
    "ie. sort edges around nodes according to their neighbors/bends position in the layout.\n"
    "Only works in 2D, the third coordinate is not taken into account.\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case fixes embedding of that sub-graph\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the provided sub-graph is not a descendant of the graph attached to the property\n"
    "tlp.LayoutProperty.computeEmbedding(node[, subgraph=None])\n"
    "\n"
    "Fixes embedding of the node according to the layout,\n"
    "ie. sort edges around the node according to their neighbors/bends position in the layout.\n"
    "Only works in 2D, the third coordinate is not taken into account.\n"
    "\n"
    ":param subgraph: a sub-graph can be given in parameter, in that case fixes embedding of the node in that sub-graph\n"
    ":type subgraph: :class:`tlp.Graph`\n"
    ":throws: an exception if the node does not belong to the graph attached to the property or if the provided sub-graph is not a descendant of the graph attached to the property");

extern "C" {static PyObject *meth_tlp_LayoutProperty_computeEmbedding(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_computeEmbedding(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            int sipIsErr = 0;

#line 972 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
    if (a0) {
        if (!sipCpp->getGraph()->isDescendantGraph(a0) && a0 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a0->getName() << " (id " << a0->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }

    if (sipIsErr == 0) {
        sipCpp->computeEmbedding(a0);
    }
#line 2160 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::node * a0;
        tlp::Graph * a1 = 0;
        tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J8", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_Graph, &a1))
        {
            int sipIsErr = 0;

#line 1003 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"

    if (a1) {
        if (!sipCpp->getGraph()->isDescendantGraph(a1) && a1 != sipCpp->getGraph()) {
            sipIsErr = 1;
            std::ostringstream oss;
            oss << "Error : <graph " << a1->getName() << " (id " << a1->getId() << ")>";
            oss << "is not a descendant of <graph " << sipCpp->getGraph()->getName() << " (id " << sipCpp->getGraph()->getId() << ")>";
            PyErr_SetString(PyExc_Exception, oss.str().c_str());
        }
    }
    if (sipIsErr == 0) {
	if (sipCpp->getGraph()->isElement(*a0)) {
		if (a1 && a1->isElement(*a0)) {
			sipCpp->computeEmbedding(*a0, a1);
		} else {
			if (!a1) {
				sipCpp->computeEmbedding(*a0);
			} else {
				sipIsErr = throwInvalidNodeException(const_cast<tlp::Graph*>(a1), *a0);
			}
		}
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	} 
    }
#line 2205 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_computeEmbedding, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_LayoutProperty_crossingNumber, "tlp.LayoutProperty.crossingNumber()\n"
    "\n"
    "Returns the number of edges crossings in the layout.");

extern "C" {static PyObject *meth_tlp_LayoutProperty_crossingNumber(PyObject *, PyObject *);}
static PyObject *meth_tlp_LayoutProperty_crossingNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::LayoutProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_LayoutProperty, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->crossingNumber();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName_crossingNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_LayoutProperty___repr__(PyObject *);}
static PyObject *slot_tlp_LayoutProperty___repr__(PyObject *sipSelf)
{
    tlp::LayoutProperty *sipCpp = reinterpret_cast<tlp::LayoutProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_LayoutProperty));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 262 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	std::ostringstream oss;
	oss << "<Layout property " << sipCpp->getName() << ">";
	std::string s = oss.str();
#if PY_MAJOR_VERSION >= 3
    sipRes = PyUnicode_FromString(s.c_str());
#else
    sipRes = PyString_FromString(s.c_str());
#endif
#line 2273 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_tlp_LayoutProperty___setitem__(PyObject *,PyObject *);}
static int slot_tlp_LayoutProperty___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::LayoutProperty *sipCpp = reinterpret_cast<tlp::LayoutProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_LayoutProperty));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        const tlp::Coord * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J9", sipType_tlp_node, &a0, sipType_tlp_Coord, &a1))
        {
            int sipIsErr = 0;

#line 216 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
     	sipCpp->setNodeValue(*a0, a1);
#else
		sipCpp->setNodeValue(*a0, *a1);
#endif     	
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    } 
#line 2311 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        const tlp::edge * a0;
        const std::vector<tlp::Coord> * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_tlp_edge, &a0, sipType_std_vector_0100tlp_Coord,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 247 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {	
#ifdef PROPERTY_BASE_TYPE	
     	sipCpp->setEdgeValue(*a0, a1);
#else
		sipCpp->setEdgeValue(*a0, *a1);
#endif     	
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    } 
#line 2339 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a1),sipType_std_vector_0100tlp_Coord,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_LayoutProperty___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_LayoutProperty___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::LayoutProperty *sipCpp = reinterpret_cast<tlp::LayoutProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_LayoutProperty));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_node, &a0))
        {
            tlp::Coord *sipRes = 0;
            int sipIsErr = 0;

#line 201 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
        sipRes = sipCpp->getNodeValue(*a0);
#else
        sipRes = new tlp::Coord(sipCpp->getNodeValue(*a0));
#endif     	
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    }
#line 2384 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    {
        const tlp::edge * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_edge, &a0))
        {
            std::vector<tlp::Coord> *sipRes = 0;
            int sipIsErr = 0;

#line 231 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/LayoutProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
     	sipRes = sipCpp->getEdgeValue(*a0);
#else
		sipRes = new std::vector<tlp::Coord>(sipCpp->getEdgeValue(*a0));
#endif     	
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    }
     
#line 2412 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpLayoutProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_vector_0100tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_LayoutProperty, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_LayoutProperty(void *, const sipTypeDef *);}
static void *cast_tlp_LayoutProperty(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_LayoutProperty)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_PropertyInterface)->ctd_cast((tlp::PropertyInterface *)(tlp::LayoutProperty *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_LayoutProperty(void *, int);}
static void release_tlp_LayoutProperty(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_LayoutProperty *>(sipCppV);
    else
        delete reinterpret_cast<tlp::LayoutProperty *>(sipCppV);
}


extern "C" {static void dealloc_tlp_LayoutProperty(sipSimpleWrapper *);}
static void dealloc_tlp_LayoutProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_LayoutProperty *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_LayoutProperty(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_LayoutProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_LayoutProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_LayoutProperty *sipCpp = 0;

    {
        tlp::Graph * a0;
        std::string a1def = "";
        std::string * a1 = &a1def;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8|J1", sipType_tlp_Graph, &a0, sipType_std_string,&a1, &a1State))
        {
            sipCpp = new siptlp_LayoutProperty(a0,*a1);
            sipReleaseType(a1,sipType_std_string,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_LayoutProperty[] = {{85, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_LayoutProperty[] = {
    {(void *)slot_tlp_LayoutProperty___repr__, repr_slot},
    {(void *)slot_tlp_LayoutProperty___setitem__, setitem_slot},
    {(void *)slot_tlp_LayoutProperty___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_LayoutProperty[] = {
    {SIP_MLNAME_CAST(sipName_angularResolutions), meth_tlp_LayoutProperty_angularResolutions, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_angularResolutions)},
    {SIP_MLNAME_CAST(sipName_averageAngularResolution), meth_tlp_LayoutProperty_averageAngularResolution, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_averageAngularResolution)},
    {SIP_MLNAME_CAST(sipName_averageEdgeLength), meth_tlp_LayoutProperty_averageEdgeLength, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_averageEdgeLength)},
    {SIP_MLNAME_CAST(sipName_center), meth_tlp_LayoutProperty_center, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_center)},
    {SIP_MLNAME_CAST(sipName_computeEmbedding), meth_tlp_LayoutProperty_computeEmbedding, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_computeEmbedding)},
    {SIP_MLNAME_CAST(sipName_copy), meth_tlp_LayoutProperty_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_copy)},
    {SIP_MLNAME_CAST(sipName_crossingNumber), meth_tlp_LayoutProperty_crossingNumber, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_crossingNumber)},
    {SIP_MLNAME_CAST(sipName_edgeLength), meth_tlp_LayoutProperty_edgeLength, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_edgeLength)},
    {SIP_MLNAME_CAST(sipName_erase), meth_tlp_LayoutProperty_erase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeDefaultStringValue), meth_tlp_LayoutProperty_getEdgeDefaultStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeDefaultValue), meth_tlp_LayoutProperty_getEdgeDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getEdgeDefaultValue)},
    {SIP_MLNAME_CAST(sipName_getEdgeStringValue), meth_tlp_LayoutProperty_getEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeValue), meth_tlp_LayoutProperty_getEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getEdgeValue)},
    {SIP_MLNAME_CAST(sipName_getMax), meth_tlp_LayoutProperty_getMax, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getMax)},
    {SIP_MLNAME_CAST(sipName_getMin), meth_tlp_LayoutProperty_getMin, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getMin)},
    {SIP_MLNAME_CAST(sipName_getName), meth_tlp_LayoutProperty_getName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeDefaultStringValue), meth_tlp_LayoutProperty_getNodeDefaultStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeDefaultValue), meth_tlp_LayoutProperty_getNodeDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getNodeDefaultValue)},
    {SIP_MLNAME_CAST(sipName_getNodeStringValue), meth_tlp_LayoutProperty_getNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeValue), meth_tlp_LayoutProperty_getNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_getNodeValue)},
    {SIP_MLNAME_CAST(sipName_getNonDefaultValuatedEdges), meth_tlp_LayoutProperty_getNonDefaultValuatedEdges, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNonDefaultValuatedNodes), meth_tlp_LayoutProperty_getNonDefaultValuatedNodes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTypename), meth_tlp_LayoutProperty_getTypename, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_normalize), meth_tlp_LayoutProperty_normalize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_normalize)},
    {SIP_MLNAME_CAST(sipName_perfectAspectRatio), meth_tlp_LayoutProperty_perfectAspectRatio, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_perfectAspectRatio)},
    {SIP_MLNAME_CAST(sipName_rotateX), meth_tlp_LayoutProperty_rotateX, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_rotateX)},
    {SIP_MLNAME_CAST(sipName_rotateY), meth_tlp_LayoutProperty_rotateY, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_rotateY)},
    {SIP_MLNAME_CAST(sipName_rotateZ), meth_tlp_LayoutProperty_rotateZ, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_rotateZ)},
    {SIP_MLNAME_CAST(sipName_scale), meth_tlp_LayoutProperty_scale, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_scale)},
    {SIP_MLNAME_CAST(sipName_setAllEdgeStringValue), meth_tlp_LayoutProperty_setAllEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllEdgeValue), meth_tlp_LayoutProperty_setAllEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_setAllEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setAllNodeStringValue), meth_tlp_LayoutProperty_setAllNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllNodeValue), meth_tlp_LayoutProperty_setAllNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_setAllNodeValue)},
    {SIP_MLNAME_CAST(sipName_setEdgeStringValue), meth_tlp_LayoutProperty_setEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEdgeValue), meth_tlp_LayoutProperty_setEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_setEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setNodeStringValue), meth_tlp_LayoutProperty_setNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNodeValue), meth_tlp_LayoutProperty_setNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_setNodeValue)},
    {SIP_MLNAME_CAST(sipName_translate), meth_tlp_LayoutProperty_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_LayoutProperty_translate)}
};

PyDoc_STRVAR(doc_tlp_LayoutProperty, "Bases: :class:`tlp.PropertyInterface`");


sipClassTypeDef sipTypeDef_tulip_tlp_LayoutProperty = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_tlp__LayoutProperty,
        {0}
    },
    {
        sipNameNr_LayoutProperty,
        {21, 255, 0},
        38, methods_tlp_LayoutProperty,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_LayoutProperty,
    -1,
    -1,
    supers_tlp_LayoutProperty,
    slots_tlp_LayoutProperty,
    init_tlp_LayoutProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_LayoutProperty,
    0,
    0,
    0,
    release_tlp_LayoutProperty,
    cast_tlp_LayoutProperty,
    0,
    0,
    0
};
