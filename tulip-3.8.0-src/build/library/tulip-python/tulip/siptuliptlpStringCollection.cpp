/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/StringCollection.sip"
#include <tulip/StringCollection.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringCollection.cpp"

#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringCollection.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 20 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringCollection.cpp"


PyDoc_STRVAR(doc_tlp_StringCollection_getCurrentString, "tlp.StringCollection.getCurrentString()\n"
    "\n"
    "Returns the current selected string value.\n"
    "\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_StringCollection_getCurrentString(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_getCurrentString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringCollection, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getCurrentString());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_getCurrentString, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_setCurrent, "tlp.StringCollection.setCurrent(index)\n"
    "\n"
    "Sets the current selected string index.\n"
    "Returns :const:`True` if the provided index is valid.\n"
    "\n"
    ":param index: a valid index in the string collection\n"
    ":type index: integer\n"
    ":rtype: boolean\n"
    "tlp.StringCollection.setCurrent(value)\n"
    "\n"
    "Sets the current selected string value.\n"
    "Returns :const:`True` if the string value exists in the collection.\n"
    "\n"
    ":param value: a string value from the collection\n"
    ":type value: string\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_StringCollection_setCurrent(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_setCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_StringCollection, &sipCpp, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->setCurrent(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        std::string * a0;
        int a0State = 0;
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringCollection, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            bool sipRes;

            sipRes = sipCpp->setCurrent(*a0);
            sipReleaseType(a0,sipType_std_string,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_setCurrent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_getCurrent, "tlp.StringCollection.getCurrent()\n"
    "\n"
    "Returns the index of the current selected string.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_StringCollection_getCurrent(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_getCurrent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringCollection, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getCurrent();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_getCurrent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_push_back, "tlp.StringCollection.push_back(element)\n"
    "\n"
    "Adds a string value to this string collection.\n"
    "\n"
    ":param element: the string to add to the collection\n"
    ":type element: string");

extern "C" {static PyObject *meth_tlp_StringCollection_push_back(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_push_back(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringCollection, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->push_back(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_push_back, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_empty, "tlp.StringCollection.empty()\n"
    "\n"
    "Returns :const:`True` if the collection is empty.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_StringCollection_empty(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_empty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringCollection, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->empty();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_empty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_at, "tlp.StringCollection.at(index)\n"
    "\n"
    "Returns the string element at a certain index in the collection.\n"
    "\n"
    ":param index: a valid index in the collection\n"
    ":type index: integer\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_StringCollection_at(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_at(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_StringCollection, &sipCpp, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->at(a0));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_at, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringCollection_size, "tlp.StringCollection.size()\n"
    "\n"
    "Returns the number of strings in the collection.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_StringCollection_size(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringCollection_size(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringCollection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringCollection, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->size();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName_size, NULL);

    return NULL;
}


extern "C" {static int slot_tlp_StringCollection___setitem__(PyObject *,PyObject *);}
static int slot_tlp_StringCollection___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::StringCollection *sipCpp = reinterpret_cast<tlp::StringCollection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_StringCollection));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        const std::string * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "iJ1", &a0, sipType_std_string,&a1, &a1State))
        {
#line 154 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/StringCollection.sip"
		(*sipCpp)[a0] = *a1;
#line 293 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringCollection.cpp"
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_StringCollection___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_StringCollection___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::StringCollection *sipCpp = reinterpret_cast<tlp::StringCollection *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_StringCollection));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1u", &a0))
        {
            std::string *sipRes;

            sipRes = new std::string((*sipCpp)[a0]);

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringCollection, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_StringCollection(void *, const sipTypeDef *);}
static void *cast_tlp_StringCollection(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_StringCollection)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_StringCollection(void *, int);}
static void release_tlp_StringCollection(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::StringCollection *>(sipCppV);
}


extern "C" {static void assign_tlp_StringCollection(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_StringCollection(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::StringCollection *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::StringCollection *>(sipSrc);
}


extern "C" {static void *array_tlp_StringCollection(SIP_SSIZE_T);}
static void *array_tlp_StringCollection(SIP_SSIZE_T sipNrElem)
{
    return new tlp::StringCollection[sipNrElem];
}


extern "C" {static void *copy_tlp_StringCollection(const void *, SIP_SSIZE_T);}
static void *copy_tlp_StringCollection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::StringCollection(reinterpret_cast<const tlp::StringCollection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_StringCollection(sipSimpleWrapper *);}
static void dealloc_tlp_StringCollection(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_StringCollection(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_StringCollection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_StringCollection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::StringCollection *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::StringCollection();

            return sipCpp;
        }
    }

    {
        const std::vector<std::string> * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_std_vector_0100std_string,&a0, &a0State))
        {
            sipCpp = new tlp::StringCollection(*a0);
            sipReleaseType(const_cast<std::vector<std::string> *>(a0),sipType_std_vector_0100std_string,a0State);

            return sipCpp;
        }
    }

    {
        const std::string * a0;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1", sipType_std_string,&a0, &a0State))
        {
            sipCpp = new tlp::StringCollection(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return sipCpp;
        }
    }

    {
        const std::vector<std::string> * a0;
        int a0State = 0;
        int a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1i", sipType_std_vector_0100std_string,&a0, &a0State, &a1))
        {
            sipCpp = new tlp::StringCollection(*a0,a1);
            sipReleaseType(const_cast<std::vector<std::string> *>(a0),sipType_std_vector_0100std_string,a0State);

            return sipCpp;
        }
    }

    {
        const std::vector<std::string> * a0;
        int a0State = 0;
        std::string * a1;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J1", sipType_std_vector_0100std_string,&a0, &a0State, sipType_std_string,&a1, &a1State))
        {
            sipCpp = new tlp::StringCollection(*a0,*a1);
            sipReleaseType(const_cast<std::vector<std::string> *>(a0),sipType_std_vector_0100std_string,a0State);
            sipReleaseType(a1,sipType_std_string,a1State);

            return sipCpp;
        }
    }

    {
        const tlp::StringCollection * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_StringCollection, &a0))
        {
            sipCpp = new tlp::StringCollection(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_StringCollection[] = {
    {(void *)slot_tlp_StringCollection___setitem__, setitem_slot},
    {(void *)slot_tlp_StringCollection___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_StringCollection[] = {
    {SIP_MLNAME_CAST(sipName_at), meth_tlp_StringCollection_at, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_at)},
    {SIP_MLNAME_CAST(sipName_empty), meth_tlp_StringCollection_empty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_empty)},
    {SIP_MLNAME_CAST(sipName_getCurrent), meth_tlp_StringCollection_getCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_getCurrent)},
    {SIP_MLNAME_CAST(sipName_getCurrentString), meth_tlp_StringCollection_getCurrentString, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_getCurrentString)},
    {SIP_MLNAME_CAST(sipName_push_back), meth_tlp_StringCollection_push_back, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_push_back)},
    {SIP_MLNAME_CAST(sipName_setCurrent), meth_tlp_StringCollection_setCurrent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_setCurrent)},
    {SIP_MLNAME_CAST(sipName_size), meth_tlp_StringCollection_size, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringCollection_size)}
};

PyDoc_STRVAR(doc_tlp_StringCollection, "This class represents a list of selectable string entries that can be used as plugin parameter.\n"
    "The list will appear as a combo box in the Plugin Parameter Dialog from the Tulip GUI.");


sipClassTypeDef sipTypeDef_tulip_tlp_StringCollection = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__StringCollection,
        {0}
    },
    {
        sipNameNr_StringCollection,
        {21, 255, 0},
        7, methods_tlp_StringCollection,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_StringCollection,
    -1,
    -1,
    0,
    slots_tlp_StringCollection,
    init_tlp_StringCollection,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_StringCollection,
    assign_tlp_StringCollection,
    array_tlp_StringCollection,
    copy_tlp_StringCollection,
    release_tlp_StringCollection,
    cast_tlp_StringCollection,
    0,
    0,
    0
};
