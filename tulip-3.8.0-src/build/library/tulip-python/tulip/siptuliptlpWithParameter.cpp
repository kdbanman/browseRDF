/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 20 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"

#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 25 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"


PyDoc_STRVAR(doc_tlp_WithParameter_addStringParameter, "tlp.WithParameter.addStringParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a string parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the string parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addStringParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addStringParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 68 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<std::string>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 62 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addStringParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addStringCollectionParameter, "tlp.WithParameter.addStringCollectionParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.StringCollection` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.StringCollection` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"entry1;entry2;...;entryN\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addStringCollectionParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addStringCollectionParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 94 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::StringCollection>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 113 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addStringCollectionParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addIntegerParameter, "tlp.WithParameter.addIntegerParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds an integer parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the integer parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"[0-9]+\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addIntegerParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addIntegerParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 121 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<int>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 164 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addIntegerParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addFloatParameter, "tlp.WithParameter.addFloatParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a floating point number parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the floating point number parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"[0-9]*[.][0-9]+\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addFloatParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addFloatParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 147 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<double>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 215 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addFloatParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addBooleanParameter, "tlp.WithParameter.addBooleanParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a boolean parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the boolean parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (\"true\" or \"false\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addBooleanParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addBooleanParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 173 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<bool>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 266 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addBooleanParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addDoublePropertyParameter, "tlp.WithParameter.addDoublePropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.DoubleProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.DoubleProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addDoublePropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addDoublePropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 199 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::DoubleProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 317 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addDoublePropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addIntegerPropertyParameter, "tlp.WithParameter.addIntegerPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.IntegerProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.IntegerProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addIntegerPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addIntegerPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 225 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::IntegerProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 368 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addIntegerPropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addLayoutPropertyParameter, "tlp.WithParameter.addLayoutPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.LayoutProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.LayoutProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addLayoutPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addLayoutPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 251 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::LayoutProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 419 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addLayoutPropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addSizePropertyParameter, "tlp.WithParameter.addSizePropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.SizeProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.SizeProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addSizePropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addSizePropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 277 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::SizeProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 470 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addSizePropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addColorPropertyParameter, "tlp.WithParameter.addColorPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.ColorProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.ColorProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addColorPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addColorPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 303 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::ColorProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 521 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addColorPropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addBooleanPropertyParameter, "tlp.WithParameter.addBooleanPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.BooleanProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.BooleanProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addBooleanPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addBooleanPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 329 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::BooleanProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 572 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addBooleanPropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addStringPropertyParameter, "tlp.WithParameter.addStringPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.StringProperty` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.StringProperty` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addStringPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addStringPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 355 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::StringProperty>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 623 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addStringPropertyParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addColorParameter, "tlp.WithParameter.addColorParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.Color` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.Color` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"(R, G, B, A)\", e.g. for red : \"(255,0,0,255)\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addColorParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addColorParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 381 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::Color>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 674 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addColorParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addColorScaleParameter, "tlp.WithParameter.addColorScaleParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.ColorScale` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.ColorScale` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"((R, G, B, A), ..., (R, G, B, A))\", e.g. gradient from black to white : \"((0,0,0,255), (255,255,255,255))\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addColorScaleParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addColorScaleParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 407 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::ColorScale>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 725 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addColorScaleParameter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_WithParameter_addPropertyParameter, "tlp.WithParameter.addPropertyParameter(name[, help = None, defaultValue = None, isMandatory = True])\n"
    "			\n"
    "Adds a :class:`tlp.PropertyInterface` parameter to the plug-in.\n"
    "\n"
    ":param name: the name of the :class:`tlp.PropertyInterface` parameter to add\n"
    ":type name: string\n"
    ":param help: a description of the parameter, that will be displayed to the user\n"
    ":type help: string\n"
    ":param defaultValue: the default value (in the form \"<property_name>\") the parameter should take, to be the initial value in the GUI\n"
    ":type defaultValue: string\n"
    ":param isMandatory: specify whether this parameter requires a value or not\n"
    ":type isMandatory: boolean ");

extern "C" {static PyObject *meth_tlp_WithParameter_addPropertyParameter(PyObject *, PyObject *);}
static PyObject *meth_tlp_WithParameter_addPropertyParameter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string& a1def = "";
        const std::string * a1 = &a1def;
        int a1State = 0;
        const std::string& a2def = "";
        const std::string * a2 = &a2def;
        int a2State = 0;
        bool a3 = 1;
        tlp::WithParameter *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1b", &sipSelf, sipType_tlp_WithParameter, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, &a3))
        {
#line 433 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
    sipCpp->addParameter<tlp::PropertyInterface*>((*a0).c_str(), (*a1).c_str(), (*a2).c_str(), a3);
#line 776 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpWithParameter.cpp"
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WithParameter, sipName_addPropertyParameter, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_WithParameter(void *, const sipTypeDef *);}
static void *cast_tlp_WithParameter(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_WithParameter)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_WithParameter(void *, int);}
static void release_tlp_WithParameter(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::WithParameter *>(sipCppV);
}


extern "C" {static void assign_tlp_WithParameter(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_WithParameter(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::WithParameter *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::WithParameter *>(sipSrc);
}


extern "C" {static void *array_tlp_WithParameter(SIP_SSIZE_T);}
static void *array_tlp_WithParameter(SIP_SSIZE_T sipNrElem)
{
    return new tlp::WithParameter[sipNrElem];
}


extern "C" {static void *copy_tlp_WithParameter(const void *, SIP_SSIZE_T);}
static void *copy_tlp_WithParameter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::WithParameter(reinterpret_cast<const tlp::WithParameter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_WithParameter(sipSimpleWrapper *);}
static void dealloc_tlp_WithParameter(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_WithParameter(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_WithParameter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_WithParameter(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::WithParameter *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::WithParameter();

            return sipCpp;
        }
    }

    {
        const tlp::WithParameter * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_WithParameter, &a0))
        {
            sipCpp = new tlp::WithParameter(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_WithParameter[] = {
    {SIP_MLNAME_CAST(sipName_addBooleanParameter), meth_tlp_WithParameter_addBooleanParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addBooleanParameter)},
    {SIP_MLNAME_CAST(sipName_addBooleanPropertyParameter), meth_tlp_WithParameter_addBooleanPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addBooleanPropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addColorParameter), meth_tlp_WithParameter_addColorParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addColorParameter)},
    {SIP_MLNAME_CAST(sipName_addColorPropertyParameter), meth_tlp_WithParameter_addColorPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addColorPropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addColorScaleParameter), meth_tlp_WithParameter_addColorScaleParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addColorScaleParameter)},
    {SIP_MLNAME_CAST(sipName_addDoublePropertyParameter), meth_tlp_WithParameter_addDoublePropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addDoublePropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addFloatParameter), meth_tlp_WithParameter_addFloatParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addFloatParameter)},
    {SIP_MLNAME_CAST(sipName_addIntegerParameter), meth_tlp_WithParameter_addIntegerParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addIntegerParameter)},
    {SIP_MLNAME_CAST(sipName_addIntegerPropertyParameter), meth_tlp_WithParameter_addIntegerPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addIntegerPropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addLayoutPropertyParameter), meth_tlp_WithParameter_addLayoutPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addLayoutPropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addPropertyParameter), meth_tlp_WithParameter_addPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addPropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addSizePropertyParameter), meth_tlp_WithParameter_addSizePropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addSizePropertyParameter)},
    {SIP_MLNAME_CAST(sipName_addStringCollectionParameter), meth_tlp_WithParameter_addStringCollectionParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addStringCollectionParameter)},
    {SIP_MLNAME_CAST(sipName_addStringParameter), meth_tlp_WithParameter_addStringParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addStringParameter)},
    {SIP_MLNAME_CAST(sipName_addStringPropertyParameter), meth_tlp_WithParameter_addStringPropertyParameter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_WithParameter_addStringPropertyParameter)}
};

PyDoc_STRVAR(doc_tlp_WithParameter, "This class describes parameters for a plug-in.\n"
    "These parameters can be of multiple types, and are used to generate a GUI \n"
    "that will be shown when the plug-in in invoked by the user.");


sipClassTypeDef sipTypeDef_tulip_tlp_WithParameter = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__WithParameter,
        {0}
    },
    {
        sipNameNr_WithParameter,
        {21, 255, 0},
        15, methods_tlp_WithParameter,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_WithParameter,
    -1,
    -1,
    0,
    0,
    init_tlp_WithParameter,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_WithParameter,
    assign_tlp_WithParameter,
    array_tlp_WithParameter,
    copy_tlp_WithParameter,
    release_tlp_WithParameter,
    cast_tlp_WithParameter,
    0,
    0,
    0
};
