/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:10 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginLoader.sip"
#include <tulip/PluginLoader.h>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPluginLoader.cpp"

#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPluginLoader.cpp"
#line 105 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
#include <list>
#line 34 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPluginLoader.cpp"
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 47 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpPluginLoader.cpp"


class siptlp_PluginLoader : public tlp::PluginLoader
{
public:
    siptlp_PluginLoader();
    siptlp_PluginLoader(const tlp::PluginLoader&);
    virtual ~siptlp_PluginLoader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void start(const std::string&,const std::string&);
    void numberOfFiles(int);
    void loading(const std::string&);
    void loaded(const std::string&,const std::string&,const std::string&,const std::string&,const std::string&,const std::string&,const std::list<tlp::Dependency>&);
    void aborted(const std::string&,const std::string&);
    void finished(bool,const std::string&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_PluginLoader(const siptlp_PluginLoader &);
    siptlp_PluginLoader &operator = (const siptlp_PluginLoader &);

    char sipPyMethods[6];
};

siptlp_PluginLoader::siptlp_PluginLoader(): tlp::PluginLoader(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_PluginLoader::siptlp_PluginLoader(const tlp::PluginLoader& a0): tlp::PluginLoader(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_PluginLoader::~siptlp_PluginLoader()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_PluginLoader::start(const std::string& a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_PluginLoader,sipName_start);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_3(sip_gilstate_t,PyObject *,const std::string&,const std::string&);

    sipVH_tulip_3(sipGILState,sipMeth,a0,a1);
}

void siptlp_PluginLoader::numberOfFiles(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_numberOfFiles);

    if (!sipMeth)
    {
        tlp::PluginLoader::numberOfFiles(a0);
        return;
    }

    extern void sipVH_tulip_6(sip_gilstate_t,PyObject *,int);

    sipVH_tulip_6(sipGILState,sipMeth,a0);
}

void siptlp_PluginLoader::loading(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_PluginLoader,sipName_loading);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_5(sip_gilstate_t,PyObject *,const std::string&);

    sipVH_tulip_5(sipGILState,sipMeth,a0);
}

void siptlp_PluginLoader::loaded(const std::string& a0,const std::string& a1,const std::string& a2,const std::string& a3,const std::string& a4,const std::string& a5,const std::list<tlp::Dependency>& a6)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_PluginLoader,sipName_loaded);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_4(sip_gilstate_t,PyObject *,const std::string&,const std::string&,const std::string&,const std::string&,const std::string&,const std::string&,const std::list<tlp::Dependency>&);

    sipVH_tulip_4(sipGILState,sipMeth,a0,a1,a2,a3,a4,a5,a6);
}

void siptlp_PluginLoader::aborted(const std::string& a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_PluginLoader,sipName_aborted);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_3(sip_gilstate_t,PyObject *,const std::string&,const std::string&);

    sipVH_tulip_3(sipGILState,sipMeth,a0,a1);
}

void siptlp_PluginLoader::finished(bool a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_PluginLoader,sipName_finished);

    if (!sipMeth)
        return;

    extern void sipVH_tulip_2(sip_gilstate_t,PyObject *,bool,const std::string&);

    sipVH_tulip_2(sipGILState,sipMeth,a0,a1);
}


extern "C" {static PyObject *meth_tlp_PluginLoader_start(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_start(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string * a1;
        int a1State = 0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_PluginLoader, sipName_start);
                return NULL;
            }

            sipCpp->start(*a0,*a1);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_start, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_PluginLoader_numberOfFiles(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_numberOfFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::PluginLoader::numberOfFiles(a0) : sipCpp->numberOfFiles(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_numberOfFiles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_PluginLoader_loading(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_loading(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_PluginLoader, sipName_loading);
                return NULL;
            }

            sipCpp->loading(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_loading, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_PluginLoader_loaded(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_loaded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string * a1;
        int a1State = 0;
        const std::string * a2;
        int a2State = 0;
        const std::string * a3;
        int a3State = 0;
        const std::string * a4;
        int a4State = 0;
        const std::string * a5;
        int a5State = 0;
        const std::list<tlp::Dependency> * a6;
        int a6State = 0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1J1J1", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State, sipType_std_string,&a2, &a2State, sipType_std_string,&a3, &a3State, sipType_std_string,&a4, &a4State, sipType_std_string,&a5, &a5State, sipType_std_list_0100tlp_Dependency,&a6, &a6State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_PluginLoader, sipName_loaded);
                return NULL;
            }

            sipCpp->loaded(*a0,*a1,*a2,*a3,*a4,*a5,*a6);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);
            sipReleaseType(const_cast<std::string *>(a3),sipType_std_string,a3State);
            sipReleaseType(const_cast<std::string *>(a4),sipType_std_string,a4State);
            sipReleaseType(const_cast<std::string *>(a5),sipType_std_string,a5State);
            sipReleaseType(const_cast<std::list<tlp::Dependency> *>(a6),sipType_std_list_0100tlp_Dependency,a6State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_loaded, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_PluginLoader_aborted(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_aborted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const std::string * a0;
        int a0State = 0;
        const std::string * a1;
        int a1State = 0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, sipType_std_string,&a0, &a0State, sipType_std_string,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_PluginLoader, sipName_aborted);
                return NULL;
            }

            sipCpp->aborted(*a0,*a1);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_aborted, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_PluginLoader_finished(PyObject *, PyObject *);}
static PyObject *meth_tlp_PluginLoader_finished(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool a0;
        const std::string * a1;
        int a1State = 0;
        tlp::PluginLoader *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BbJ1", &sipSelf, sipType_tlp_PluginLoader, &sipCpp, &a0, sipType_std_string,&a1, &a1State))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_PluginLoader, sipName_finished);
                return NULL;
            }

            sipCpp->finished(a0,*a1);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PluginLoader, sipName_finished, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_PluginLoader(void *, const sipTypeDef *);}
static void *cast_tlp_PluginLoader(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_PluginLoader)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_PluginLoader(void *, int);}
static void release_tlp_PluginLoader(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_PluginLoader *>(sipCppV);
    else
        delete reinterpret_cast<tlp::PluginLoader *>(sipCppV);
}


extern "C" {static void dealloc_tlp_PluginLoader(sipSimpleWrapper *);}
static void dealloc_tlp_PluginLoader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_PluginLoader *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_PluginLoader(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_PluginLoader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_PluginLoader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_PluginLoader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_PluginLoader();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::PluginLoader * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_PluginLoader, &a0))
        {
            sipCpp = new siptlp_PluginLoader(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_PluginLoader[] = {
    {SIP_MLNAME_CAST(sipName_aborted), meth_tlp_PluginLoader_aborted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_finished), meth_tlp_PluginLoader_finished, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loaded), meth_tlp_PluginLoader_loaded, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loading), meth_tlp_PluginLoader_loading, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOfFiles), meth_tlp_PluginLoader_numberOfFiles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_start), meth_tlp_PluginLoader_start, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_tulip_tlp_PluginLoader = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__PluginLoader,
        {0}
    },
    {
        sipNameNr_PluginLoader,
        {21, 255, 0},
        6, methods_tlp_PluginLoader,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    init_tlp_PluginLoader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_PluginLoader,
    0,
    0,
    0,
    release_tlp_PluginLoader,
    cast_tlp_PluginLoader,
    0,
    0,
    0
};
