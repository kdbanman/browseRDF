/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:11:08 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/BiconnectedTest.sip"
#include <tulip/BiconnectedTest.h>
#line 26 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpBiconnectedTest.cpp"

#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 44 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpBiconnectedTest.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 47 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpBiconnectedTest.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 51 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpBiconnectedTest.cpp"


PyDoc_STRVAR(doc_tlp_BiconnectedTest_isBiconnected, "tlp.BiconnectedTest.isBiconnected(graph)\n"
    "\n"
    "Returns :const:`True` if the graph is biconnected (ie. one must remove at least two nodes in order\n"
    "to disconnect the graph), :const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to perform the biconnected test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_BiconnectedTest_isBiconnected(PyObject *, PyObject *);}
static PyObject *meth_tlp_BiconnectedTest_isBiconnected(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::BiconnectedTest::isBiconnected(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BiconnectedTest, sipName_isBiconnected, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_BiconnectedTest_makeBiconnected, "tlp.BiconnectedTest.makeBiconnected(graph)\n"
    "\n"
    "If the graph is not biconnected, adds edges in order to make the graph\n"
    "biconnected. Returns a list of added edges.\n"
    "\n"
    ":param graph: the graph to make biconnected.\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: list of :class:`tlp.edge`");

extern "C" {static PyObject *meth_tlp_BiconnectedTest_makeBiconnected(PyObject *, PyObject *);}
static PyObject *meth_tlp_BiconnectedTest_makeBiconnected(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;
        std::vector<tlp::edge> * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            a1 = new std::vector<tlp::edge>();

            tlp::BiconnectedTest::makeBiconnected(a0,*a1);

            return sipConvertFromNewType(a1,sipType_std_vector_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BiconnectedTest, sipName_makeBiconnected, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_BiconnectedTest(void *, const sipTypeDef *);}
static void *cast_tlp_BiconnectedTest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_BiconnectedTest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_BiconnectedTest(void *, int);}
static void release_tlp_BiconnectedTest(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::BiconnectedTest *>(sipCppV);
}


extern "C" {static void dealloc_tlp_BiconnectedTest(sipSimpleWrapper *);}
static void dealloc_tlp_BiconnectedTest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_BiconnectedTest(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_BiconnectedTest[] = {
    {SIP_MLNAME_CAST(sipName_isBiconnected), meth_tlp_BiconnectedTest_isBiconnected, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_BiconnectedTest_isBiconnected)},
    {SIP_MLNAME_CAST(sipName_makeBiconnected), meth_tlp_BiconnectedTest_makeBiconnected, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_BiconnectedTest_makeBiconnected)}
};


sipClassTypeDef sipTypeDef_tulip_tlp_BiconnectedTest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__BiconnectedTest,
        {0}
    },
    {
        sipNameNr_BiconnectedTest,
        {21, 255, 0},
        2, methods_tlp_BiconnectedTest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_BiconnectedTest,
    0,
    0,
    0,
    release_tlp_BiconnectedTest,
    cast_tlp_BiconnectedTest,
    0,
    0,
    0
};
