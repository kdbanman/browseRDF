/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:10 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 44 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Delaunay.sip"
#include <tulip/Delaunay.h>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVoronoiDiagram.cpp"

#line 222 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/set.sip"
#include <set>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVoronoiDiagram.cpp"
#line 37 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 33 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVoronoiDiagram.cpp"
#line 387 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/pair.sip"
#include <utility>
#line 36 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVoronoiDiagram.cpp"
#line 33 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Coord.sip"
#include <tulip/Coord.h>
#line 39 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVoronoiDiagram.cpp"


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_nbSites, "tlp.VoronoiDiagram.nbSites()\n"
    "\n"
    "Returns the number of voronoi sites.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_nbSites(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_nbSites(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_nbSites, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_nbVertices, "tlp.VoronoiDiagram.nbVertices()\n"
    "\n"
    "Returns the number of voronoi vertices.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_nbVertices(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_nbVertices(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_nbVertices, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_nbEdges, "tlp.VoronoiDiagram.nbEdges()\n"
    "\n"
    "Returns the number of voronoi edges.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_nbEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_nbEdges(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_nbEdges, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_site, "tlp.VoronoiDiagram.site(siteIdx)\n"
    "\n"
    "Returns the ith voronoi site.\n"
    "\n"
    ":param siteIdx: the index of the site to return\n"
    ":type siteIdx: integer\n"
    ":rtype: :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_site(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_site(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_site, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_vertex, "tlp.VoronoiDiagram.vertex(vertexIdx)\n"
    "\n"
    "Returns the ith voronoi vertex.\n"
    "\n"
    ":param vertexIdx: the index of the vertex to return\n"
    ":type vertexIdx: integer\n"
    ":rtype: :class:`tlp.Coord`");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_vertex(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_vertex(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_vertex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_edge, "tlp.VoronoiDiagram.edge(edgeIdx)\n"
    "\n"
    "Returns the ith voronoi edge. An edge is defined by two indexes in the voronoi vertices.\n"
    "\n"
    ":param edgeIdx: the index of the edge to return\n"
    ":type edgeIdx: integer\n"
    ":rtype: (integer, integer)");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_edge(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_edge(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_edge, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_cell, "tlp.VoronoiDiagram.cell(cellIdx)\n"
    "\n"
    "Returns the ith voronoi cell. A cell is defined by a list of indexes in the voronoi vertices.\n"
    "\n"
    ":param cellIdx: the index of the cell to return\n"
    ":type cellIdx: integer\n"
    ":rtype: list of integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_cell(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_cell(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_cell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_degreeOfVertex, "tlp.VoronoiDiagram.degreeOfVertex(vertexIdx)\n"
    "\n"
    "Returns the degree (number of incident edges) of the ith voronoi vertex\n"
    "\n"
    ":param vertexIdx: the index of the vertex on which to return the degree\n"
    ":type vertexIdx: integer\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_degreeOfVertex(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_degreeOfVertex(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_degreeOfVertex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_voronoiEdgesForSite, "tlp.VoronoiDiagram.voronoiEdgesForSite(siteIdx)\n"
    "\n"
    "Returns the voronoi edges surrounding the ith site.\n"
    "\n"
    ":param siteIdx: the index of the site on which to return edges\n"
    ":type siteIdx: integer\n"
    ":rtype: list of (integer, integer)");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_voronoiEdgesForSite(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_voronoiEdgesForSite(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_voronoiEdgesForSite, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_VoronoiDiagram_voronoiCellForSite, "tlp.VoronoiDiagram.voronoiCellForSite(siteIdx)\n"
    "\n"
    "Returns the cell associated to the ith site.\n"
    "\n"
    ":param siteIdx: the index of the site on which to return the cell\n"
    ":type siteIdx: integer\n"
    ":rtype: list of integer");

extern "C" {static PyObject *meth_tlp_VoronoiDiagram_voronoiCellForSite(PyObject *, PyObject *);}
static PyObject *meth_tlp_VoronoiDiagram_voronoiCellForSite(PyObject *, PyObject *)
{

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(NULL, sipName_VoronoiDiagram, sipName_voronoiCellForSite, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_VoronoiDiagram(void *, const sipTypeDef *);}
static void *cast_tlp_VoronoiDiagram(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_VoronoiDiagram)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_VoronoiDiagram(void *, int);}
static void release_tlp_VoronoiDiagram(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::VoronoiDiagram *>(sipCppV);
}


extern "C" {static void dealloc_tlp_VoronoiDiagram(sipSimpleWrapper *);}
static void dealloc_tlp_VoronoiDiagram(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_VoronoiDiagram(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_VoronoiDiagram[] = {
    {SIP_MLNAME_CAST(sipName_cell), meth_tlp_VoronoiDiagram_cell, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_cell)},
    {SIP_MLNAME_CAST(sipName_degreeOfVertex), meth_tlp_VoronoiDiagram_degreeOfVertex, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_degreeOfVertex)},
    {SIP_MLNAME_CAST(sipName_edge), meth_tlp_VoronoiDiagram_edge, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_edge)},
    {SIP_MLNAME_CAST(sipName_nbEdges), meth_tlp_VoronoiDiagram_nbEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_nbEdges)},
    {SIP_MLNAME_CAST(sipName_nbSites), meth_tlp_VoronoiDiagram_nbSites, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_nbSites)},
    {SIP_MLNAME_CAST(sipName_nbVertices), meth_tlp_VoronoiDiagram_nbVertices, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_nbVertices)},
    {SIP_MLNAME_CAST(sipName_site), meth_tlp_VoronoiDiagram_site, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_site)},
    {SIP_MLNAME_CAST(sipName_vertex), meth_tlp_VoronoiDiagram_vertex, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_vertex)},
    {SIP_MLNAME_CAST(sipName_voronoiCellForSite), meth_tlp_VoronoiDiagram_voronoiCellForSite, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_voronoiCellForSite)},
    {SIP_MLNAME_CAST(sipName_voronoiEdgesForSite), meth_tlp_VoronoiDiagram_voronoiEdgesForSite, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_VoronoiDiagram_voronoiEdgesForSite)}
};

PyDoc_STRVAR(doc_tlp_VoronoiDiagram, ".. versionadded:: 3.8\n"
    "\n"
    "That class defines a voronoi diagram. Use the :func:`tlp.voronoiDiagram` function\n"
    "to get an instance of it.");


sipClassTypeDef sipTypeDef_tulip_tlp_VoronoiDiagram = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__VoronoiDiagram,
        {0}
    },
    {
        sipNameNr_VoronoiDiagram,
        {21, 255, 0},
        10, methods_tlp_VoronoiDiagram,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_VoronoiDiagram,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_VoronoiDiagram,
    0,
    0,
    0,
    release_tlp_VoronoiDiagram,
    cast_tlp_VoronoiDiagram,
    0,
    0,
    0
};
