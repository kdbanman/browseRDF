/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:10 2013
 */

#include "sipAPItulip.h"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/SimpleTest.sip"
#include <tulip/SimpleTest.h>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSimpleTest.cpp"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 44 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSimpleTest.cpp"
#line 37 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/vector.sip"
#include <vector>
#line 47 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSimpleTest.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 51 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpSimpleTest.cpp"


PyDoc_STRVAR(doc_tlp_SimpleTest_isSimple, "tlp.SimpleTest.isSimple(graph)\n"
    "\n"
    "Returns :const:`True` if the graph is simple (i.e. it contains no self loops or parallel edges),\n"
    ":const:`False` otherwise.\n"
    "\n"
    ":param graph: the graph on which to perform the simple test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_SimpleTest_isSimple(PyObject *, PyObject *);}
static PyObject *meth_tlp_SimpleTest_isSimple(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;

            sipRes = tlp::SimpleTest::isSimple(a0);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SimpleTest, sipName_isSimple, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_SimpleTest_makeSimple, "tlp.SimpleTest.makeSimple(graph)\n"
    "\n"
    "Makes the graph  simple by removing self loops and parallel edges if any.\n"
    "Returns a list of removed edges.\n"
    "\n"
    ":param graph: the graph to make simple\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: list of :class:`tlp.edge`");

extern "C" {static PyObject *meth_tlp_SimpleTest_makeSimple(PyObject *, PyObject *);}
static PyObject *meth_tlp_SimpleTest_makeSimple(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;
        std::vector<tlp::edge> * a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            a1 = new std::vector<tlp::edge>();

            tlp::SimpleTest::makeSimple(a0,*a1);

            return sipConvertFromNewType(a1,sipType_std_vector_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SimpleTest, sipName_makeSimple, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_SimpleTest_simpleTest, "tlp.SimpleTest.simpleTest(graph)\n"
    "\n"
    "Performs a simple test and returns a tuple with 3 elements. The first element is a boolean indicating the\n"
    "result of the test. The second element is a list of found parallel edges. The third element is a list of\n"
    "found self loops.\n"
    "\n"
    ":param graph: the graph on which to perform the simple test\n"
    ":type graph: :class:`tlp.Graph`\n"
    ":rtype: (boolean, list of :class:`tlp.edge`, list of :class:`tlp.edge`)");

extern "C" {static PyObject *meth_tlp_SimpleTest_simpleTest(PyObject *, PyObject *);}
static PyObject *meth_tlp_SimpleTest_simpleTest(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Graph * a0;
        std::vector<tlp::edge> * a1;
        std::vector<tlp::edge> * a2;

        if (sipParseArgs(&sipParseErr, sipArgs, "J8", sipType_tlp_Graph, &a0))
        {
            bool sipRes;
            a1 = new std::vector<tlp::edge>();
            a2 = new std::vector<tlp::edge>();

            sipRes = tlp::SimpleTest::simpleTest(a0,a1,a2);

            return sipBuildResult(0,"(bNN)",sipRes,a1,sipType_std_vector_0100tlp_edge,NULL,a2,sipType_std_vector_0100tlp_edge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SimpleTest, sipName_simpleTest, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_SimpleTest(void *, const sipTypeDef *);}
static void *cast_tlp_SimpleTest(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_SimpleTest)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_SimpleTest(void *, int);}
static void release_tlp_SimpleTest(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::SimpleTest *>(sipCppV);
}


extern "C" {static void dealloc_tlp_SimpleTest(sipSimpleWrapper *);}
static void dealloc_tlp_SimpleTest(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_SimpleTest(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_SimpleTest[] = {
    {SIP_MLNAME_CAST(sipName_isSimple), meth_tlp_SimpleTest_isSimple, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_SimpleTest_isSimple)},
    {SIP_MLNAME_CAST(sipName_makeSimple), meth_tlp_SimpleTest_makeSimple, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_SimpleTest_makeSimple)},
    {SIP_MLNAME_CAST(sipName_simpleTest), meth_tlp_SimpleTest_simpleTest, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_SimpleTest_simpleTest)}
};


sipClassTypeDef sipTypeDef_tulip_tlp_SimpleTest = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__SimpleTest,
        {0}
    },
    {
        sipNameNr_SimpleTest,
        {21, 255, 0},
        3, methods_tlp_SimpleTest,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_SimpleTest,
    0,
    0,
    0,
    release_tlp_SimpleTest,
    cast_tlp_SimpleTest,
    0,
    0,
    0
};
