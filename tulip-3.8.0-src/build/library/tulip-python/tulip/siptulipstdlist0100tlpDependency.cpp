/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:10 2013
 */

#include "sipAPItulip.h"

#line 105 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
#include <list>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipstdlist0100tlpDependency.cpp"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipstdlist0100tlpDependency.cpp"


extern "C" {static void assign_std_list_0100tlp_Dependency(void *, SIP_SSIZE_T, const void *);}
static void assign_std_list_0100tlp_Dependency(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::list<tlp::Dependency> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::list<tlp::Dependency> *>(sipSrc);
}


extern "C" {static void *array_std_list_0100tlp_Dependency(SIP_SSIZE_T);}
static void *array_std_list_0100tlp_Dependency(SIP_SSIZE_T sipNrElem)
{
    return new std::list<tlp::Dependency>[sipNrElem];
}


extern "C" {static void *copy_std_list_0100tlp_Dependency(const void *, SIP_SSIZE_T);}
static void *copy_std_list_0100tlp_Dependency(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::list<tlp::Dependency>(reinterpret_cast<const std::list<tlp::Dependency> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_list_0100tlp_Dependency(void *, int);}
static void release_std_list_0100tlp_Dependency(void *ptr, int)
{
    delete reinterpret_cast<std::list<tlp::Dependency> *>(ptr);
}



extern "C" {static int convertTo_std_list_0100tlp_Dependency(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_list_0100tlp_Dependency(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::list<tlp::Dependency> **sipCppPtr = reinterpret_cast<std::list<tlp::Dependency> **>(sipCppPtrV);

#line 138 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
   // Check if type is compatible
   if (sipIsErr == NULL) {
   	   if (!PyList_Check(sipPy)) {
          return 0;
       }
       for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
            PyObject *item = PyList_GET_ITEM(sipPy, i);
            if (!sipCanConvertToType(item, sipType_tlp_Dependency, SIP_NOT_NONE)) {
                printErrorMessage("TypeError : object in list of type " + std::string(item->ob_type->tp_name) + " can not be converted to tlp::Dependency");
                return 0;
            }
       }
       return 1;
   }
 
   // Convert Python list of tlp::Dependency to  std::list<tlp::Dependency>
   std::list<tlp::Dependency> *l = new std::list<tlp::Dependency>();
   for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
       int state;
       tlp::Dependency* p = reinterpret_cast<tlp::Dependency*>(sipConvertToType(PyList_GET_ITEM(sipPy, i), sipType_tlp_Dependency, sipTransferObj, SIP_NOT_NONE, &state, sipIsErr));

	   if (*sipIsErr) {
          sipReleaseType(p, sipType_tlp_Dependency, state);
          delete l;
          return 0;
       }		

       l->push_back(*p);

       sipReleaseType(p, sipType_tlp_Dependency, state);       
   }

   *sipCppPtr = l;
   return sipGetState(sipTransferObj);
#line 99 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipstdlist0100tlpDependency.cpp"
}


extern "C" {static PyObject *convertFrom_std_list_0100tlp_Dependency(void *, PyObject *);}
static PyObject *convertFrom_std_list_0100tlp_Dependency(void *sipCppV,PyObject *sipTransferObj)
{
   std::list<tlp::Dependency> *sipCpp = reinterpret_cast<std::list<tlp::Dependency> *>(sipCppV);

#line 109 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/list.sip"
   PyObject *l;

   // Create the Python list of the correct length.
   if ((l = PyList_New(sipCpp -> size())) == NULL) {
       return NULL;
   }

   int i = 0;
   for(std::list<tlp::Dependency>::iterator iter = sipCpp->begin(); iter != sipCpp->end(); iter++) {
       tlp::Dependency cpp = *iter;
       PyObject *pobj;

       // Get the Python wrapper for the Type instance, creating a new
       // one if necessary, and handle any ownership transfer.
       if ((pobj = sipConvertFromType(&cpp, sipType_tlp_Dependency, sipTransferObj)) == NULL) {
           // There was an error so garbage collect the Python list.
           Py_XDECREF(l);
           return NULL;
       }

       // Add the wrapper to the list.
       PyList_SET_ITEM(l, i++, pobj);
   }

   // Return the Python list.
   return l;
#line 135 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptulipstdlist0100tlpDependency.cpp"
}


sipMappedTypeDef sipTypeDef_tulip_std_list_0100tlp_Dependency = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_1315,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_list_0100tlp_Dependency,
    array_std_list_0100tlp_Dependency,
    copy_std_list_0100tlp_Dependency,
    release_std_list_0100tlp_Dependency,
    convertTo_std_list_0100tlp_Dependency,
    convertFrom_std_list_0100tlp_Dependency
};
