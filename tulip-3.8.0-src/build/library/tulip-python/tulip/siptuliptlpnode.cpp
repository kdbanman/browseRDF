/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:33:30 2013
 */

#include "sipAPItulip.h"

#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
#include <tulip/Node.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpnode.cpp"



PyDoc_STRVAR(doc_tlp_node_isValid, "tlp.node.isValid()\n"
    "\n"
    "Returns :const:`True` if the node is a valid one, meaning it is attached to a graph.\n"
    "\n"
    ":rtype: boolean ");

extern "C" {static PyObject *meth_tlp_node_isValid(PyObject *, PyObject *);}
static PyObject *meth_tlp_node_isValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::node *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_node, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isValid();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_node, sipName_isValid, NULL);

    return NULL;
}


extern "C" {static long slot_tlp_node___hash__(PyObject *);}
static long slot_tlp_node___hash__(PyObject *sipSelf)
{
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_node));

    if (!sipCpp)
        return 0;


    {
        {
            long sipRes = 0;

#line 70 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
        return static_cast<long>(sipCpp->id);
#line 62 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpnode.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_tlp_node___repr__(PyObject *);}
static PyObject *slot_tlp_node___repr__(PyObject *sipSelf)
{
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_node));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 58 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
		std::ostringstream oss;
		oss << "<node " << sipCpp->id << ">";
		std::string s = oss.str();
#if PY_MAJOR_VERSION >= 3
        sipRes = PyUnicode_FromString(s.c_str());
#else
        sipRes = PyString_FromString(s.c_str());
#endif
#line 94 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpnode.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_tlp_node___ne__(PyObject *,PyObject *);}
static PyObject *slot_tlp_node___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_node));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_node, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::node::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,ne_slot,sipType_tlp_node,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_node___eq__(PyObject *,PyObject *);}
static PyObject *slot_tlp_node___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_node));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_node, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::node::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,eq_slot,sipType_tlp_node,sipSelf,sipArg);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_node(void *, const sipTypeDef *);}
static void *cast_tlp_node(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_node)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_node(void *, int);}
static void release_tlp_node(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::node *>(sipCppV);
}


extern "C" {static void assign_tlp_node(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_node(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::node *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::node *>(sipSrc);
}


extern "C" {static void *array_tlp_node(SIP_SSIZE_T);}
static void *array_tlp_node(SIP_SSIZE_T sipNrElem)
{
    return new tlp::node[sipNrElem];
}


extern "C" {static void *copy_tlp_node(const void *, SIP_SSIZE_T);}
static void *copy_tlp_node(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::node(reinterpret_cast<const tlp::node *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_node(sipSimpleWrapper *);}
static void dealloc_tlp_node(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_node(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_node(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_node(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::node *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::node();

            return sipCpp;
        }
    }

    {
        uint a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "u", &a0))
        {
            sipCpp = new tlp::node(a0);

            return sipCpp;
        }
    }

    {
        const tlp::node * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_node, &a0))
        {
            sipCpp = new tlp::node(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_node[] = {
    {(void *)slot_tlp_node___hash__, hash_slot},
    {(void *)slot_tlp_node___repr__, repr_slot},
    {(void *)slot_tlp_node___ne__, ne_slot},
    {(void *)slot_tlp_node___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_node[] = {
    {SIP_MLNAME_CAST(sipName_isValid), meth_tlp_node_isValid, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_node_isValid)}
};


extern "C" {static PyObject *varget_tlp_node_id(void *, PyObject *);}
static PyObject *varget_tlp_node_id(void *sipSelf, PyObject *)
{
    uint sipVal;
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipSelf);

    sipVal = sipCpp->id;

    return PyLong_FromUnsignedLong(sipVal);
}


extern "C" {static int varset_tlp_node_id(void *, PyObject *, PyObject *);}
static int varset_tlp_node_id(void *sipSelf, PyObject *sipPy, PyObject *)
{
    uint sipVal;
    tlp::node *sipCpp = reinterpret_cast<tlp::node *>(sipSelf);

    sipVal = (uint)sipLong_AsUnsignedLong(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->id = sipVal;

    return 0;
}

sipVariableDef variables_tlp_node[] = {
    {InstanceVariable, sipName_id, (PyMethodDef *)varget_tlp_node_id, (PyMethodDef *)varset_tlp_node_id, NULL, NULL},
};

PyDoc_STRVAR(doc_tlp_node, "An instance of this class represent a node in a Tulip graph. It encapsulates an integer identifier.\n"
    "Use specific methods in the :class:`tlp.Graph` class to get references on such objects (\n"
    "for instance :meth:`tlp.Graph.addNode`, :meth:`tlp.Graph.getNodes`, :meth:`tlp.Graph.getOutNodes`, ...).\n"
    "Node objects can be used as keys in a Python dictionnary.\n"
    "\n"
    "The node identifier can be accessed through the **id** class member.");


sipClassTypeDef sipTypeDef_tulip_tlp_node = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__node,
        {0}
    },
    {
        sipNameNr_node,
        {21, 255, 0},
        1, methods_tlp_node,
        0, 0,
        1, variables_tlp_node,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_node,
    -1,
    -1,
    0,
    slots_tlp_node,
    init_tlp_node,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_node,
    assign_tlp_node,
    array_tlp_node,
    copy_tlp_node,
    release_tlp_node,
    cast_tlp_node,
    0,
    0,
    0
};
