/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:11 2013
 */

#include "sipAPItulip.h"

#line 32 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
#include <tulip/StringProperty.h>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Graph.sip"
#include <tulip/Graph.h>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 34 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Node.sip"
#include <tulip/Node.h>
#line 37 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Edge.sip"
#include <tulip/tulipconf.h>
#include <tulip/Edge.h>
#line 41 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 44 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Iterator.sip"
#include <tulip/Iterator.h>
#line 47 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
#line 24 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/ObservableProperty.sip"
#include <tulip/ObservableProperty.h>
#line 50 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"


class siptlp_StringProperty : public tlp::StringProperty
{
public:
    siptlp_StringProperty(tlp::Graph *,std::string);
    virtual ~siptlp_StringProperty();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void erase(const tlp::node);
    void erase(const tlp::edge);
    std::string getTypename() const;
    std::string getNodeDefaultStringValue() const;
    std::string getEdgeDefaultStringValue() const;
    std::string getNodeStringValue(const tlp::node) const;
    std::string getEdgeStringValue(const tlp::edge) const;
    bool setNodeStringValue(const tlp::node,const std::string&);
    bool setEdgeStringValue(const tlp::edge,const std::string&);
    bool setAllNodeStringValue(const std::string&);
    bool setAllEdgeStringValue(const std::string&);
    tlp::IteratorNode * getNonDefaultValuatedNodes(const tlp::Graph *) const;
    tlp::IteratorEdge * getNonDefaultValuatedEdges(const tlp::Graph *) const;
    bool copy(tlp::node,tlp::node,tlp::StringProperty *,bool);
    bool copy(tlp::edge,tlp::edge,tlp::StringProperty *,bool);
    void copy(tlp::StringProperty *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_StringProperty(const siptlp_StringProperty &);
    siptlp_StringProperty &operator = (const siptlp_StringProperty &);

    char sipPyMethods[18];
};

siptlp_StringProperty::siptlp_StringProperty(tlp::Graph *a0,std::string a1): tlp::StringProperty(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_StringProperty::~siptlp_StringProperty()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_StringProperty::erase(const tlp::node a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_erase);

    if (!sipMeth)
    {
        tlp::StringProperty::erase(a0);
        return;
    }

    extern void sipVH_tulip_31(sip_gilstate_t,PyObject *,const tlp::node);

    sipVH_tulip_31(sipGILState,sipMeth,a0);
}

void siptlp_StringProperty::erase(const tlp::edge a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_erase);

    if (!sipMeth)
    {
        tlp::StringProperty::erase(a0);
        return;
    }

    extern void sipVH_tulip_30(sip_gilstate_t,PyObject *,const tlp::edge);

    sipVH_tulip_30(sipGILState,sipMeth,a0);
}

std::string siptlp_StringProperty::getTypename() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_getTypename);

    if (!sipMeth)
        return tlp::StringProperty::getTypename();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_StringProperty::getNodeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_getNodeDefaultStringValue);

    if (!sipMeth)
        return tlp::StringProperty::getNodeDefaultStringValue();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_StringProperty::getEdgeDefaultStringValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_getEdgeDefaultStringValue);

    if (!sipMeth)
        return tlp::StringProperty::getEdgeDefaultStringValue();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_StringProperty::getNodeStringValue(const tlp::node a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_getNodeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::getNodeStringValue(a0);

    extern std::string sipVH_tulip_29(sip_gilstate_t,PyObject *,const tlp::node);

    return sipVH_tulip_29(sipGILState,sipMeth,a0);
}

std::string siptlp_StringProperty::getEdgeStringValue(const tlp::edge a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_getEdgeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::getEdgeStringValue(a0);

    extern std::string sipVH_tulip_28(sip_gilstate_t,PyObject *,const tlp::edge);

    return sipVH_tulip_28(sipGILState,sipMeth,a0);
}

bool siptlp_StringProperty::setNodeStringValue(const tlp::node a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setNodeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::setNodeStringValue(a0,a1);

    extern bool sipVH_tulip_27(sip_gilstate_t,PyObject *,const tlp::node,const std::string&);

    return sipVH_tulip_27(sipGILState,sipMeth,a0,a1);
}

bool siptlp_StringProperty::setEdgeStringValue(const tlp::edge a0,const std::string& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setEdgeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::setEdgeStringValue(a0,a1);

    extern bool sipVH_tulip_26(sip_gilstate_t,PyObject *,const tlp::edge,const std::string&);

    return sipVH_tulip_26(sipGILState,sipMeth,a0,a1);
}

bool siptlp_StringProperty::setAllNodeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setAllNodeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::setAllNodeStringValue(a0);

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

bool siptlp_StringProperty::setAllEdgeStringValue(const std::string& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setAllEdgeStringValue);

    if (!sipMeth)
        return tlp::StringProperty::setAllEdgeStringValue(a0);

    extern bool sipVH_tulip_25(sip_gilstate_t,PyObject *,const std::string&);

    return sipVH_tulip_25(sipGILState,sipMeth,a0);
}

tlp::IteratorNode * siptlp_StringProperty::getNonDefaultValuatedNodes(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_getNonDefaultValuatedNodes);

    if (!sipMeth)
        return tlp::StringProperty::getNonDefaultValuatedNodes(a0);

    extern tlp::IteratorNode * sipVH_tulip_24(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_24(sipGILState,sipMeth,a0);
}

tlp::IteratorEdge * siptlp_StringProperty::getNonDefaultValuatedEdges(const tlp::Graph *a0) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_getNonDefaultValuatedEdges);

    if (!sipMeth)
        return tlp::StringProperty::getNonDefaultValuatedEdges(a0);

    extern tlp::IteratorEdge * sipVH_tulip_23(sip_gilstate_t,PyObject *,const tlp::Graph *);

    return sipVH_tulip_23(sipGILState,sipMeth,a0);
}

bool siptlp_StringProperty::copy(tlp::node a0,tlp::node a1,tlp::StringProperty *a2,bool a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
        return tlp::StringProperty::copy(a0,a1,a2,a3);

    extern bool sipVH_tulip_52(sip_gilstate_t,PyObject *,tlp::node,tlp::node,tlp::StringProperty *,bool);

    return sipVH_tulip_52(sipGILState,sipMeth,a0,a1,a2,a3);
}

bool siptlp_StringProperty::copy(tlp::edge a0,tlp::edge a1,tlp::StringProperty *a2,bool a3)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
        return tlp::StringProperty::copy(a0,a1,a2,a3);

    extern bool sipVH_tulip_51(sip_gilstate_t,PyObject *,tlp::edge,tlp::edge,tlp::StringProperty *,bool);

    return sipVH_tulip_51(sipGILState,sipMeth,a0,a1,a2,a3);
}

void siptlp_StringProperty::copy(tlp::StringProperty *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_copy);

    if (!sipMeth)
    {
        tlp::StringProperty::copy(a0);
        return;
    }

    extern void sipVH_tulip_50(sip_gilstate_t,PyObject *,tlp::StringProperty *);

    sipVH_tulip_50(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_StringProperty_setAllNodeValue, "tlp.StringProperty.setAllNodeValue(val)\n"
    "\n"
    "Sets the same value on the whole set of nodes.\n"
    "\n"
    ":param val: the value to set on the nodes.\n"
    ":type val: string");

extern "C" {static PyObject *meth_tlp_StringProperty_setAllNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setAllNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setAllNodeValue(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setAllNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_setAllEdgeValue, "tlp.StringProperty.setAllEdgeValue(val)\n"
    "\n"
    "Sets the same value on the whole set of edges.\n"
    "\n"
    ":param val: the value to set on the edges.\n"
    ":type val: string");

extern "C" {static PyObject *meth_tlp_StringProperty_setAllEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setAllEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setAllEdgeValue(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setAllEdgeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_getNodeDefaultValue, "tlp.StringProperty.getNodeDefaultValue()\n"
    "\n"
    "Returns the default value associated to the nodes.\n"
    "\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_StringProperty_getNodeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNodeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getNodeDefaultValue());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNodeDefaultValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_getEdgeDefaultValue, "tlp.StringProperty.getEdgeDefaultValue()\n"
    "\n"
    "Returns the default value associated to the edges.\n"
    "\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_StringProperty_getEdgeDefaultValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getEdgeDefaultValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getEdgeDefaultValue());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getEdgeDefaultValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_getNodeValue, "tlp.StringProperty.getNodeValue(node)\n"
    "\n"
    "Returns the value associated to a particular node.\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":rtype: string\n"
    ":throws: an exception if the node does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_StringProperty_getNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            std::string *sipRes = 0;
            int sipIsErr = 0;

#line 106 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipRes = sipCpp->getNodeValue(*a0);
#else
		sipRes = new std::string(sipCpp->getNodeValue(*a0));
#endif		
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 514 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_getEdgeValue, "tlp.StringProperty.getEdgeValue(edge) \n"
    "\n"
    "Returns the value associated to a particular edge.\n"
    "\n"
    ":param edge: an existing edge\n"
    ":type edge: :class:`tlp.edge`\n"
    ":rtype: string\n"
    ":throws: an exception if the edge does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_StringProperty_getEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            std::string *sipRes = 0;
            int sipIsErr = 0;

#line 132 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipRes = sipCpp->getEdgeValue(*a0);
#else
		sipRes = new std::string(sipCpp->getEdgeValue(*a0));
#endif		
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 563 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getEdgeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_setNodeValue, "tlp.StringProperty.setNodeValue(node, val)\n"
    "\n"
    "Sets the value of a particular node.\n"
    "\n"
    ":param node: an existing node\n"
    ":type node: :class:`tlp.node`\n"
    ":param val: the value to set on the node\n"
    ":type val: string\n"
    ":throws: an exception if the node does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_StringProperty_setNodeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setNodeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0, sipType_std_string,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 159 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipCpp->setNodeValue(*a0, a1);
#else
		sipCpp->setNodeValue(*a0, *a1);
#endif		
	} else {
		sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
	}
#line 614 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setNodeValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_setEdgeValue, "tlp.StringProperty.setEdgeValue(edge, val)\n"
    "\n"
    "Sets the value of a particular edge.\n"
    "\n"
    ":param edge: an existing edge\n"
    ":type edge: :class:`tlp.edge`\n"
    ":param val: the value to set on the edge\n"
    ":type val: string\n"
    ":throws: an exception if the edge does not belong to the graph attached to the property");

extern "C" {static PyObject *meth_tlp_StringProperty_setEdgeValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setEdgeValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::edge * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_std_string,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 186 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE	
		sipCpp->setEdgeValue(*a0, a1);
#else
		sipCpp->setEdgeValue(*a0, *a1);
#endif		
	} else {
		sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
	}
#line 667 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setEdgeValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_erase(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_erase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::StringProperty::erase(*a0) : sipCpp->erase(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::edge * a0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::StringProperty::erase(*a0) : sipCpp->erase(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_erase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getTypename(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getTypename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::StringProperty::getTypename() : sipCpp->getTypename()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getTypename, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getName(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getNodeDefaultStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNodeDefaultStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::StringProperty::getNodeDefaultStringValue() : sipCpp->getNodeDefaultStringValue()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNodeDefaultStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getEdgeDefaultStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getEdgeDefaultStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_StringProperty, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::StringProperty::getEdgeDefaultStringValue() : sipCpp->getEdgeDefaultStringValue()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getEdgeDefaultStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::StringProperty::getNodeStringValue(*a0) : sipCpp->getNodeStringValue(*a0)));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::edge * a0;
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::StringProperty::getEdgeStringValue(*a0) : sipCpp->getEdgeStringValue(*a0)));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_setNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::node * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0, sipType_std_string,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::setNodeStringValue(*a0,*a1) : sipCpp->setNodeStringValue(*a0,*a1));
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_setEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::edge * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_std_string,&a1, &a1State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::setEdgeStringValue(*a0,*a1) : sipCpp->setEdgeStringValue(*a0,*a1));
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_setAllNodeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setAllNodeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::string * a0;
        int a0State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::setAllNodeStringValue(*a0) : sipCpp->setAllNodeStringValue(*a0));
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setAllNodeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_setAllEdgeStringValue(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_setAllEdgeStringValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::string * a0;
        int a0State = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::setAllEdgeStringValue(*a0) : sipCpp->setAllEdgeStringValue(*a0));
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_setAllEdgeStringValue, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getNonDefaultValuatedNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNonDefaultValuatedNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Graph * a0 = 0;
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::IteratorNode *sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::getNonDefaultValuatedNodes(a0) : sipCpp->getNonDefaultValuatedNodes(a0));

            return sipConvertFromType(sipRes,sipType_tlp_IteratorNode,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNonDefaultValuatedNodes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_StringProperty_getNonDefaultValuatedEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_getNonDefaultValuatedEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Graph * a0 = 0;
        const tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|J8", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_Graph, &a0))
        {
            tlp::IteratorEdge *sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::getNonDefaultValuatedEdges(a0) : sipCpp->getNonDefaultValuatedEdges(a0));

            return sipConvertFromType(sipRes,sipType_tlp_IteratorEdge,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_getNonDefaultValuatedEdges, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_StringProperty_copy, "tlp.StringProperty.copy(nodeDst, nodeSrc, prop[, ifNotDefault=False])\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the value hold by a property on a node to another node on this property.\n"
    "\n"
    ":param nodeDst: the node to copy the value to.\n"
    ":type nodeDst: :class:`tlp.node`\n"
    ":param nodeSrc: the node to copy the value from.\n"
    ":type nodeSrc: :class:`tlp.node`\n"
    ":param prop: the property holding the value to copy.\n"
    ":type prop: :class:`tlp.StringProperty`\n"
    ":param ifNotDefault: whether to ignore default-valuated nodes or not. Defaults to :const:`False`.\n"
    ":type ifNotDefault: boolean\n"
    "tlp.StringProperty.copy(edgeDst, edgeSrc, prop[, ifNotDefault=False])\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the value hold by a property on an edge to another edge on this property.\n"
    "\n"
    ":param edgeDst: the node to copy the value to.\n"
    ":type edgeDst: :class:`tlp.edge`\n"
    ":param edgeSrc: the node to copy the value from.\n"
    ":type edgeSrc: :class:`tlp.edge`\n"
    ":param prop: the property holding the value to copy.\n"
    ":type prop: :class:`tlp.StringProperty`\n"
    ":param ifNotDefault: whether to ignore default-valuated nodes or not. Defaults to :const:`False`.\n"
    ":type ifNotDefault: boolean\n"
    "tlp.StringProperty.copy(prop)\n"
    "\n"
    ".. versionadded:: 3.8\n"
    "\n"
    "Copies the values hold by a property on this property.\n"
    "\n"
    ":param prop: the property to copy\n"
    ":type prop: :class:`tlp.StringProperty`");

extern "C" {static PyObject *meth_tlp_StringProperty_copy(PyObject *, PyObject *);}
static PyObject *meth_tlp_StringProperty_copy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::node * a0;
        tlp::node * a1;
        tlp::StringProperty * a2;
        bool a3 = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J8|b", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_node, &a0, sipType_tlp_node, &a1, sipType_tlp_StringProperty, &a2, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::copy(*a0,*a1,a2,a3) : sipCpp->copy(*a0,*a1,a2,a3));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        tlp::edge * a0;
        tlp::edge * a1;
        tlp::StringProperty * a2;
        bool a3 = 0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J8|b", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_edge, &a0, sipType_tlp_edge, &a1, sipType_tlp_StringProperty, &a2, &a3))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::StringProperty::copy(*a0,*a1,a2,a3) : sipCpp->copy(*a0,*a1,a2,a3));

            return PyBool_FromLong(sipRes);
        }
    }

    {
        tlp::StringProperty * a0;
        tlp::StringProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_StringProperty, &sipCpp, sipType_tlp_StringProperty, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::StringProperty::copy(a0) : sipCpp->copy(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName_copy, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_StringProperty___repr__(PyObject *);}
static PyObject *slot_tlp_StringProperty___repr__(PyObject *sipSelf)
{
    tlp::StringProperty *sipCpp = reinterpret_cast<tlp::StringProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_StringProperty));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 262 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	std::ostringstream oss;
	oss << "<String property " << sipCpp->getName() << ">";
	std::string s = oss.str();
#if PY_MAJOR_VERSION >= 3
    sipRes = PyUnicode_FromString(s.c_str());
#else
    sipRes = PyString_FromString(s.c_str());
#endif
#line 1172 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_tlp_StringProperty___setitem__(PyObject *,PyObject *);}
static int slot_tlp_StringProperty___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::StringProperty *sipCpp = reinterpret_cast<tlp::StringProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_StringProperty));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;
        const std::string * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_tlp_node, &a0, sipType_std_string,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 216 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
     	sipCpp->setNodeValue(*a0, a1);
#else
		sipCpp->setNodeValue(*a0, *a1);
#endif     	
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    } 
#line 1211 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    {
        const tlp::edge * a0;
        const std::string * a1;
        int a1State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "J9J1", sipType_tlp_edge, &a0, sipType_std_string,&a1, &a1State))
        {
            int sipIsErr = 0;

#line 247 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {	
#ifdef PROPERTY_BASE_TYPE	
     	sipCpp->setEdgeValue(*a0, a1);
#else
		sipCpp->setEdgeValue(*a0, *a1);
#endif     	
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    } 
#line 1240 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_StringProperty___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_StringProperty___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::StringProperty *sipCpp = reinterpret_cast<tlp::StringProperty *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_StringProperty));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::node * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_node, &a0))
        {
            std::string *sipRes = 0;
            int sipIsErr = 0;

#line 201 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
        sipRes = sipCpp->getNodeValue(*a0);
#else
        sipRes = new std::string(sipCpp->getNodeValue(*a0));
#endif     	
    } else {
    	sipIsErr = throwInvalidNodeException(sipCpp->getGraph(), *a0);
    }
#line 1285 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    {
        const tlp::edge * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_edge, &a0))
        {
            std::string *sipRes = 0;
            int sipIsErr = 0;

#line 231 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/StringProperty.sip"
	if (sipCpp->getGraph()->isElement(*a0)) {
#ifdef PROPERTY_BASE_TYPE		
     	sipRes = sipCpp->getEdgeValue(*a0);
#else
		sipRes = new std::string(sipCpp->getEdgeValue(*a0));
#endif     	
    } else {
    	sipIsErr = throwInvalidEdgeException(sipCpp->getGraph(), *a0);
    }
     
#line 1313 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpStringProperty.cpp"

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_StringProperty, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_StringProperty(void *, const sipTypeDef *);}
static void *cast_tlp_StringProperty(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_StringProperty)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_PropertyInterface)->ctd_cast((tlp::PropertyInterface *)(tlp::StringProperty *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_StringProperty(void *, int);}
static void release_tlp_StringProperty(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_StringProperty *>(sipCppV);
    else
        delete reinterpret_cast<tlp::StringProperty *>(sipCppV);
}


extern "C" {static void dealloc_tlp_StringProperty(sipSimpleWrapper *);}
static void dealloc_tlp_StringProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_StringProperty *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_StringProperty(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_StringProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_StringProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_StringProperty *sipCpp = 0;

    {
        tlp::Graph * a0;
        std::string a1def = "";
        std::string * a1 = &a1def;
        int a1State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8|J1", sipType_tlp_Graph, &a0, sipType_std_string,&a1, &a1State))
        {
            sipCpp = new siptlp_StringProperty(a0,*a1);
            sipReleaseType(a1,sipType_std_string,a1State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_StringProperty[] = {{85, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_StringProperty[] = {
    {(void *)slot_tlp_StringProperty___repr__, repr_slot},
    {(void *)slot_tlp_StringProperty___setitem__, setitem_slot},
    {(void *)slot_tlp_StringProperty___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_StringProperty[] = {
    {SIP_MLNAME_CAST(sipName_copy), meth_tlp_StringProperty_copy, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_copy)},
    {SIP_MLNAME_CAST(sipName_erase), meth_tlp_StringProperty_erase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeDefaultStringValue), meth_tlp_StringProperty_getEdgeDefaultStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeDefaultValue), meth_tlp_StringProperty_getEdgeDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_getEdgeDefaultValue)},
    {SIP_MLNAME_CAST(sipName_getEdgeStringValue), meth_tlp_StringProperty_getEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getEdgeValue), meth_tlp_StringProperty_getEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_getEdgeValue)},
    {SIP_MLNAME_CAST(sipName_getName), meth_tlp_StringProperty_getName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeDefaultStringValue), meth_tlp_StringProperty_getNodeDefaultStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeDefaultValue), meth_tlp_StringProperty_getNodeDefaultValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_getNodeDefaultValue)},
    {SIP_MLNAME_CAST(sipName_getNodeStringValue), meth_tlp_StringProperty_getNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNodeValue), meth_tlp_StringProperty_getNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_getNodeValue)},
    {SIP_MLNAME_CAST(sipName_getNonDefaultValuatedEdges), meth_tlp_StringProperty_getNonDefaultValuatedEdges, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNonDefaultValuatedNodes), meth_tlp_StringProperty_getNonDefaultValuatedNodes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTypename), meth_tlp_StringProperty_getTypename, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllEdgeStringValue), meth_tlp_StringProperty_setAllEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllEdgeValue), meth_tlp_StringProperty_setAllEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_setAllEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setAllNodeStringValue), meth_tlp_StringProperty_setAllNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setAllNodeValue), meth_tlp_StringProperty_setAllNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_setAllNodeValue)},
    {SIP_MLNAME_CAST(sipName_setEdgeStringValue), meth_tlp_StringProperty_setEdgeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setEdgeValue), meth_tlp_StringProperty_setEdgeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_setEdgeValue)},
    {SIP_MLNAME_CAST(sipName_setNodeStringValue), meth_tlp_StringProperty_setNodeStringValue, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNodeValue), meth_tlp_StringProperty_setNodeValue, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_StringProperty_setNodeValue)}
};

PyDoc_STRVAR(doc_tlp_StringProperty, "Bases: :class:`tlp.PropertyInterface`");


sipClassTypeDef sipTypeDef_tulip_tlp_StringProperty = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_tlp__StringProperty,
        {0}
    },
    {
        sipNameNr_StringProperty,
        {21, 255, 0},
        22, methods_tlp_StringProperty,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_StringProperty,
    -1,
    -1,
    supers_tlp_StringProperty,
    slots_tlp_StringProperty,
    init_tlp_StringProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_StringProperty,
    0,
    0,
    0,
    release_tlp_StringProperty,
    cast_tlp_StringProperty,
    0,
    0,
    0
};
