/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:11:08 2013
 */

#include "sipAPItulip.h"




extern "C" {static PyObject *meth_tlp_Vec4i_fill(PyObject *, PyObject *);}
static PyObject *meth_tlp_Vec4i_fill(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::Vec4i *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_Vec4i, &sipCpp, &a0))
        {
            tlp::Vec4i *sipRes;

            sipRes = &sipCpp->fill(a0);

            return sipConvertFromType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName_fill, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_tlp_Vec4i___le__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___le__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->tlp::Vec4i::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,le_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___ge__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___ge__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = !sipCpp->tlp::Vec4i::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,ge_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___repr__(PyObject *);}
static PyObject *slot_tlp_Vec4i___repr__(PyObject *sipSelf)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;


    {
        {
            PyObject * sipRes = 0;

#line 374 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		std::ostringstream oss;
		oss << *sipCpp;
		std::string s = oss.str();
		s[0] = '[';
		s[s.size() - 1] = ']';
#if PY_MAJOR_VERSION >= 3
        sipRes = PyUnicode_FromString(s.c_str());
#else
        sipRes = PyString_FromString(s.c_str());
#endif
#line 127 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec4i.cpp"

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_tlp_Vec4i___eq__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___eq__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec4i::operator==(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,eq_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___ne__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___ne__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec4i::operator!=(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,ne_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___lt__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___lt__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec4i::operator<(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,lt_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___gt__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___gt__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            bool sipRes;

            sipRes = sipCpp->tlp::Vec4i::operator>(*a0);

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,gt_slot,sipType_tlp_Vec4i,sipSelf,sipArg);
}


extern "C" {static PyObject *slot_tlp_Vec4i___xor__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___xor__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        const tlp::Vec4i * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec4i, &a0, sipType_tlp_Vec4i, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 ^ *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,xor_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec4i___div__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___div__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        const tlp::Vec4i * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec4i, &a0, sipType_tlp_Vec4i, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 / *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    {
        tlp::Vec4i * a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_tlp_Vec4i, &a0, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 / a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,div_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec4i___sub__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___sub__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        const tlp::Vec4i * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec4i, &a0, sipType_tlp_Vec4i, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 - *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    {
        tlp::Vec4i * a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_tlp_Vec4i, &a0, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 - a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,sub_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec4i___add__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___add__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        const tlp::Vec4i * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec4i, &a0, sipType_tlp_Vec4i, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 + *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    {
        tlp::Vec4i * a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_tlp_Vec4i, &a0, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 + a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,add_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec4i___mul__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___mul__(PyObject *sipArg0,PyObject *sipArg1)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        const tlp::Vec4i * a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9J9", sipType_tlp_Vec4i, &a0, sipType_tlp_Vec4i, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 * *a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    {
        tlp::Vec4i * a0;
        int a1;

        if (sipParsePair(&sipParseErr, sipArg0, sipArg1, "J9i", sipType_tlp_Vec4i, &a0, &a1))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i((*a0 * a1));

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI_tulip,mul_slot,NULL,sipArg0,sipArg1);
}


extern "C" {static PyObject *slot_tlp_Vec4i___ixor__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___ixor__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec4i)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp->tlp::Vec4i::operator^=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec4i___isub__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___isub__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec4i)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp->tlp::Vec4i::operator-=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp->tlp::Vec4i::operator-=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec4i___iadd__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___iadd__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec4i)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp->tlp::Vec4i::operator+=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp->tlp::Vec4i::operator+=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec4i___idiv__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___idiv__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec4i)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp->tlp::Vec4i::operator/=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp->tlp::Vec4i::operator/=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static PyObject *slot_tlp_Vec4i___imul__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___imul__(PyObject *sipSelf,PyObject *sipArg)
{
    if (!PyObject_TypeCheck(sipSelf, sipTypeAsPyTypeObject(sipType_tlp_Vec4i)))
    {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }

    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        int a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1i", &a0))
        {
            sipCpp->tlp::Vec4i::operator*=(a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    {
        const tlp::Vec4i * a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp->tlp::Vec4i::operator*=(*a0);

            Py_INCREF(sipSelf);
            return sipSelf;
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    PyErr_Clear();

    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


extern "C" {static int slot_tlp_Vec4i___setitem__(PyObject *,PyObject *);}
static int slot_tlp_Vec4i___setitem__(PyObject *sipSelf,PyObject *sipArgs)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;

        if (sipParseArgs(&sipParseErr, sipArgs, "ii", &a0, &a1))
        {
            int sipIsErr = 0;

#line 339 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
	if (a0 < 4)
		(*sipCpp)[a0] = a1;
	else
		sipIsErr = 1;	
#line 732 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec4i.cpp"

            if (sipIsErr)
                return -1;

            return 0;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName___setitem__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_tlp_Vec4i___getitem__(PyObject *,PyObject *);}
static PyObject *slot_tlp_Vec4i___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
    tlp::Vec4i *sipCpp = reinterpret_cast<tlp::Vec4i *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_tlp_Vec4i));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        uint a0;

        if (sipParseArgs(&sipParseErr, sipArg, "1u", &a0))
        {
            int sipRes;

            sipRes = (*sipCpp)[a0];

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Vec4i, sipName___getitem__, NULL);

    return 0;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_Vec4i(void *, const sipTypeDef *);}
static void *cast_tlp_Vec4i(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_Vec4i)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_Vec4i(void *, int);}
static void release_tlp_Vec4i(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::Vec4i *>(sipCppV);
}


extern "C" {static void assign_tlp_Vec4i(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_Vec4i(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::Vec4i *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::Vec4i *>(sipSrc);
}


extern "C" {static void *array_tlp_Vec4i(SIP_SSIZE_T);}
static void *array_tlp_Vec4i(SIP_SSIZE_T sipNrElem)
{
    return new tlp::Vec4i[sipNrElem];
}


extern "C" {static void *copy_tlp_Vec4i(const void *, SIP_SSIZE_T);}
static void *copy_tlp_Vec4i(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::Vec4i(reinterpret_cast<const tlp::Vec4i *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_Vec4i(sipSimpleWrapper *);}
static void dealloc_tlp_Vec4i(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_Vec4i(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_Vec4i(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_Vec4i(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::Vec4i *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::Vec4i();

            return sipCpp;
        }
    }

    {
        int a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "i", &a0))
        {
#line 316 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		sipCpp = new tlp::Vec4i();
		(*sipCpp)[0] = a0;
		(*sipCpp)[1] = a0;
		(*sipCpp)[2] = a0;
		(*sipCpp)[3] = a0;
#line 853 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec4i.cpp"

            return sipCpp;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "iiii", &a0, &a1, &a2, &a3))
        {
#line 325 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/Vector.sip"
		sipCpp = new tlp::Vec4i();
		(*sipCpp)[0] = a0;
		(*sipCpp)[1] = a1;
		(*sipCpp)[2] = a2;
		(*sipCpp)[2] = a3;
		
#line 874 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpVec4i.cpp"

            return sipCpp;
        }
    }

    {
        const tlp::Vec4i * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Vec4i, &a0))
        {
            sipCpp = new tlp::Vec4i(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_tlp_Vec4i[] = {
    {(void *)slot_tlp_Vec4i___le__, le_slot},
    {(void *)slot_tlp_Vec4i___ge__, ge_slot},
    {(void *)slot_tlp_Vec4i___repr__, repr_slot},
    {(void *)slot_tlp_Vec4i___eq__, eq_slot},
    {(void *)slot_tlp_Vec4i___ne__, ne_slot},
    {(void *)slot_tlp_Vec4i___lt__, lt_slot},
    {(void *)slot_tlp_Vec4i___gt__, gt_slot},
    {(void *)slot_tlp_Vec4i___xor__, xor_slot},
    {(void *)slot_tlp_Vec4i___div__, div_slot},
    {(void *)slot_tlp_Vec4i___sub__, sub_slot},
    {(void *)slot_tlp_Vec4i___add__, add_slot},
    {(void *)slot_tlp_Vec4i___mul__, mul_slot},
    {(void *)slot_tlp_Vec4i___ixor__, ixor_slot},
    {(void *)slot_tlp_Vec4i___isub__, isub_slot},
    {(void *)slot_tlp_Vec4i___iadd__, iadd_slot},
    {(void *)slot_tlp_Vec4i___idiv__, idiv_slot},
    {(void *)slot_tlp_Vec4i___imul__, imul_slot},
    {(void *)slot_tlp_Vec4i___setitem__, setitem_slot},
    {(void *)slot_tlp_Vec4i___getitem__, getitem_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_tlp_Vec4i[] = {
    {SIP_MLNAME_CAST(sipName_fill), meth_tlp_Vec4i_fill, METH_VARARGS, NULL}
};

PyDoc_STRVAR(doc_tlp_Vec4i, "This class represents a vector with 4 integer components.\n"
    "Constructors, operators and methods are similar to those from the :class:`tlp.Vec3f` class. ");


sipClassTypeDef sipTypeDef_tulip_tlp_Vec4i = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__Vec4i,
        {0}
    },
    {
        sipNameNr_Vec4i,
        {21, 255, 0},
        1, methods_tlp_Vec4i,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_Vec4i,
    -1,
    -1,
    0,
    slots_tlp_Vec4i,
    init_tlp_Vec4i,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_Vec4i,
    assign_tlp_Vec4i,
    array_tlp_Vec4i,
    copy_tlp_Vec4i,
    release_tlp_Vec4i,
    cast_tlp_Vec4i,
    0,
    0,
    0
};
