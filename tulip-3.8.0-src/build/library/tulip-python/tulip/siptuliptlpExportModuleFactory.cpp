/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:11:08 2013
 */

#include "sipAPItulip.h"

#line 96 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/ExportModule.sip"
#include <tulip/ExportModule.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpExportModuleFactory.cpp"

#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 17 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpExportModuleFactory.cpp"
#line 34 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/ExportModule.sip"
#include <tulip/ExportModule.h>
#line 20 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpExportModuleFactory.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/PluginContext.sip"
#include <tulip/PluginContext.h>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpExportModuleFactory.cpp"


class siptlp_ExportModuleFactory : public tlp::ExportModuleFactory
{
public:
    siptlp_ExportModuleFactory();
    siptlp_ExportModuleFactory(const tlp::ExportModuleFactory&);
    virtual ~siptlp_ExportModuleFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    tlp::ExportModule * createPluginObject(tlp::AlgorithmContext);
    std::string getMajor();
    std::string getMinor();
    std::string getTulipMajor();
    std::string getTulipMinor();
    std::string getName() const;
    std::string getGroup() const;
    std::string getAuthor() const;
    std::string getDate() const;
    std::string getInfo() const;
    std::string getRelease() const;
    std::string getTulipRelease() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_ExportModuleFactory(const siptlp_ExportModuleFactory &);
    siptlp_ExportModuleFactory &operator = (const siptlp_ExportModuleFactory &);

    char sipPyMethods[16];
};

siptlp_ExportModuleFactory::siptlp_ExportModuleFactory(): tlp::ExportModuleFactory(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_ExportModuleFactory::siptlp_ExportModuleFactory(const tlp::ExportModuleFactory& a0): tlp::ExportModuleFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_ExportModuleFactory::~siptlp_ExportModuleFactory()
{
    sipCommonDtor(sipPySelf);
}

tlp::ExportModule * siptlp_ExportModuleFactory::createPluginObject(tlp::AlgorithmContext a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_ExportModuleFactory,sipName_createPluginObject);

    if (!sipMeth)
        return 0;

    extern tlp::ExportModule * sipVH_tulip_74(sip_gilstate_t,PyObject *,tlp::AlgorithmContext);

    return sipVH_tulip_74(sipGILState,sipMeth,a0);
}

std::string siptlp_ExportModuleFactory::getMajor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_getMajor);

    if (!sipMeth)
        return tlp::ExportModuleFactory::getMajor();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getMinor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_getMinor);

    if (!sipMeth)
        return tlp::ExportModuleFactory::getMinor();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getTulipMajor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_getTulipMajor);

    if (!sipMeth)
        return tlp::ExportModuleFactory::getTulipMajor();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getTulipMinor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_getTulipMinor);

    if (!sipMeth)
        return tlp::ExportModuleFactory::getTulipMinor();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,sipName_ExportModuleFactory,sipName_getName);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getGroup() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_ExportModuleFactory,sipName_getGroup);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getAuthor() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_ExportModuleFactory,sipName_getAuthor);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getDate() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_ExportModuleFactory,sipName_getDate);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getInfo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_ExportModuleFactory,sipName_getInfo);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getRelease() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_ExportModuleFactory,sipName_getRelease);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}

std::string siptlp_ExportModuleFactory::getTulipRelease() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_ExportModuleFactory,sipName_getTulipRelease);

    if (!sipMeth)
        return std::string();

    extern std::string sipVH_tulip_14(sip_gilstate_t,PyObject *);

    return sipVH_tulip_14(sipGILState,sipMeth);
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_createPluginObject(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_createPluginObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        tlp::AlgorithmContext * a0;
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp, sipType_tlp_AlgorithmContext, &a0))
        {
            tlp::ExportModule *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_ExportModuleFactory, sipName_createPluginObject);
                return NULL;
            }

            sipRes = sipCpp->createPluginObject(*a0);

            return sipConvertFromNewType(sipRes,sipType_tlp_ExportModule,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_createPluginObject, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_getMajor(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_getMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::ExportModuleFactory::getMajor() : sipCpp->getMajor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_getMajor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_getMinor(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_getMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::ExportModuleFactory::getMinor() : sipCpp->getMinor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_getMinor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_getTulipMajor(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_getTulipMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::ExportModuleFactory::getTulipMajor() : sipCpp->getTulipMajor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_getTulipMajor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_getTulipMinor(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_getTulipMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::ExportModuleFactory::getTulipMinor() : sipCpp->getTulipMinor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_getTulipMinor, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_ExportModuleFactory_registerPlugin(PyObject *, PyObject *);}
static PyObject *meth_tlp_ExportModuleFactory_registerPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::ExportModuleFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_ExportModuleFactory, &sipCpp))
        {
#line 114 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip/ExportModule.sip"
	sipCpp->initFactory();
	sipCpp->factory->registerPlugin(sipCpp);
#line 407 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip/siptuliptlpExportModuleFactory.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ExportModuleFactory, sipName_registerPlugin, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_ExportModuleFactory(void *, const sipTypeDef *);}
static void *cast_tlp_ExportModuleFactory(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_ExportModuleFactory)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_PluginInfoInterface)->ctd_cast((tlp::PluginInfoInterface *)(tlp::ExportModuleFactory *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_ExportModuleFactory(void *, int);}
static void release_tlp_ExportModuleFactory(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_ExportModuleFactory *>(sipCppV);
    else
        delete reinterpret_cast<tlp::ExportModuleFactory *>(sipCppV);
}


extern "C" {static void dealloc_tlp_ExportModuleFactory(sipSimpleWrapper *);}
static void dealloc_tlp_ExportModuleFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_ExportModuleFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_ExportModuleFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_ExportModuleFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_ExportModuleFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_ExportModuleFactory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_ExportModuleFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::ExportModuleFactory * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_ExportModuleFactory, &a0))
        {
            sipCpp = new siptlp_ExportModuleFactory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_ExportModuleFactory[] = {{81, 255, 1}};


static PyMethodDef methods_tlp_ExportModuleFactory[] = {
    {SIP_MLNAME_CAST(sipName_createPluginObject), meth_tlp_ExportModuleFactory_createPluginObject, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getMajor), meth_tlp_ExportModuleFactory_getMajor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getMinor), meth_tlp_ExportModuleFactory_getMinor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTulipMajor), meth_tlp_ExportModuleFactory_getTulipMajor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTulipMinor), meth_tlp_ExportModuleFactory_getTulipMinor, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerPlugin), meth_tlp_ExportModuleFactory_registerPlugin, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_tulip_tlp_ExportModuleFactory = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__ExportModuleFactory,
        {0}
    },
    {
        sipNameNr_ExportModuleFactory,
        {21, 255, 0},
        6, methods_tlp_ExportModuleFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_tlp_ExportModuleFactory,
    0,
    init_tlp_ExportModuleFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_ExportModuleFactory,
    0,
    0,
    0,
    release_tlp_ExportModuleFactory,
    cast_tlp_ExportModuleFactory,
    0,
    0,
    0
};
