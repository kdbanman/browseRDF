/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:13:49 2013
 */

#include "sipAPItulipgui.h"

#line 51 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
#include <tulip/NodeLinkDiagramComponent.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

#line 9 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/GlGraphRenderingParameters.sip"
#include <tulip/GlGraphRenderingParameters.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"
#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/GlScene.sip"
#include <tulip/GlScene.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/..//tulip-ogl/../tulip/Graph.sip"
#include <tulip/Graph.h>
#line 40 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_centerView, "tlp.NodeLinkDiagramComponent.centerView()\n"
    "\n"
    "Centers the view according to the current view window size and draws it.");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_centerView(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_centerView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp))
        {
            sipCpp->centerView();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_centerView, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_getScene(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_getScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp))
        {
            tlp::GlScene *sipRes = 0;

#line 75 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
    sipRes = sipCpp->getGlMainWidget()->getScene();
#line 85 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

            return sipConvertFromType(sipRes,sipType_tlp_GlScene,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_getScene, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_getRenderingParameters, "tlp.NodeLinkDiagramComponent.getRenderingParameters()\n"
    "\n"
    "Returns a copy of the current rendering parameters for the node link diagram view.\n"
    "\n"
    ":rtype: :class:`tulipogl.tlp.GlGraphRenderingParameters`");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_getRenderingParameters(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_getRenderingParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp))
        {
            tlp::GlGraphRenderingParameters *sipRes = 0;

#line 90 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
    sipRes = new tlp::GlGraphRenderingParameters(sipCpp->getGlMainWidget()->getScene()->getGlGraphComposite()->getRenderingParameters());
#line 118 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

            return sipConvertFromNewType(sipRes,sipType_tlp_GlGraphRenderingParameters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_getRenderingParameters, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_setRenderingParameters, "tlp.NodeLinkDiagramComponent.setRenderingParameters(parameters)\n"
    "\n"
    "Sets the rendering parameters for the node link diagram view.\n"
    "\n"
    ":param parameters: the new rendering parameters\n"
    ":type parameters: :class:`tulipogl.tlp.GlGraphRenderingParameters`");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_setRenderingParameters(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_setRenderingParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters * a0;
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp, sipType_tlp_GlGraphRenderingParameters, &a0))
        {
#line 106 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
    sipCpp->getGlMainWidget()->getScene()->getGlGraphComposite()->setRenderingParameters(*a0);
    updateNodeLinkConfWidgets(sipCpp);
    tlp::MainController *mainController = dynamic_cast<tlp::MainController *>(tlp::Controller::getCurrentController());
    if (!mainController) {
        sipCpp->draw();
        QApplication::processEvents();
    }
#line 157 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_setRenderingParameters, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_setCenterViewOnSetGraph, "tlp.NodeLinkDiagramComponent.setCenterViewOnSetGraph(center)\n"
    "\n"
    "Activates / desactivates the automatic centering of the view when setting a new graph on it.\n"
    "\n"
    ":param center: the state of the automatic centering\n"
    ":type center: boolean");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_setCenterViewOnSetGraph(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_setCenterViewOnSetGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp, &a0))
        {
#line 128 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
    sipCpp->setInitViewOnSetGraph(a0);
    updateNodeLinkConfWidgets(sipCpp);
#line 192 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_setCenterViewOnSetGraph, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_geCenterViewOnSetGraph, "tlp.NodeLinkDiagramComponent.getCenterViewOnSetGraph()\n"
    "\n"
    "Returns the state of the automatic centering when setting a new graph on the view.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_geCenterViewOnSetGraph(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_geCenterViewOnSetGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp))
        {
            bool sipRes = 0;

#line 144 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulipgui/NodeLinkDiagramComponent.sip"
    sipRes = sipCpp->getInitViewOnSetGraph();
#line 226 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulipgui/siptulipguitlpNodeLinkDiagramComponent.cpp"

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_geCenterViewOnSetGraph, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent_hideOverview, "tlp.NodeLinkDiagramComponent.hideOverview(hideOverview)\n"
    "\n"
    "Hides / displays the overview in the top left corner of the view.\n"
    "\n"
    ":param hideOverview: whether to hide the overview\n"
    ":type hideOverview: boolean");

extern "C" {static PyObject *meth_tlp_NodeLinkDiagramComponent_hideOverview(PyObject *, PyObject *);}
static PyObject *meth_tlp_NodeLinkDiagramComponent_hideOverview(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::NodeLinkDiagramComponent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_NodeLinkDiagramComponent, &sipCpp, &a0))
        {
            sipCpp->hideOverview(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NodeLinkDiagramComponent, sipName_hideOverview, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_NodeLinkDiagramComponent(void *, const sipTypeDef *);}
static void *cast_tlp_NodeLinkDiagramComponent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_NodeLinkDiagramComponent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_View)->ctd_cast((tlp::View *)(tlp::NodeLinkDiagramComponent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_NodeLinkDiagramComponent(void *, int);}
static void release_tlp_NodeLinkDiagramComponent(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::NodeLinkDiagramComponent *>(sipCppV);
}


extern "C" {static void dealloc_tlp_NodeLinkDiagramComponent(sipSimpleWrapper *);}
static void dealloc_tlp_NodeLinkDiagramComponent(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_NodeLinkDiagramComponent(sipGetAddress(sipSelf),0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_NodeLinkDiagramComponent[] = {{3, 255, 1}};


static PyMethodDef methods_tlp_NodeLinkDiagramComponent[] = {
    {SIP_MLNAME_CAST(sipName_centerView), meth_tlp_NodeLinkDiagramComponent_centerView, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_centerView)},
    {SIP_MLNAME_CAST(sipName_geCenterViewOnSetGraph), meth_tlp_NodeLinkDiagramComponent_geCenterViewOnSetGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_geCenterViewOnSetGraph)},
    {SIP_MLNAME_CAST(sipName_getRenderingParameters), meth_tlp_NodeLinkDiagramComponent_getRenderingParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_getRenderingParameters)},
    {SIP_MLNAME_CAST(sipName_getScene), meth_tlp_NodeLinkDiagramComponent_getScene, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hideOverview), meth_tlp_NodeLinkDiagramComponent_hideOverview, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_hideOverview)},
    {SIP_MLNAME_CAST(sipName_setCenterViewOnSetGraph), meth_tlp_NodeLinkDiagramComponent_setCenterViewOnSetGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_setCenterViewOnSetGraph)},
    {SIP_MLNAME_CAST(sipName_setRenderingParameters), meth_tlp_NodeLinkDiagramComponent_setRenderingParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_NodeLinkDiagramComponent_setRenderingParameters)}
};

PyDoc_STRVAR(doc_tlp_NodeLinkDiagramComponent, ".. versionadded:: 3.8\n"
    "\n"
    "Bases: :class:`tlp.View`\n"
    "\n"
    "That class represents the main type of view offered by Tulip : a node link diagram.");


sipClassTypeDef sipTypeDef_tulipgui_tlp_NodeLinkDiagramComponent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_tlp__NodeLinkDiagramComponent,
        {0}
    },
    {
        sipNameNr_NodeLinkDiagramComponent,
        {1, 255, 0},
        7, methods_tlp_NodeLinkDiagramComponent,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_NodeLinkDiagramComponent,
    -1,
    -1,
    supers_tlp_NodeLinkDiagramComponent,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_NodeLinkDiagramComponent,
    0,
    0,
    0,
    release_tlp_NodeLinkDiagramComponent,
    cast_tlp_NodeLinkDiagramComponent,
    0,
    0,
    0
};
