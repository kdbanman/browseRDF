/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:05 2013
 */

#include "sipAPIstl.h"

#line 109 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/set.sip"
#include <set>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdset2400.cpp"



extern "C" {static void assign_std_set_2400(void *, SIP_SSIZE_T, const void *);}
static void assign_std_set_2400(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::set<double> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::set<double> *>(sipSrc);
}


extern "C" {static void *array_std_set_2400(SIP_SSIZE_T);}
static void *array_std_set_2400(SIP_SSIZE_T sipNrElem)
{
    return new std::set<double>[sipNrElem];
}


extern "C" {static void *copy_std_set_2400(const void *, SIP_SSIZE_T);}
static void *copy_std_set_2400(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::set<double>(reinterpret_cast<const std::set<double> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_set_2400(void *, int);}
static void release_std_set_2400(void *ptr, int)
{
    delete reinterpret_cast<std::set<double> *>(ptr);
}



extern "C" {static int convertTo_std_set_2400(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_set_2400(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::set<double> **sipCppPtr = reinterpret_cast<std::set<double> **>(sipCppPtrV);

#line 113 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/set.sip"
   // Check if type is compatible
   if (sipIsErr == NULL) {
   	   if (!PyList_Check(sipPy)) {
          return 0;
       }
       for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
            PyObject *item = PyList_GET_ITEM(sipPy, i);
            if (!PyNumber_Check(item)) {
                printErrorMessage("TypeError : object in list of type " + std::string(item->ob_type->tp_name) + " can not be converted to double");
                return 0;
            }
       }
       return 1;
   }
 
   // Convert Python list of numbers to a std::set<double>
   std::set<double> *s = new std::set<double>();
   
   for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i) {
       PyObject *f = PyNumber_Float(PyList_GET_ITEM(sipPy, i));
       s->insert(PyFloat_AsDouble(f));
       Py_XDECREF(f);       
   }

   *sipCppPtr = s;
   return sipGetState(sipTransferObj);
#line 78 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdset2400.cpp"
}


extern "C" {static PyObject *convertFrom_std_set_2400(void *, PyObject *);}
static PyObject *convertFrom_std_set_2400(void *sipCppV,PyObject *)
{
   std::set<double> *sipCpp = reinterpret_cast<std::set<double> *>(sipCppV);

#line 142 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/set.sip"
   PyObject *l;

   // Create the Python list of the correct length.
   if ((l = PyList_New(sipCpp -> size())) == NULL) {
       return NULL;
   }    

   // Go through each element in the C++ instance and convert it to a
   // wrapped object.
   int i = 0;
    for (std::set<double>::iterator it = sipCpp->begin(); it != sipCpp->end(); ++it) {
       // Add the wrapper to the list.
       PyList_SET_ITEM(l, i++, PyFloat_FromDouble(*it));
   }

   // Return the Python list.
   return l;
#line 105 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdset2400.cpp"
}


sipMappedTypeDef sipTypeDef_stl_std_set_2400 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_94,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_set_2400,
    array_std_set_2400,
    copy_std_set_2400,
    release_std_set_2400,
    convertTo_std_set_2400,
    convertFrom_std_set_2400
};
