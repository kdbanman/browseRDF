/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:46:05 2013
 */

#include "sipAPIstl.h"

#line 387 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/pair.sip"
#include <utility>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdpair19001900.cpp"



extern "C" {static void assign_std_pair_1900_1900(void *, SIP_SSIZE_T, const void *);}
static void assign_std_pair_1900_1900(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::pair<uint,uint> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::pair<uint,uint> *>(sipSrc);
}


extern "C" {static void *array_std_pair_1900_1900(SIP_SSIZE_T);}
static void *array_std_pair_1900_1900(SIP_SSIZE_T sipNrElem)
{
    return new std::pair<uint,uint>[sipNrElem];
}


extern "C" {static void *copy_std_pair_1900_1900(const void *, SIP_SSIZE_T);}
static void *copy_std_pair_1900_1900(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::pair<uint,uint>(reinterpret_cast<const std::pair<uint,uint> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_pair_1900_1900(void *, int);}
static void release_std_pair_1900_1900(void *ptr, int)
{
    delete reinterpret_cast<std::pair<uint,uint> *>(ptr);
}



extern "C" {static int convertTo_std_pair_1900_1900(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_pair_1900_1900(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::pair<uint,uint> **sipCppPtr = reinterpret_cast<std::pair<uint,uint> **>(sipCppPtrV);

#line 391 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/pair.sip"
    PyObject *itm1 = NULL;
    PyObject *itm2 = NULL;

    if (sipIsErr == NULL) {
        if (!(PyTuple_Check(sipPy) && PyTuple_Size(sipPy) == 2))
            return 0;

        itm1 = PyTuple_GetItem(sipPy, 0);
        itm2 = PyTuple_GetItem(sipPy, 1);

        bool ok = PyLong_Check(itm1);
        ok = ok && PyLong_Check(itm2);

        if (!ok) {
            return 0;
        }

        return 1;
    }

    itm1 = PyTuple_GetItem(sipPy, 0);
    itm2 = PyTuple_GetItem(sipPy, 1);

    int t1State = 0;
    int t2State = 0;

    unsigned int ui1 = PyLong_AsUnsignedLong(itm1);
    unsigned int ui2 = PyLong_AsUnsignedLong(itm2);

    std::pair<unsigned int, unsigned int> *p = new std::pair<unsigned int, unsigned int>(ui1, ui2);

    *sipCppPtr = p;
    return sipGetState(sipTransferObj);
#line 85 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdpair19001900.cpp"
}


extern "C" {static PyObject *convertFrom_std_pair_1900_1900(void *, PyObject *);}
static PyObject *convertFrom_std_pair_1900_1900(void *sipCppV,PyObject *)
{
   std::pair<uint,uint> *sipCpp = reinterpret_cast<std::pair<uint,uint> *>(sipCppV);

#line 427 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/stl/pair.sip"
    PyObject *pyTuple = PyTuple_New(2);

    if (pyTuple == NULL) {
        return 0;
    }

    PyObject *pyFirst = NULL;
    PyObject *pySecond = NULL;

    pyFirst = PyLong_FromUnsignedLong(sipCpp->first);
    pySecond = PyLong_FromUnsignedLong(sipCpp->second);

    if (pyFirst == NULL || pySecond == NULL || PyTuple_SetItem(pyTuple, 0, pyFirst)) {
        if (pyFirst)
            Py_XDECREF(pyFirst);

        if (pySecond)
            Py_XDECREF(pySecond);

        Py_XDECREF(pyTuple);

        return 0;
    }

    if (PyTuple_SetItem(pyTuple, 1, pySecond)) {
        Py_XDECREF(pySecond);
        Py_XDECREF(pyTuple);

        return 0;
    }

    return pyTuple;
#line 127 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/stl/sipstlstdpair19001900.cpp"
}


sipMappedTypeDef sipTypeDef_stl_std_pair_1900_1900 = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_0,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_pair_1900_1900,
    array_std_pair_1900_1900,
    copy_std_pair_1900_1900,
    release_std_pair_1900_1900,
    convertTo_std_pair_1900_1900,
    convertFrom_std_pair_1900_1900
};
