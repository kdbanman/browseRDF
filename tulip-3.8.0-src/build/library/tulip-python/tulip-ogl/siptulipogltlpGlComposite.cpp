/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"

#line 33 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 19 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 36 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <tulip/GlSimpleEntity.h>
#line 22 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 26 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 35 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComposite.cpp"


class siptlp_GlComposite : public tlp::GlComposite
{
public:
    siptlp_GlComposite(bool);
    siptlp_GlComposite(const tlp::GlComposite&);
    virtual ~siptlp_GlComposite();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void addLayerParent(tlp::GlLayer *);
    void removeLayerParent(tlp::GlLayer *);
    void draw(float,tlp::Camera *);
    void setStencil(int);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void translate(const tlp::Coord&);
    void setVisible(bool);
    tlp::BoundingBox getBoundingBox();
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlComposite(const siptlp_GlComposite &);
    siptlp_GlComposite &operator = (const siptlp_GlComposite &);

    char sipPyMethods[10];
};

siptlp_GlComposite::siptlp_GlComposite(bool a0): tlp::GlComposite(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComposite::siptlp_GlComposite(const tlp::GlComposite& a0): tlp::GlComposite(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComposite::~siptlp_GlComposite()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlComposite::addLayerParent(tlp::GlLayer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_addLayerParent);

    if (!sipMeth)
    {
        tlp::GlComposite::addLayerParent(a0);
        return;
    }

    extern void sipVH_tulipogl_16(sip_gilstate_t,PyObject *,tlp::GlLayer *);

    sipVH_tulipogl_16(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::removeLayerParent(tlp::GlLayer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_removeLayerParent);

    if (!sipMeth)
    {
        tlp::GlComposite::removeLayerParent(a0);
        return;
    }

    extern void sipVH_tulipogl_16(sip_gilstate_t,PyObject *,tlp::GlLayer *);

    sipVH_tulipogl_16(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlComposite::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlComposite::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlComposite::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlComposite::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlComposite::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlComposite::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlComposite::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_GlComposite,sipName_getXML);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlComposite::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_GlComposite,sipName_setWithXML);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_GlComposite_addLayerParent, "tlp.GlComposite.addLayerParent(tlp.GlLayer)");

extern "C" {static PyObject *meth_tlp_GlComposite_addLayerParent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_addLayerParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlLayer * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlLayer, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::addLayerParent(a0) : sipCpp->addLayerParent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_addLayerParent, doc_tlp_GlComposite_addLayerParent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_removeLayerParent, "tlp.GlComposite.removeLayerParent(tlp.GlLayer)");

extern "C" {static PyObject *meth_tlp_GlComposite_removeLayerParent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_removeLayerParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlLayer * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlLayer, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::removeLayerParent(a0) : sipCpp->removeLayerParent(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_removeLayerParent, doc_tlp_GlComposite_removeLayerParent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_reset, "tlp.GlComposite.reset(bool)");

extern "C" {static PyObject *meth_tlp_GlComposite_reset(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlComposite, &sipCpp, &a0))
        {
            sipCpp->reset(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_reset, doc_tlp_GlComposite_reset);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_addGlEntity, "tlp.GlComposite.addGlEntity(tlp.GlSimpleEntity, string)");

extern "C" {static PyObject *meth_tlp_GlComposite_addGlEntity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_addGlEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSimpleEntity * a0;
        const std::string * a1;
        int a1State = 0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J1", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlSimpleEntity, &a0, sipType_std_string,&a1, &a1State))
        {
            sipCpp->addGlEntity(a0,*a1);
            sipReleaseType(const_cast<std::string *>(a1),sipType_std_string,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_addGlEntity, doc_tlp_GlComposite_addGlEntity);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_deleteGlEntity, "tlp.GlComposite.deleteGlEntity(string, bool informTheEntity=True)\n"
    "tlp.GlComposite.deleteGlEntity(tlp.GlSimpleEntity, bool informTheEntity=True)");

extern "C" {static PyObject *meth_tlp_GlComposite_deleteGlEntity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_deleteGlEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        bool a1 = 1;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|b", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_std_string,&a0, &a0State, &a1))
        {
            sipCpp->deleteGlEntity(*a0,a1);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        tlp::GlSimpleEntity * a0;
        bool a1 = 1;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8|b", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlSimpleEntity, &a0, &a1))
        {
            sipCpp->deleteGlEntity(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_deleteGlEntity, doc_tlp_GlComposite_deleteGlEntity);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_findKey, "tlp.GlComposite.findKey(tlp.GlSimpleEntity) -> string");

extern "C" {static PyObject *meth_tlp_GlComposite_findKey(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_findKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSimpleEntity * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlSimpleEntity, &a0))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->findKey(a0));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_findKey, doc_tlp_GlComposite_findKey);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_findGlEntity, "tlp.GlComposite.findGlEntity(string) -> tlp.GlSimpleEntity");

extern "C" {static PyObject *meth_tlp_GlComposite_findGlEntity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_findGlEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            tlp::GlSimpleEntity *sipRes;

            sipRes = sipCpp->findGlEntity(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return sipConvertFromType(sipRes,sipType_tlp_GlSimpleEntity,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_findGlEntity, doc_tlp_GlComposite_findGlEntity);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_notifyModified, "tlp.GlComposite.notifyModified(tlp.GlSimpleEntity)");

extern "C" {static PyObject *meth_tlp_GlComposite_notifyModified(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_notifyModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSimpleEntity * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlSimpleEntity, &a0))
        {
            sipCpp->notifyModified(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_notifyModified, doc_tlp_GlComposite_notifyModified);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_draw, "tlp.GlComposite.draw(float, tlp.Camera)");

extern "C" {static PyObject *meth_tlp_GlComposite_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        float a0;
        tlp::Camera * a1;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, &a0, sipType_tlp_Camera, &a1))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::draw(a0,a1) : sipCpp->draw(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_draw, doc_tlp_GlComposite_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_setStencil, "tlp.GlComposite.setStencil(int)");

extern "C" {static PyObject *meth_tlp_GlComposite_setStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_setStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlComposite, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::setStencil(a0) : sipCpp->setStencil(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_setStencil, doc_tlp_GlComposite_setStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_acceptVisitor, "tlp.GlComposite.acceptVisitor(tlp.GlSceneVisitor)");

extern "C" {static PyObject *meth_tlp_GlComposite_acceptVisitor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_acceptVisitor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlSceneVisitor * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_GlSceneVisitor, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::acceptVisitor(a0) : sipCpp->acceptVisitor(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_acceptVisitor, doc_tlp_GlComposite_acceptVisitor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_setDeleteComponentsInDestructor, "tlp.GlComposite.setDeleteComponentsInDestructor(bool)");

extern "C" {static PyObject *meth_tlp_GlComposite_setDeleteComponentsInDestructor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_setDeleteComponentsInDestructor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlComposite, &sipCpp, &a0))
        {
            sipCpp->setDeleteComponentsInDestructor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_setDeleteComponentsInDestructor, doc_tlp_GlComposite_setDeleteComponentsInDestructor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComposite_translate, "tlp.GlComposite.translate(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlComposite_translate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComposite_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Coord * a0;
        tlp::GlComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlComposite, &sipCpp, sipType_tlp_Coord, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComposite::translate(*a0) : sipCpp->translate(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComposite, sipName_translate, doc_tlp_GlComposite_translate);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlComposite(void *, const sipTypeDef *);}
static void *cast_tlp_GlComposite(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlComposite)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlSimpleEntity)->ctd_cast((tlp::GlSimpleEntity *)(tlp::GlComposite *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlComposite(void *, int);}
static void release_tlp_GlComposite(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlComposite *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlComposite *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlComposite(sipSimpleWrapper *);}
static void dealloc_tlp_GlComposite(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlComposite *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlComposite(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlComposite(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlComposite(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlComposite *sipCpp = 0;

    {
        bool a0 = 1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|b", &a0))
        {
            sipCpp = new siptlp_GlComposite(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlComposite * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlComposite, &a0))
        {
            sipCpp = new siptlp_GlComposite(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlComposite[] = {{23, 255, 1}};


static PyMethodDef methods_tlp_GlComposite[] = {
    {SIP_MLNAME_CAST(sipName_acceptVisitor), meth_tlp_GlComposite_acceptVisitor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_acceptVisitor)},
    {SIP_MLNAME_CAST(sipName_addGlEntity), meth_tlp_GlComposite_addGlEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_addGlEntity)},
    {SIP_MLNAME_CAST(sipName_addLayerParent), meth_tlp_GlComposite_addLayerParent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_addLayerParent)},
    {SIP_MLNAME_CAST(sipName_deleteGlEntity), meth_tlp_GlComposite_deleteGlEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_deleteGlEntity)},
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_GlComposite_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_draw)},
    {SIP_MLNAME_CAST(sipName_findGlEntity), meth_tlp_GlComposite_findGlEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_findGlEntity)},
    {SIP_MLNAME_CAST(sipName_findKey), meth_tlp_GlComposite_findKey, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_findKey)},
    {SIP_MLNAME_CAST(sipName_notifyModified), meth_tlp_GlComposite_notifyModified, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_notifyModified)},
    {SIP_MLNAME_CAST(sipName_removeLayerParent), meth_tlp_GlComposite_removeLayerParent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_removeLayerParent)},
    {SIP_MLNAME_CAST(sipName_reset), meth_tlp_GlComposite_reset, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_reset)},
    {SIP_MLNAME_CAST(sipName_setDeleteComponentsInDestructor), meth_tlp_GlComposite_setDeleteComponentsInDestructor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_setDeleteComponentsInDestructor)},
    {SIP_MLNAME_CAST(sipName_setStencil), meth_tlp_GlComposite_setStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_setStencil)},
    {SIP_MLNAME_CAST(sipName_translate), meth_tlp_GlComposite_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComposite_translate)}
};

PyDoc_STRVAR(doc_tlp_GlComposite, "\1tlp.GlComposite(bool deleteComponentsInDestructor=True)\n"
    "tlp.GlComposite(tlp.GlComposite)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlComposite = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__GlComposite,
        {0}
    },
    {
        sipNameNr_GlComposite,
        {5, 255, 0},
        13, methods_tlp_GlComposite,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlComposite,
    -1,
    -1,
    supers_tlp_GlComposite,
    0,
    init_tlp_GlComposite,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlComposite,
    0,
    0,
    0,
    release_tlp_GlComposite,
    cast_tlp_GlComposite,
    0,
    0,
    0
};
