/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"

#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphInputData.sip"
#include <tulip/GlGraphInputData.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"
#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 22 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Size.sip"
#include <tulip/Size.h>
#line 25 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Node.sip"
#include <tulip/Node.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyph.cpp"


class siptlp_Glyph : public tlp::Glyph
{
public:
    siptlp_Glyph(tlp::GlyphContext *);
    siptlp_Glyph(const tlp::Glyph&);
    virtual ~siptlp_Glyph();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(tlp::node,float);
    void getIncludeBoundingBox(tlp::BoundingBox&,tlp::node);
    void getTextBoundingBox(tlp::BoundingBox&,tlp::node);
    tlp::Coord getAnchor(const tlp::Coord&,const tlp::Coord&,const tlp::Size&,const double) const;
    bool renderLabel();

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_Glyph(const siptlp_Glyph &);
    siptlp_Glyph &operator = (const siptlp_Glyph &);

    char sipPyMethods[5];
};

siptlp_Glyph::siptlp_Glyph(tlp::GlyphContext *a0): tlp::Glyph(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_Glyph::siptlp_Glyph(const tlp::Glyph& a0): tlp::Glyph(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_Glyph::~siptlp_Glyph()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_Glyph::draw(tlp::node a0,float a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_Glyph,sipName_draw);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_14(sip_gilstate_t,PyObject *,tlp::node,float);

    sipVH_tulipogl_14(sipGILState,sipMeth,a0,a1);
}

void siptlp_Glyph::getIncludeBoundingBox(tlp::BoundingBox& a0,tlp::node a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_getIncludeBoundingBox);

    if (!sipMeth)
    {
        tlp::Glyph::getIncludeBoundingBox(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_13(sip_gilstate_t,PyObject *,tlp::BoundingBox&,tlp::node);

    sipVH_tulipogl_13(sipGILState,sipMeth,a0,a1);
}

void siptlp_Glyph::getTextBoundingBox(tlp::BoundingBox& a0,tlp::node a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_getTextBoundingBox);

    if (!sipMeth)
    {
        tlp::Glyph::getTextBoundingBox(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_13(sip_gilstate_t,PyObject *,tlp::BoundingBox&,tlp::node);

    sipVH_tulipogl_13(sipGILState,sipMeth,a0,a1);
}

tlp::Coord siptlp_Glyph::getAnchor(const tlp::Coord& a0,const tlp::Coord& a1,const tlp::Size& a2,const double a3) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_getAnchor);

    if (!sipMeth)
        return tlp::Glyph::getAnchor(a0,a1,a2,a3);

    extern tlp::Coord sipVH_tulipogl_12(sip_gilstate_t,PyObject *,const tlp::Coord&,const tlp::Coord&,const tlp::Size&,const double);

    return sipVH_tulipogl_12(sipGILState,sipMeth,a0,a1,a2,a3);
}

bool siptlp_Glyph::renderLabel()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_renderLabel);

    if (!sipMeth)
        return tlp::Glyph::renderLabel();

    typedef bool (*sipVH_tulip_17)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_17)(sipModuleAPI_tulipogl_tulip->em_virthandlers[17]))(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_tlp_Glyph_draw, "tlp.Glyph.draw(tlp.node, float)");

extern "C" {static PyObject *meth_tlp_Glyph_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_Glyph_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        tlp::node * a0;
        float a1;
        tlp::Glyph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9f", &sipSelf, sipType_tlp_Glyph, &sipCpp, sipType_tlp_node, &a0, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_Glyph, sipName_draw);
                return NULL;
            }

            sipCpp->draw(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Glyph, sipName_draw, doc_tlp_Glyph_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Glyph_getIncludeBoundingBox, "tlp.Glyph.getIncludeBoundingBox(tlp.BoundingBox, tlp.node)");

extern "C" {static PyObject *meth_tlp_Glyph_getIncludeBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_Glyph_getIncludeBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::BoundingBox * a0;
        tlp::node * a1;
        tlp::Glyph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_tlp_Glyph, &sipCpp, sipType_tlp_BoundingBox, &a0, sipType_tlp_node, &a1))
        {
            (sipSelfWasArg ? sipCpp->tlp::Glyph::getIncludeBoundingBox(*a0,*a1) : sipCpp->getIncludeBoundingBox(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Glyph, sipName_getIncludeBoundingBox, doc_tlp_Glyph_getIncludeBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Glyph_getTextBoundingBox, "tlp.Glyph.getTextBoundingBox(tlp.BoundingBox, tlp.node)");

extern "C" {static PyObject *meth_tlp_Glyph_getTextBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_Glyph_getTextBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::BoundingBox * a0;
        tlp::node * a1;
        tlp::Glyph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_tlp_Glyph, &sipCpp, sipType_tlp_BoundingBox, &a0, sipType_tlp_node, &a1))
        {
            (sipSelfWasArg ? sipCpp->tlp::Glyph::getTextBoundingBox(*a0,*a1) : sipCpp->getTextBoundingBox(*a0,*a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Glyph, sipName_getTextBoundingBox, doc_tlp_Glyph_getTextBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Glyph_getAnchor, "tlp.Glyph.getAnchor(tlp.Coord, tlp.Coord, tlp.Size, float) -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Glyph_getAnchor(PyObject *, PyObject *);}
static PyObject *meth_tlp_Glyph_getAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Coord * a0;
        const tlp::Coord * a1;
        const tlp::Size * a2;
        double a3;
        const tlp::Glyph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9J9d", &sipSelf, sipType_tlp_Glyph, &sipCpp, sipType_tlp_Coord, &a0, sipType_tlp_Coord, &a1, sipType_tlp_Size, &a2, &a3))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord((sipSelfWasArg ? sipCpp->tlp::Glyph::getAnchor(*a0,*a1,*a2,a3) : sipCpp->getAnchor(*a0,*a1,*a2,a3)));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Glyph, sipName_getAnchor, doc_tlp_Glyph_getAnchor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Glyph_renderLabel, "tlp.Glyph.renderLabel() -> bool");

extern "C" {static PyObject *meth_tlp_Glyph_renderLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_Glyph_renderLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::Glyph *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Glyph, &sipCpp))
        {
            bool sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->tlp::Glyph::renderLabel() : sipCpp->renderLabel());

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Glyph, sipName_renderLabel, doc_tlp_Glyph_renderLabel);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_Glyph(void *, const sipTypeDef *);}
static void *cast_tlp_Glyph(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_Glyph)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_Glyph(void *, int);}
static void release_tlp_Glyph(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_Glyph *>(sipCppV);
    else
        delete reinterpret_cast<tlp::Glyph *>(sipCppV);
}


extern "C" {static void dealloc_tlp_Glyph(sipSimpleWrapper *);}
static void dealloc_tlp_Glyph(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_Glyph *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_Glyph(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_Glyph(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_Glyph(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_Glyph *sipCpp = 0;

    {
        tlp::GlyphContext * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_tlp_GlyphContext, &a0))
        {
            sipCpp = new siptlp_Glyph(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::Glyph * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Glyph, &a0))
        {
            sipCpp = new siptlp_Glyph(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_Glyph[] = {
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_Glyph_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Glyph_draw)},
    {SIP_MLNAME_CAST(sipName_getAnchor), meth_tlp_Glyph_getAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Glyph_getAnchor)},
    {SIP_MLNAME_CAST(sipName_getIncludeBoundingBox), meth_tlp_Glyph_getIncludeBoundingBox, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Glyph_getIncludeBoundingBox)},
    {SIP_MLNAME_CAST(sipName_getTextBoundingBox), meth_tlp_Glyph_getTextBoundingBox, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Glyph_getTextBoundingBox)},
    {SIP_MLNAME_CAST(sipName_renderLabel), meth_tlp_Glyph_renderLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Glyph_renderLabel)}
};


extern "C" {static PyObject *varget_tlp_Glyph_glGraphInputData(void *, PyObject *);}
static PyObject *varget_tlp_Glyph_glGraphInputData(void *sipSelf, PyObject *)
{
    tlp::GlGraphInputData *sipVal;
    tlp::Glyph *sipCpp = reinterpret_cast<tlp::Glyph *>(sipSelf);

    sipVal = sipCpp->glGraphInputData;

    return sipConvertFromType(sipVal,sipType_tlp_GlGraphInputData, NULL);
}


extern "C" {static int varset_tlp_Glyph_glGraphInputData(void *, PyObject *, PyObject *);}
static int varset_tlp_Glyph_glGraphInputData(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::GlGraphInputData *sipVal;
    tlp::Glyph *sipCpp = reinterpret_cast<tlp::Glyph *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::GlGraphInputData *>(sipForceConvertToType(sipPy,sipType_tlp_GlGraphInputData,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->glGraphInputData = sipVal;

    return 0;
}

sipVariableDef variables_tlp_Glyph[] = {
    {InstanceVariable, sipName_glGraphInputData, (PyMethodDef *)varget_tlp_Glyph_glGraphInputData, (PyMethodDef *)varset_tlp_Glyph_glGraphInputData, NULL, NULL},
};

PyDoc_STRVAR(doc_tlp_Glyph, "\1tlp.Glyph(tlp.GlyphContext)\n"
    "tlp.Glyph(tlp.Glyph)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_Glyph = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__Glyph,
        {0}
    },
    {
        sipNameNr_Glyph,
        {5, 255, 0},
        5, methods_tlp_Glyph,
        0, 0,
        1, variables_tlp_Glyph,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_Glyph,
    -1,
    -1,
    0,
    0,
    init_tlp_Glyph,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_Glyph,
    0,
    0,
    0,
    release_tlp_Glyph,
    cast_tlp_Glyph,
    0,
    0,
    0
};
