/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlRect.sip"
#include <tulip/GlRect.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"

#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Size.sip"
#include <tulip/Size.h>
#line 22 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 25 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 35 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlAbstractPolygon.sip"
#include <tulip/GlAbstractPolygon.h>
#line 38 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 44 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 47 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRect.cpp"


class siptlp_GlRect : public tlp::GlRect
{
public:
    siptlp_GlRect(const tlp::Coord&,const tlp::Coord&,const tlp::Color&,const tlp::Color&,bool,bool);
    siptlp_GlRect(const tlp::Coord&,const tlp::Size&,const tlp::Color&,const tlp::Color&);
    siptlp_GlRect(bool,bool);
    siptlp_GlRect(const tlp::GlRect&);
    virtual ~siptlp_GlRect();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_setPoints(bool,const std::vector<tlp::Coord>&);
    void sipProtectVirt_setPoint(bool,uint,const tlp::Coord&);
    void sipProtectVirt_setFillColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_setOutlineColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_recomputeBoundingBox(bool);
    void sipProtectVirt_clearGenerated(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    tlp::Coord getCenter();
    tlp::Coord getTopLeftPos();
    tlp::Coord getBottomRightPos();
    tlp::Color getTopLeftColor();
    tlp::Color getBottomRightColor();
    void setTopLeftPos(const tlp::Coord&);
    void setBottomRightPos(const tlp::Coord&);
    void setTopLeftColor(const tlp::Color&);
    void setBottomRightColor(const tlp::Color&);
    void resizePoints(const uint);
    void resizeColors(const uint);
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);
    void setPoints(const std::vector<tlp::Coord>&);
    void setPoint(uint,const tlp::Coord&);
    void setFillColors(const std::vector<tlp::Color>&);
    void setOutlineColors(const std::vector<tlp::Color>&);
    void recomputeBoundingBox();
    void clearGenerated();
    void draw(float,tlp::Camera *);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void setVisible(bool);
    void setStencil(int);
    tlp::BoundingBox getBoundingBox();
    void translate(const tlp::Coord&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlRect(const siptlp_GlRect &);
    siptlp_GlRect &operator = (const siptlp_GlRect &);

    char sipPyMethods[25];
};

siptlp_GlRect::siptlp_GlRect(const tlp::Coord& a0,const tlp::Coord& a1,const tlp::Color& a2,const tlp::Color& a3,bool a4,bool a5): tlp::GlRect(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRect::siptlp_GlRect(const tlp::Coord& a0,const tlp::Size& a1,const tlp::Color& a2,const tlp::Color& a3): tlp::GlRect(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRect::siptlp_GlRect(bool a0,bool a1): tlp::GlRect(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRect::siptlp_GlRect(const tlp::GlRect& a0): tlp::GlRect(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRect::~siptlp_GlRect()
{
    sipCommonDtor(sipPySelf);
}

tlp::Coord siptlp_GlRect::getCenter()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_getCenter);

    if (!sipMeth)
        return tlp::GlRect::getCenter();

    extern tlp::Coord sipVH_tulipogl_3(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_3(sipGILState,sipMeth);
}

tlp::Coord siptlp_GlRect::getTopLeftPos()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_getTopLeftPos);

    if (!sipMeth)
        return tlp::GlRect::getTopLeftPos();

    extern tlp::Coord sipVH_tulipogl_3(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_3(sipGILState,sipMeth);
}

tlp::Coord siptlp_GlRect::getBottomRightPos()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_getBottomRightPos);

    if (!sipMeth)
        return tlp::GlRect::getBottomRightPos();

    extern tlp::Coord sipVH_tulipogl_3(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_3(sipGILState,sipMeth);
}

tlp::Color siptlp_GlRect::getTopLeftColor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_getTopLeftColor);

    if (!sipMeth)
        return tlp::GlRect::getTopLeftColor();

    extern tlp::Color sipVH_tulipogl_2(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_2(sipGILState,sipMeth);
}

tlp::Color siptlp_GlRect::getBottomRightColor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_getBottomRightColor);

    if (!sipMeth)
        return tlp::GlRect::getBottomRightColor();

    extern tlp::Color sipVH_tulipogl_2(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_2(sipGILState,sipMeth);
}

void siptlp_GlRect::setTopLeftPos(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setTopLeftPos);

    if (!sipMeth)
    {
        tlp::GlRect::setTopLeftPos(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setBottomRightPos(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setBottomRightPos);

    if (!sipMeth)
    {
        tlp::GlRect::setBottomRightPos(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setTopLeftColor(const tlp::Color& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setTopLeftColor);

    if (!sipMeth)
    {
        tlp::GlRect::setTopLeftColor(a0);
        return;
    }

    extern void sipVH_tulipogl_0(sip_gilstate_t,PyObject *,const tlp::Color&);

    sipVH_tulipogl_0(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setBottomRightColor(const tlp::Color& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_setBottomRightColor);

    if (!sipMeth)
    {
        tlp::GlRect::setBottomRightColor(a0);
        return;
    }

    extern void sipVH_tulipogl_0(sip_gilstate_t,PyObject *,const tlp::Color&);

    sipVH_tulipogl_0(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::resizePoints(const uint a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_resizePoints);

    if (!sipMeth)
    {
        tlp::GlPolygon::resizePoints(a0);
        return;
    }

    extern void sipVH_tulipogl_6(sip_gilstate_t,PyObject *,const uint);

    sipVH_tulipogl_6(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::resizeColors(const uint a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_resizeColors);

    if (!sipMeth)
    {
        tlp::GlPolygon::resizeColors(a0);
        return;
    }

    extern void sipVH_tulipogl_6(sip_gilstate_t,PyObject *,const uint);

    sipVH_tulipogl_6(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_getXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::getXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setWithXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setWithXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setPoints(const std::vector<tlp::Coord>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setPoints);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoints(a0);
        return;
    }

    extern void sipVH_tulipogl_9(sip_gilstate_t,PyObject *,const std::vector<tlp::Coord>&);

    sipVH_tulipogl_9(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setPoint(uint a0,const tlp::Coord& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_setPoint);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoint(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_8(sip_gilstate_t,PyObject *,uint,const tlp::Coord&);

    sipVH_tulipogl_8(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlRect::setFillColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_setFillColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setFillColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setOutlineColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_setOutlineColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setOutlineColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::recomputeBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_recomputeBoundingBox);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::recomputeBoundingBox();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlRect::clearGenerated()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_clearGenerated);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::clearGenerated();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlRect::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlRect::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlRect::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlRect::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlRect::sipProtectVirt_setPoints(bool sipSelfWasArg,const std::vector<tlp::Coord>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoints(a0) : setPoints(a0));
}

void siptlp_GlRect::sipProtectVirt_setPoint(bool sipSelfWasArg,uint a0,const tlp::Coord& a1)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoint(a0,a1) : setPoint(a0,a1));
}

void siptlp_GlRect::sipProtectVirt_setFillColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setFillColors(a0) : setFillColors(a0));
}

void siptlp_GlRect::sipProtectVirt_setOutlineColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setOutlineColors(a0) : setOutlineColors(a0));
}

void siptlp_GlRect::sipProtectVirt_recomputeBoundingBox(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::recomputeBoundingBox() : recomputeBoundingBox());
}

void siptlp_GlRect::sipProtectVirt_clearGenerated(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::clearGenerated() : clearGenerated());
}


PyDoc_STRVAR(doc_tlp_GlRect_setPoints, "tlp.GlRect.setPoints(list-of-tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRect_setPoints(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_std_vector_0100tlp_Coord,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setPoints(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setPoints, doc_tlp_GlRect_setPoints);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setPoint, "tlp.GlRect.setPoint(int, tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRect_setPoint(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        uint a0;
        const tlp::Coord * a1;
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_tlp_GlRect, &sipCpp, &a0, sipType_tlp_Coord, &a1))
        {
            sipCpp->sipProtectVirt_setPoint(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setPoint, doc_tlp_GlRect_setPoint);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setFillColors, "tlp.GlRect.setFillColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRect_setFillColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setFillColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setFillColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setFillColors, doc_tlp_GlRect_setFillColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setOutlineColors, "tlp.GlRect.setOutlineColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRect_setOutlineColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setOutlineColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setOutlineColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setOutlineColors, doc_tlp_GlRect_setOutlineColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_recomputeBoundingBox, "tlp.GlRect.recomputeBoundingBox()");

extern "C" {static PyObject *meth_tlp_GlRect_recomputeBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_recomputeBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            sipCpp->sipProtectVirt_recomputeBoundingBox(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_recomputeBoundingBox, doc_tlp_GlRect_recomputeBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_clearGenerated, "tlp.GlRect.clearGenerated()");

extern "C" {static PyObject *meth_tlp_GlRect_clearGenerated(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_clearGenerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            sipCpp->sipProtectVirt_clearGenerated(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_clearGenerated, doc_tlp_GlRect_clearGenerated);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_getCenter, "tlp.GlRect.getCenter() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_GlRect_getCenter(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_getCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord((sipSelfWasArg ? sipCpp->tlp::GlRect::getCenter() : sipCpp->getCenter()));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_getCenter, doc_tlp_GlRect_getCenter);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setCenterAndSize, "tlp.GlRect.setCenterAndSize(tlp.Coord, tlp.Size)");

extern "C" {static PyObject *meth_tlp_GlRect_setCenterAndSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setCenterAndSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        const tlp::Size * a1;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9J9", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_tlp_Coord, &a0, sipType_tlp_Size, &a1))
        {
            sipCpp->setCenterAndSize(*a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setCenterAndSize, doc_tlp_GlRect_setCenterAndSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_getTopLeftPos, "tlp.GlRect.getTopLeftPos() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_GlRect_getTopLeftPos(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_getTopLeftPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord((sipSelfWasArg ? sipCpp->tlp::GlRect::getTopLeftPos() : sipCpp->getTopLeftPos()));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_getTopLeftPos, doc_tlp_GlRect_getTopLeftPos);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_getBottomRightPos, "tlp.GlRect.getBottomRightPos() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_GlRect_getBottomRightPos(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_getBottomRightPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord((sipSelfWasArg ? sipCpp->tlp::GlRect::getBottomRightPos() : sipCpp->getBottomRightPos()));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_getBottomRightPos, doc_tlp_GlRect_getBottomRightPos);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_getTopLeftColor, "tlp.GlRect.getTopLeftColor() -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlRect_getTopLeftColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_getTopLeftColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color((sipSelfWasArg ? sipCpp->tlp::GlRect::getTopLeftColor() : sipCpp->getTopLeftColor()));

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_getTopLeftColor, doc_tlp_GlRect_getTopLeftColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_getBottomRightColor, "tlp.GlRect.getBottomRightColor() -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlRect_getBottomRightColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_getBottomRightColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRect, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color((sipSelfWasArg ? sipCpp->tlp::GlRect::getBottomRightColor() : sipCpp->getBottomRightColor()));

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_getBottomRightColor, doc_tlp_GlRect_getBottomRightColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setTopLeftPos, "tlp.GlRect.setTopLeftPos(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRect_setTopLeftPos(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setTopLeftPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Coord * a0;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_tlp_Coord, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlRect::setTopLeftPos(*a0) : sipCpp->setTopLeftPos(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setTopLeftPos, doc_tlp_GlRect_setTopLeftPos);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setBottomRightPos, "tlp.GlRect.setBottomRightPos(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRect_setBottomRightPos(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setBottomRightPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Coord * a0;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_tlp_Coord, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlRect::setBottomRightPos(*a0) : sipCpp->setBottomRightPos(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setBottomRightPos, doc_tlp_GlRect_setBottomRightPos);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setTopLeftColor, "tlp.GlRect.setTopLeftColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRect_setTopLeftColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setTopLeftColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Color * a0;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_tlp_Color, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlRect::setTopLeftColor(*a0) : sipCpp->setTopLeftColor(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setTopLeftColor, doc_tlp_GlRect_setTopLeftColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_setBottomRightColor, "tlp.GlRect.setBottomRightColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRect_setBottomRightColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_setBottomRightColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Color * a0;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlRect, &sipCpp, sipType_tlp_Color, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlRect::setBottomRightColor(*a0) : sipCpp->setBottomRightColor(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_setBottomRightColor, doc_tlp_GlRect_setBottomRightColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRect_inRect, "tlp.GlRect.inRect(float, float) -> bool");

extern "C" {static PyObject *meth_tlp_GlRect_inRect(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRect_inRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        double a1;
        tlp::GlRect *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bdd", &sipSelf, sipType_tlp_GlRect, &sipCpp, &a0, &a1))
        {
            bool sipRes;

            sipRes = sipCpp->inRect(a0,a1);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRect, sipName_inRect, doc_tlp_GlRect_inRect);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlRect(void *, const sipTypeDef *);}
static void *cast_tlp_GlRect(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlRect)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlPolygon)->ctd_cast((tlp::GlPolygon *)(tlp::GlRect *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlRect(void *, int);}
static void release_tlp_GlRect(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlRect *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlRect *>(sipCppV);
}


extern "C" {static void assign_tlp_GlRect(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlRect(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlRect *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlRect *>(sipSrc);
}


extern "C" {static void *array_tlp_GlRect(SIP_SSIZE_T);}
static void *array_tlp_GlRect(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlRect[sipNrElem];
}


extern "C" {static void *copy_tlp_GlRect(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlRect(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlRect(reinterpret_cast<const tlp::GlRect *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlRect(sipSimpleWrapper *);}
static void dealloc_tlp_GlRect(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlRect *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlRect(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlRect(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlRect(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlRect *sipCpp = 0;

    {
        const tlp::Coord * a0;
        const tlp::Coord * a1;
        const tlp::Color * a2;
        const tlp::Color * a3;
        bool a4 = 1;
        bool a5 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9J9J9|bb", sipType_tlp_Coord, &a0, sipType_tlp_Coord, &a1, sipType_tlp_Color, &a2, sipType_tlp_Color, &a3, &a4, &a5))
        {
            sipCpp = new siptlp_GlRect(*a0,*a1,*a2,*a3,a4,a5);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::Coord * a0;
        const tlp::Size * a1;
        const tlp::Color * a2;
        const tlp::Color * a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9J9J9", sipType_tlp_Coord, &a0, sipType_tlp_Size, &a1, sipType_tlp_Color, &a2, sipType_tlp_Color, &a3))
        {
            sipCpp = new siptlp_GlRect(*a0,*a1,*a2,*a3);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        bool a0 = 1;
        bool a1 = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|bb", &a0, &a1))
        {
            sipCpp = new siptlp_GlRect(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlRect * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlRect, &a0))
        {
            sipCpp = new siptlp_GlRect(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlRect[] = {{16, 255, 1}};


static PyMethodDef methods_tlp_GlRect[] = {
    {SIP_MLNAME_CAST(sipName_clearGenerated), meth_tlp_GlRect_clearGenerated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getBottomRightColor), meth_tlp_GlRect_getBottomRightColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_getBottomRightColor)},
    {SIP_MLNAME_CAST(sipName_getBottomRightPos), meth_tlp_GlRect_getBottomRightPos, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_getBottomRightPos)},
    {SIP_MLNAME_CAST(sipName_getCenter), meth_tlp_GlRect_getCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_getCenter)},
    {SIP_MLNAME_CAST(sipName_getTopLeftColor), meth_tlp_GlRect_getTopLeftColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_getTopLeftColor)},
    {SIP_MLNAME_CAST(sipName_getTopLeftPos), meth_tlp_GlRect_getTopLeftPos, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_getTopLeftPos)},
    {SIP_MLNAME_CAST(sipName_inRect), meth_tlp_GlRect_inRect, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_inRect)},
    {SIP_MLNAME_CAST(sipName_recomputeBoundingBox), meth_tlp_GlRect_recomputeBoundingBox, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBottomRightColor), meth_tlp_GlRect_setBottomRightColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_setBottomRightColor)},
    {SIP_MLNAME_CAST(sipName_setBottomRightPos), meth_tlp_GlRect_setBottomRightPos, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_setBottomRightPos)},
    {SIP_MLNAME_CAST(sipName_setCenterAndSize), meth_tlp_GlRect_setCenterAndSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_setCenterAndSize)},
    {SIP_MLNAME_CAST(sipName_setFillColors), meth_tlp_GlRect_setFillColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setOutlineColors), meth_tlp_GlRect_setOutlineColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPoint), meth_tlp_GlRect_setPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_tlp_GlRect_setPoints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTopLeftColor), meth_tlp_GlRect_setTopLeftColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_setTopLeftColor)},
    {SIP_MLNAME_CAST(sipName_setTopLeftPos), meth_tlp_GlRect_setTopLeftPos, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRect_setTopLeftPos)}
};

PyDoc_STRVAR(doc_tlp_GlRect, "\1tlp.GlRect(tlp.Coord, tlp.Coord, tlp.Color, tlp.Color, bool filled=True, bool outlined=False)\n"
    "tlp.GlRect(tlp.Coord, tlp.Size, tlp.Color, tlp.Color)\n"
    "tlp.GlRect(bool filled=True, bool outlined=False)\n"
    "tlp.GlRect(tlp.GlRect)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlRect = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlRect,
        {0}
    },
    {
        sipNameNr_GlRect,
        {5, 255, 0},
        17, methods_tlp_GlRect,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlRect,
    -1,
    -1,
    supers_tlp_GlRect,
    0,
    init_tlp_GlRect,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlRect,
    assign_tlp_GlRect,
    array_tlp_GlRect,
    copy_tlp_GlRect,
    release_tlp_GlRect,
    cast_tlp_GlRect,
    0,
    0,
    0
};
