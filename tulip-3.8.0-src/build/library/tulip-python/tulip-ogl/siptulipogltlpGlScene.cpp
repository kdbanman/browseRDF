/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlScene.sip"
#include <tulip/GlScene.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"

#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 9 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphComposite.sip"
#include <tulip/GlGraphComposite.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Graph.sip"
#include <tulip/Graph.h>
#line 40 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 43 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 298 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/pair.sip"
#include <utility>
#line 46 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 49 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 52 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 69 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 72 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 54 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 89 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Node.sip"
#include <tulip/Node.h>
#line 92 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlScene.cpp"


class siptlp_GlScene : public tlp::GlScene
{
public:
    siptlp_GlScene();
    siptlp_GlScene(const tlp::GlScene&);
    virtual ~siptlp_GlScene();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_treatEvents(bool,const std::vector<tlp::Event>&);
    void sipProtectVirt_treatEvent(bool,const tlp::Event&);
    void sipProtect_sendEvent(const tlp::Event&);
    void sipProtect_observableDeleted();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void treatEvents(const std::vector<tlp::Event>&);
    void treatEvent(const tlp::Event&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlScene(const siptlp_GlScene &);
    siptlp_GlScene &operator = (const siptlp_GlScene &);

    char sipPyMethods[2];
};

siptlp_GlScene::siptlp_GlScene(): tlp::GlScene(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlScene::siptlp_GlScene(const tlp::GlScene& a0): tlp::GlScene(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlScene::~siptlp_GlScene()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlScene::treatEvents(const std::vector<tlp::Event>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_treatEvents);

    if (!sipMeth)
    {
        tlp::Observable::treatEvents(a0);
        return;
    }

    typedef void (*sipVH_tulip_1)(sip_gilstate_t,PyObject *,const std::vector<tlp::Event>&);

    ((sipVH_tulip_1)(sipModuleAPI_tulipogl_tulip->em_virthandlers[1]))(sipGILState,sipMeth,a0);
}

void siptlp_GlScene::treatEvent(const tlp::Event& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_treatEvent);

    if (!sipMeth)
    {
        tlp::Observable::treatEvent(a0);
        return;
    }

    typedef void (*sipVH_tulip_0)(sip_gilstate_t,PyObject *,const tlp::Event&);

    ((sipVH_tulip_0)(sipModuleAPI_tulipogl_tulip->em_virthandlers[0]))(sipGILState,sipMeth,a0);
}

void siptlp_GlScene::sipProtectVirt_treatEvents(bool sipSelfWasArg,const std::vector<tlp::Event>& a0)
{
    (sipSelfWasArg ? tlp::Observable::treatEvents(a0) : treatEvents(a0));
}

void siptlp_GlScene::sipProtectVirt_treatEvent(bool sipSelfWasArg,const tlp::Event& a0)
{
    (sipSelfWasArg ? tlp::Observable::treatEvent(a0) : treatEvent(a0));
}

void siptlp_GlScene::sipProtect_sendEvent(const tlp::Event& a0)
{
    tlp::Observable::sendEvent(a0);
}

void siptlp_GlScene::sipProtect_observableDeleted()
{
    tlp::Observable::observableDeleted();
}


PyDoc_STRVAR(doc_tlp_GlScene_treatEvents, "tlp.GlScene.treatEvents(list-of-tlp.Event)");

extern "C" {static PyObject *meth_tlp_GlScene_treatEvents(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_treatEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Event> * a0;
        int a0State = 0;
        siptlp_GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_std_vector_0100tlp_Event,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_treatEvents(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Event> *>(a0),sipType_std_vector_0100tlp_Event,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_treatEvents, doc_tlp_GlScene_treatEvents);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_treatEvent, "tlp.GlScene.treatEvent(tlp.Event)");

extern "C" {static PyObject *meth_tlp_GlScene_treatEvent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_treatEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Event * a0;
        siptlp_GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_Event, &a0))
        {
            sipCpp->sipProtectVirt_treatEvent(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_treatEvent, doc_tlp_GlScene_treatEvent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_sendEvent, "tlp.GlScene.sendEvent(tlp.Event)");

extern "C" {static PyObject *meth_tlp_GlScene_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Event * a0;
        siptlp_GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_Event, &a0))
        {
            sipCpp->sipProtect_sendEvent(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_sendEvent, doc_tlp_GlScene_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_observableDeleted, "tlp.GlScene.observableDeleted()");

extern "C" {static PyObject *meth_tlp_GlScene_observableDeleted(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_observableDeleted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        siptlp_GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            sipCpp->sipProtect_observableDeleted();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_observableDeleted, doc_tlp_GlScene_observableDeleted);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_initGlParameters, "tlp.GlScene.initGlParameters()");

extern "C" {static PyObject *meth_tlp_GlScene_initGlParameters(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_initGlParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            sipCpp->initGlParameters();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_initGlParameters, doc_tlp_GlScene_initGlParameters);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_draw, "tlp.GlScene.draw()");

extern "C" {static PyObject *meth_tlp_GlScene_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            sipCpp->draw();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_draw, doc_tlp_GlScene_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_centerScene, "tlp.GlScene.centerScene()");

extern "C" {static PyObject *meth_tlp_GlScene_centerScene(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_centerScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            sipCpp->centerScene();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_centerScene, doc_tlp_GlScene_centerScene);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_ajustSceneToSize, "tlp.GlScene.ajustSceneToSize(int, int)");

extern "C" {static PyObject *meth_tlp_GlScene_ajustSceneToSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_ajustSceneToSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, &a1))
        {
            sipCpp->ajustSceneToSize(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_ajustSceneToSize, doc_tlp_GlScene_ajustSceneToSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_zoomXY, "tlp.GlScene.zoomXY(int, int, int)");

extern "C" {static PyObject *meth_tlp_GlScene_zoomXY(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_zoomXY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->zoomXY(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_zoomXY, doc_tlp_GlScene_zoomXY);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_zoom, "tlp.GlScene.zoom(float, tlp.Coord)\n"
    "tlp.GlScene.zoom(int)");

extern "C" {static PyObject *meth_tlp_GlScene_zoom(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_zoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        const tlp::Coord * a1;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ9", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, sipType_tlp_Coord, &a1))
        {
            sipCpp->zoom(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0))
        {
            sipCpp->zoom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_zoom, doc_tlp_GlScene_zoom);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_translateCamera, "tlp.GlScene.translateCamera(int, int, int)");

extern "C" {static PyObject *meth_tlp_GlScene_translateCamera(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_translateCamera(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->translateCamera(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_translateCamera, doc_tlp_GlScene_translateCamera);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_rotateScene, "tlp.GlScene.rotateScene(int, int, int)");

extern "C" {static PyObject *meth_tlp_GlScene_rotateScene(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_rotateScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        int a2;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biii", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, &a1, &a2))
        {
            sipCpp->rotateScene(a0,a1,a2);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_rotateScene, doc_tlp_GlScene_rotateScene);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getImage, "tlp.GlScene.getImage() -> str");

extern "C" {static PyObject *meth_tlp_GlScene_getImage(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getImage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            unsigned char *sipRes;

            sipRes = sipCpp->getImage();

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString((char *)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getImage, doc_tlp_GlScene_getImage);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_setViewport, "tlp.GlScene.setViewport(tlp.Vec4i)\n"
    "tlp.GlScene.setViewport(int, int, int, int)");

extern "C" {static PyObject *meth_tlp_GlScene_setViewport(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_setViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Vec4i * a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_Vec4i, &a0))
        {
            sipCpp->setViewport(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        int a0;
        int a1;
        int a2;
        int a3;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Biiii", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->setViewport(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_setViewport, doc_tlp_GlScene_setViewport);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getViewport, "tlp.GlScene.getViewport() -> tlp.Vec4i");

extern "C" {static PyObject *meth_tlp_GlScene_getViewport(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i(sipCpp->getViewport());

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getViewport, doc_tlp_GlScene_getViewport);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_setBackgroundColor, "tlp.GlScene.setBackgroundColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlScene_setBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_setBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Color * a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setBackgroundColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_setBackgroundColor, doc_tlp_GlScene_setBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getBackgroundColor, "tlp.GlScene.getBackgroundColor() -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlScene_getBackgroundColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getBackgroundColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getBackgroundColor());

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getBackgroundColor, doc_tlp_GlScene_getBackgroundColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_setViewOrtho, "tlp.GlScene.setViewOrtho(bool)");

extern "C" {static PyObject *meth_tlp_GlScene_setViewOrtho(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_setViewOrtho(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlScene, &sipCpp, &a0))
        {
            sipCpp->setViewOrtho(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_setViewOrtho, doc_tlp_GlScene_setViewOrtho);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_isViewOrtho, "tlp.GlScene.isViewOrtho() -> bool");

extern "C" {static PyObject *meth_tlp_GlScene_isViewOrtho(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_isViewOrtho(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewOrtho();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_isViewOrtho, doc_tlp_GlScene_isViewOrtho);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_addLayer, "tlp.GlScene.addLayer(tlp.GlLayer)");

extern "C" {static PyObject *meth_tlp_GlScene_addLayer(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_addLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlLayer * a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ:", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_GlLayer, &a0))
        {
            sipCpp->addLayer(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_addLayer, doc_tlp_GlScene_addLayer);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getLayer, "tlp.GlScene.getLayer(string) -> tlp.GlLayer");

extern "C" {static PyObject *meth_tlp_GlScene_getLayer(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            tlp::GlLayer *sipRes;

            sipRes = sipCpp->getLayer(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            return sipConvertFromType(sipRes,sipType_tlp_GlLayer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getLayer, doc_tlp_GlScene_getLayer);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getLayersList, "tlp.GlScene.getLayersList() -> list-of-std_pair_0100std_string_0101tlp_GlLayer");

extern "C" {static PyObject *meth_tlp_GlScene_getLayersList(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getLayersList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            std::vector<std_pair_0100std_string_0101tlp_GlLayer> *sipRes;

            sipRes = sipCpp->getLayersList();

            return sipConvertFromType(sipRes,sipType_std_vector_0100std_pair_0100std_string_0101tlp_GlLayer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getLayersList, doc_tlp_GlScene_getLayersList);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_clearLayersList, "tlp.GlScene.clearLayersList()");

extern "C" {static PyObject *meth_tlp_GlScene_clearLayersList(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_clearLayersList(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            sipCpp->clearLayersList();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_clearLayersList, doc_tlp_GlScene_clearLayersList);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getXML, "tlp.GlScene.getXML() -> string");

extern "C" {static PyObject *meth_tlp_GlScene_getXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string * a0;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            a0 = new std::string();

            sipCpp->getXML(*a0);

            return sipConvertFromNewType(a0,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getXML, doc_tlp_GlScene_getXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_setWithXML, "tlp.GlScene.setWithXML(string, tlp.Graph)");

extern "C" {static PyObject *meth_tlp_GlScene_setWithXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_setWithXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        std::string * a0;
        int a0State = 0;
        tlp::Graph * a1;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J8", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_std_string,&a0, &a0State, sipType_tlp_Graph, &a1))
        {
            sipCpp->setWithXML(*a0,a1);
            sipReleaseType(a0,sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_setWithXML, doc_tlp_GlScene_setWithXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_addGlGraphCompositeInfo, "tlp.GlScene.addGlGraphCompositeInfo(tlp.GlLayer, tlp.GlGraphComposite)");

extern "C" {static PyObject *meth_tlp_GlScene_addGlGraphCompositeInfo(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_addGlGraphCompositeInfo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlLayer * a0;
        tlp::GlGraphComposite * a1;
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8J8", &sipSelf, sipType_tlp_GlScene, &sipCpp, sipType_tlp_GlLayer, &a0, sipType_tlp_GlGraphComposite, &a1))
        {
            sipCpp->addGlGraphCompositeInfo(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_addGlGraphCompositeInfo, doc_tlp_GlScene_addGlGraphCompositeInfo);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getGlGraphComposite, "tlp.GlScene.getGlGraphComposite() -> tlp.GlGraphComposite");

extern "C" {static PyObject *meth_tlp_GlScene_getGlGraphComposite(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getGlGraphComposite(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            tlp::GlGraphComposite *sipRes;

            sipRes = sipCpp->getGlGraphComposite();

            return sipConvertFromType(sipRes,sipType_tlp_GlGraphComposite,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getGlGraphComposite, doc_tlp_GlScene_getGlGraphComposite);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlScene_getGraphLayer, "tlp.GlScene.getGraphLayer() -> tlp.GlLayer");

extern "C" {static PyObject *meth_tlp_GlScene_getGraphLayer(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlScene_getGraphLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlScene, &sipCpp))
        {
            tlp::GlLayer *sipRes;

            sipRes = sipCpp->getGraphLayer();

            return sipConvertFromType(sipRes,sipType_tlp_GlLayer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlScene, sipName_getGraphLayer, doc_tlp_GlScene_getGraphLayer);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlScene(void *, const sipTypeDef *);}
static void *cast_tlp_GlScene(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlScene)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_Observable)->ctd_cast((tlp::Observable *)(tlp::GlScene *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlScene(void *, int);}
static void release_tlp_GlScene(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlScene *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlScene *>(sipCppV);
}


extern "C" {static void assign_tlp_GlScene(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlScene(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlScene *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlScene *>(sipSrc);
}


extern "C" {static void *array_tlp_GlScene(SIP_SSIZE_T);}
static void *array_tlp_GlScene(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlScene[sipNrElem];
}


extern "C" {static void *copy_tlp_GlScene(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlScene(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlScene(reinterpret_cast<const tlp::GlScene *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlScene(sipSimpleWrapper *);}
static void dealloc_tlp_GlScene(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlScene *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlScene(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlScene(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlScene(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlScene *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlScene();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlScene * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlScene, &a0))
        {
            sipCpp = new siptlp_GlScene(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlScene[] = {{78, 1, 1}};


static PyMethodDef methods_tlp_GlScene[] = {
    {SIP_MLNAME_CAST(sipName_addGlGraphCompositeInfo), meth_tlp_GlScene_addGlGraphCompositeInfo, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_addGlGraphCompositeInfo)},
    {SIP_MLNAME_CAST(sipName_addLayer), meth_tlp_GlScene_addLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_addLayer)},
    {SIP_MLNAME_CAST(sipName_ajustSceneToSize), meth_tlp_GlScene_ajustSceneToSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_ajustSceneToSize)},
    {SIP_MLNAME_CAST(sipName_centerScene), meth_tlp_GlScene_centerScene, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_centerScene)},
    {SIP_MLNAME_CAST(sipName_clearLayersList), meth_tlp_GlScene_clearLayersList, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_clearLayersList)},
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_GlScene_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_draw)},
    {SIP_MLNAME_CAST(sipName_getBackgroundColor), meth_tlp_GlScene_getBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_getGlGraphComposite), meth_tlp_GlScene_getGlGraphComposite, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getGlGraphComposite)},
    {SIP_MLNAME_CAST(sipName_getGraphLayer), meth_tlp_GlScene_getGraphLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getGraphLayer)},
    {SIP_MLNAME_CAST(sipName_getImage), meth_tlp_GlScene_getImage, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getImage)},
    {SIP_MLNAME_CAST(sipName_getLayer), meth_tlp_GlScene_getLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getLayer)},
    {SIP_MLNAME_CAST(sipName_getLayersList), meth_tlp_GlScene_getLayersList, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getLayersList)},
    {SIP_MLNAME_CAST(sipName_getViewport), meth_tlp_GlScene_getViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getViewport)},
    {SIP_MLNAME_CAST(sipName_getXML), meth_tlp_GlScene_getXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_getXML)},
    {SIP_MLNAME_CAST(sipName_initGlParameters), meth_tlp_GlScene_initGlParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_initGlParameters)},
    {SIP_MLNAME_CAST(sipName_isViewOrtho), meth_tlp_GlScene_isViewOrtho, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_isViewOrtho)},
    {SIP_MLNAME_CAST(sipName_observableDeleted), meth_tlp_GlScene_observableDeleted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotateScene), meth_tlp_GlScene_rotateScene, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_rotateScene)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_tlp_GlScene_sendEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setBackgroundColor), meth_tlp_GlScene_setBackgroundColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_setBackgroundColor)},
    {SIP_MLNAME_CAST(sipName_setViewOrtho), meth_tlp_GlScene_setViewOrtho, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_setViewOrtho)},
    {SIP_MLNAME_CAST(sipName_setViewport), meth_tlp_GlScene_setViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_setViewport)},
    {SIP_MLNAME_CAST(sipName_setWithXML), meth_tlp_GlScene_setWithXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_setWithXML)},
    {SIP_MLNAME_CAST(sipName_translateCamera), meth_tlp_GlScene_translateCamera, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_translateCamera)},
    {SIP_MLNAME_CAST(sipName_treatEvent), meth_tlp_GlScene_treatEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_treatEvents), meth_tlp_GlScene_treatEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_zoom), meth_tlp_GlScene_zoom, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_zoom)},
    {SIP_MLNAME_CAST(sipName_zoomXY), meth_tlp_GlScene_zoomXY, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlScene_zoomXY)}
};

PyDoc_STRVAR(doc_tlp_GlScene, "\1tlp.GlScene()\n"
    "tlp.GlScene(tlp.GlScene)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlScene = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlScene,
        {0}
    },
    {
        sipNameNr_GlScene,
        {5, 255, 0},
        28, methods_tlp_GlScene,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlScene,
    -1,
    -1,
    supers_tlp_GlScene,
    0,
    init_tlp_GlScene,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlScene,
    assign_tlp_GlScene,
    array_tlp_GlScene,
    copy_tlp_GlScene,
    release_tlp_GlScene,
    cast_tlp_GlScene,
    0,
    0,
    0
};
