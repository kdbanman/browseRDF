/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneVisitor.cpp"

#line 36 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <tulip/GlSimpleEntity.h>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneVisitor.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 19 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneVisitor.cpp"


class siptlp_GlSceneVisitor : public tlp::GlSceneVisitor
{
public:
    siptlp_GlSceneVisitor();
    siptlp_GlSceneVisitor(const tlp::GlSceneVisitor&);
    virtual ~siptlp_GlSceneVisitor();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void visit(tlp::GlSimpleEntity *);
    void visit(tlp::GlLayer *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlSceneVisitor(const siptlp_GlSceneVisitor &);
    siptlp_GlSceneVisitor &operator = (const siptlp_GlSceneVisitor &);

    char sipPyMethods[2];
};

siptlp_GlSceneVisitor::siptlp_GlSceneVisitor(): tlp::GlSceneVisitor(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlSceneVisitor::siptlp_GlSceneVisitor(const tlp::GlSceneVisitor& a0): tlp::GlSceneVisitor(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlSceneVisitor::~siptlp_GlSceneVisitor()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlSceneVisitor::visit(tlp::GlSimpleEntity *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_visit);

    if (!sipMeth)
    {
        tlp::GlSceneVisitor::visit(a0);
        return;
    }

    extern void sipVH_tulipogl_17(sip_gilstate_t,PyObject *,tlp::GlSimpleEntity *);

    sipVH_tulipogl_17(sipGILState,sipMeth,a0);
}

void siptlp_GlSceneVisitor::visit(tlp::GlLayer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_visit);

    if (!sipMeth)
    {
        tlp::GlSceneVisitor::visit(a0);
        return;
    }

    extern void sipVH_tulipogl_16(sip_gilstate_t,PyObject *,tlp::GlLayer *);

    sipVH_tulipogl_16(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_GlSceneVisitor_visit, "tlp.GlSceneVisitor.visit(tlp.GlSimpleEntity)\n"
    "tlp.GlSceneVisitor.visit(tlp.GlLayer)");

extern "C" {static PyObject *meth_tlp_GlSceneVisitor_visit(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSceneVisitor_visit(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlSimpleEntity * a0;
        tlp::GlSceneVisitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSceneVisitor, &sipCpp, sipType_tlp_GlSimpleEntity, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSceneVisitor::visit(a0) : sipCpp->visit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        tlp::GlLayer * a0;
        tlp::GlSceneVisitor *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSceneVisitor, &sipCpp, sipType_tlp_GlLayer, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSceneVisitor::visit(a0) : sipCpp->visit(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSceneVisitor, sipName_visit, doc_tlp_GlSceneVisitor_visit);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlSceneVisitor(void *, const sipTypeDef *);}
static void *cast_tlp_GlSceneVisitor(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_GlSceneVisitor)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlSceneVisitor(void *, int);}
static void release_tlp_GlSceneVisitor(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlSceneVisitor *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlSceneVisitor *>(sipCppV);
}


extern "C" {static void assign_tlp_GlSceneVisitor(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlSceneVisitor(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlSceneVisitor *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlSceneVisitor *>(sipSrc);
}


extern "C" {static void *array_tlp_GlSceneVisitor(SIP_SSIZE_T);}
static void *array_tlp_GlSceneVisitor(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlSceneVisitor[sipNrElem];
}


extern "C" {static void *copy_tlp_GlSceneVisitor(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlSceneVisitor(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlSceneVisitor(reinterpret_cast<const tlp::GlSceneVisitor *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlSceneVisitor(sipSimpleWrapper *);}
static void dealloc_tlp_GlSceneVisitor(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlSceneVisitor *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlSceneVisitor(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlSceneVisitor(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlSceneVisitor(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlSceneVisitor *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlSceneVisitor();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlSceneVisitor * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlSceneVisitor, &a0))
        {
            sipCpp = new siptlp_GlSceneVisitor(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_GlSceneVisitor[] = {
    {SIP_MLNAME_CAST(sipName_visit), meth_tlp_GlSceneVisitor_visit, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSceneVisitor_visit)}
};

PyDoc_STRVAR(doc_tlp_GlSceneVisitor, "\1tlp.GlSceneVisitor()\n"
    "tlp.GlSceneVisitor(tlp.GlSceneVisitor)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlSceneVisitor = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlSceneVisitor,
        {0}
    },
    {
        sipNameNr_GlSceneVisitor,
        {5, 255, 0},
        1, methods_tlp_GlSceneVisitor,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlSceneVisitor,
    -1,
    -1,
    0,
    0,
    init_tlp_GlSceneVisitor,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlSceneVisitor,
    assign_tlp_GlSceneVisitor,
    array_tlp_GlSceneVisitor,
    copy_tlp_GlSceneVisitor,
    release_tlp_GlSceneVisitor,
    cast_tlp_GlSceneVisitor,
    0,
    0,
    0
};
