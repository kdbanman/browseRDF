/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 298 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/pair.sip"
#include <utility>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipoglstdpair0100stdstring0101tlpGlLayer.cpp"

#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipoglstdpair0100stdstring0101tlpGlLayer.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 20 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipoglstdpair0100stdstring0101tlpGlLayer.cpp"


extern "C" {static void assign_std_pair_0100std_string_0101tlp_GlLayer(void *, SIP_SSIZE_T, const void *);}
static void assign_std_pair_0100std_string_0101tlp_GlLayer(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::pair<std::string,tlp::GlLayer *> *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::pair<std::string,tlp::GlLayer *> *>(sipSrc);
}


extern "C" {static void *array_std_pair_0100std_string_0101tlp_GlLayer(SIP_SSIZE_T);}
static void *array_std_pair_0100std_string_0101tlp_GlLayer(SIP_SSIZE_T sipNrElem)
{
    return new std::pair<std::string,tlp::GlLayer *>[sipNrElem];
}


extern "C" {static void *copy_std_pair_0100std_string_0101tlp_GlLayer(const void *, SIP_SSIZE_T);}
static void *copy_std_pair_0100std_string_0101tlp_GlLayer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::pair<std::string,tlp::GlLayer *>(reinterpret_cast<const std::pair<std::string,tlp::GlLayer *> *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_pair_0100std_string_0101tlp_GlLayer(void *, int);}
static void release_std_pair_0100std_string_0101tlp_GlLayer(void *ptr, int)
{
    delete reinterpret_cast<std::pair<std::string,tlp::GlLayer *> *>(ptr);
}



extern "C" {static int convertTo_std_pair_0100std_string_0101tlp_GlLayer(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_pair_0100std_string_0101tlp_GlLayer(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::pair<std::string,tlp::GlLayer *> **sipCppPtr = reinterpret_cast<std::pair<std::string,tlp::GlLayer *> **>(sipCppPtrV);

#line 302 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/pair.sip"
	PyObject *itm1 = NULL;
	PyObject *itm2 = NULL;
	
	if (sipIsErr == NULL) {
		if (!(PyTuple_Check(sipPy) && PyTuple_Size(sipPy) == 2))
			return 0;
	
		itm1 = PyTuple_GetItem(sipPy, 0);
		itm2 = PyTuple_GetItem(sipPy, 1);
	
		bool ok = sipCanConvertToType(itm1, sipType_std_string, SIP_NOT_NONE);
		ok = ok && sipCanConvertToType(itm2, sipType_tlp_GlLayer, SIP_NOT_NONE);
			
		if (!ok) {
			return 0;
		}
		
		return 1;
	}

	itm1 = PyTuple_GetItem(sipPy, 0);
	itm2 = PyTuple_GetItem(sipPy, 1);
	
	int t1State = 0;
	int t2State = 0;
	
	std::string *t1 = reinterpret_cast<std::string *>(sipConvertToType(itm1, sipType_std_string, sipTransferObj, SIP_NOT_NONE, &t1State, sipIsErr));
	tlp::GlLayer *t2 = reinterpret_cast<tlp::GlLayer *>(sipConvertToType(itm2, sipType_tlp_GlLayer, sipTransferObj, SIP_NOT_NONE, &t2State, sipIsErr));

	if (*sipIsErr) {
		sipReleaseType(t1, sipType_std_string, t1State);
		sipReleaseType(t2, sipType_tlp_GlLayer, t2State);
		return 0;
	}

	std::pair<std::string, tlp::GlLayer*> *p = new std::pair<std::string, tlp::GlLayer*>(*t1, t2);
	
	sipReleaseType(t1, sipType_std_string, t1State);
	sipReleaseType(t2, sipType_tlp_GlLayer, t2State);

	*sipCppPtr = p;
	return sipGetState(sipTransferObj);
#line 101 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipoglstdpair0100stdstring0101tlpGlLayer.cpp"
}


extern "C" {static PyObject *convertFrom_std_pair_0100std_string_0101tlp_GlLayer(void *, PyObject *);}
static PyObject *convertFrom_std_pair_0100std_string_0101tlp_GlLayer(void *sipCppV,PyObject *sipTransferObj)
{
   std::pair<std::string,tlp::GlLayer *> *sipCpp = reinterpret_cast<std::pair<std::string,tlp::GlLayer *> *>(sipCppV);

#line 347 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/pair.sip"
	PyObject *pyTuple = PyTuple_New(2);
	
	if (pyTuple == NULL) {
		return 0;
	}
	
	PyObject *pyFirst = NULL;
	PyObject *pySecond = NULL;
	
	std::string *first = new std::string(sipCpp->first);
	tlp::GlLayer *second = sipCpp->second;
	
	pyFirst = sipConvertFromNewType(first, sipType_std_string, sipTransferObj);
	pySecond = sipConvertFromType(second, sipType_tlp_GlLayer, sipTransferObj);
	
	if (pyFirst == NULL || pySecond == NULL || PyTuple_SetItem(pyTuple, 0, pyFirst)) {
		if (pyFirst) 
			Py_XDECREF(pyFirst);
		else
			delete first;
		if (pySecond)
			Py_XDECREF(pySecond);
		Py_XDECREF(pyTuple);
		
		return 0;
	}
	
	if (PyTuple_SetItem(pyTuple, 1, pySecond)) {
		Py_XDECREF(pySecond);
		Py_XDECREF(pyTuple);
		
		return 0;
	}
	
	return pyTuple;
#line 146 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipoglstdpair0100stdstring0101tlpGlLayer.cpp"
}


sipMappedTypeDef sipTypeDef_tulipogl_std_pair_0100std_string_0101tlp_GlLayer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_91,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_pair_0100std_string_0101tlp_GlLayer,
    array_std_pair_0100std_string_0101tlp_GlLayer,
    copy_std_pair_0100std_string_0101tlp_GlLayer,
    release_std_pair_0100std_string_0101tlp_GlLayer,
    convertTo_std_pair_0100std_string_0101tlp_GlLayer,
    convertFrom_std_pair_0100std_string_0101tlp_GlLayer
};
