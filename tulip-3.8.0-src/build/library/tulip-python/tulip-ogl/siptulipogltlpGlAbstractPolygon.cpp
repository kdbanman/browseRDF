/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlAbstractPolygon.sip"
#include <tulip/GlAbstractPolygon.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"

#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 19 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 33 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 22 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 37 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 25 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 29 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 35 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 38 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 41 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlAbstractPolygon.cpp"


class siptlp_GlAbstractPolygon : public tlp::GlAbstractPolygon
{
public:
    siptlp_GlAbstractPolygon();
    siptlp_GlAbstractPolygon(const tlp::GlAbstractPolygon&);
    virtual ~siptlp_GlAbstractPolygon();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_setPoints(bool,const std::vector<tlp::Coord>&);
    void sipProtectVirt_setPoint(bool,uint,const tlp::Coord&);
    void sipProtectVirt_setFillColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_setOutlineColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_recomputeBoundingBox(bool);
    void sipProtectVirt_clearGenerated(bool);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);
    void setPoints(const std::vector<tlp::Coord>&);
    void setPoint(uint,const tlp::Coord&);
    void setFillColors(const std::vector<tlp::Color>&);
    void setOutlineColors(const std::vector<tlp::Color>&);
    void recomputeBoundingBox();
    void clearGenerated();
    void draw(float,tlp::Camera *);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void setVisible(bool);
    void setStencil(int);
    tlp::BoundingBox getBoundingBox();
    void translate(const tlp::Coord&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlAbstractPolygon(const siptlp_GlAbstractPolygon &);
    siptlp_GlAbstractPolygon &operator = (const siptlp_GlAbstractPolygon &);

    char sipPyMethods[14];
};

siptlp_GlAbstractPolygon::siptlp_GlAbstractPolygon(): tlp::GlAbstractPolygon(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlAbstractPolygon::siptlp_GlAbstractPolygon(const tlp::GlAbstractPolygon& a0): tlp::GlAbstractPolygon(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlAbstractPolygon::~siptlp_GlAbstractPolygon()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlAbstractPolygon::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_getXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::getXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_setWithXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setWithXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setPoints(const std::vector<tlp::Coord>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setPoints);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoints(a0);
        return;
    }

    extern void sipVH_tulipogl_9(sip_gilstate_t,PyObject *,const std::vector<tlp::Coord>&);

    sipVH_tulipogl_9(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setPoint(uint a0,const tlp::Coord& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setPoint);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoint(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_8(sip_gilstate_t,PyObject *,uint,const tlp::Coord&);

    sipVH_tulipogl_8(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlAbstractPolygon::setFillColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setFillColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setFillColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setOutlineColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setOutlineColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setOutlineColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::recomputeBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_recomputeBoundingBox);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::recomputeBoundingBox();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlAbstractPolygon::clearGenerated()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_clearGenerated);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::clearGenerated();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlAbstractPolygon::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlAbstractPolygon::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlAbstractPolygon::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlAbstractPolygon::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlAbstractPolygon::sipProtectVirt_setPoints(bool sipSelfWasArg,const std::vector<tlp::Coord>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoints(a0) : setPoints(a0));
}

void siptlp_GlAbstractPolygon::sipProtectVirt_setPoint(bool sipSelfWasArg,uint a0,const tlp::Coord& a1)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoint(a0,a1) : setPoint(a0,a1));
}

void siptlp_GlAbstractPolygon::sipProtectVirt_setFillColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setFillColors(a0) : setFillColors(a0));
}

void siptlp_GlAbstractPolygon::sipProtectVirt_setOutlineColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setOutlineColors(a0) : setOutlineColors(a0));
}

void siptlp_GlAbstractPolygon::sipProtectVirt_recomputeBoundingBox(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::recomputeBoundingBox() : recomputeBoundingBox());
}

void siptlp_GlAbstractPolygon::sipProtectVirt_clearGenerated(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::clearGenerated() : clearGenerated());
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_draw, "tlp.GlAbstractPolygon.draw(float, tlp.Camera)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        float a0;
        tlp::Camera * a1;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ8", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0, sipType_tlp_Camera, &a1))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlAbstractPolygon::draw(a0,a1) : sipCpp->draw(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_draw, doc_tlp_GlAbstractPolygon_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getPolygonMode, "tlp.GlAbstractPolygon.getPolygonMode() -> tlp.GlAbstractPolygon.PolygonMode");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getPolygonMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getPolygonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            tlp::GlAbstractPolygon::PolygonMode sipRes;

            sipRes = sipCpp->getPolygonMode();

            return sipConvertFromEnum(sipRes,sipType_tlp_GlAbstractPolygon_PolygonMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getPolygonMode, doc_tlp_GlAbstractPolygon_getPolygonMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setPolygonMode, "tlp.GlAbstractPolygon.setPolygonMode(tlp.GlAbstractPolygon.PolygonMode)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setPolygonMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setPolygonMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon::PolygonMode a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BE", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_tlp_GlAbstractPolygon_PolygonMode, &a0))
        {
            sipCpp->setPolygonMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setPolygonMode, doc_tlp_GlAbstractPolygon_setPolygonMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getFillMode, "tlp.GlAbstractPolygon.getFillMode() -> bool");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getFillMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getFillMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getFillMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getFillMode, doc_tlp_GlAbstractPolygon_getFillMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setFillMode, "tlp.GlAbstractPolygon.setFillMode(bool)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setFillMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setFillMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            sipCpp->setFillMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setFillMode, doc_tlp_GlAbstractPolygon_setFillMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getOutlineMode, "tlp.GlAbstractPolygon.getOutlineMode() -> bool");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getOutlineMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getOutlineMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getOutlineMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getOutlineMode, doc_tlp_GlAbstractPolygon_getOutlineMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setOutlineMode, "tlp.GlAbstractPolygon.setOutlineMode(bool)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setOutlineMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setOutlineMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            sipCpp->setOutlineMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setOutlineMode, doc_tlp_GlAbstractPolygon_setOutlineMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getLightingMode, "tlp.GlAbstractPolygon.getLightingMode() -> bool");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getLightingMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getLightingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getLightingMode();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getLightingMode, doc_tlp_GlAbstractPolygon_getLightingMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setLightingMode, "tlp.GlAbstractPolygon.setLightingMode(bool)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setLightingMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setLightingMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            sipCpp->setLightingMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setLightingMode, doc_tlp_GlAbstractPolygon_setLightingMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getFillColor, "tlp.GlAbstractPolygon.getFillColor(int) -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getFillColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getFillColor(a0));

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getFillColor, doc_tlp_GlAbstractPolygon_getFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setFillColor, "tlp.GlAbstractPolygon.setFillColor(int, tlp.Color)\n"
    "tlp.GlAbstractPolygon.setFillColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        const tlp::Color * a1;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0, sipType_tlp_Color, &a1))
        {
            sipCpp->setFillColor(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Color * a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setFillColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setFillColor, doc_tlp_GlAbstractPolygon_setFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getOutlineColor, "tlp.GlAbstractPolygon.getOutlineColor(int) -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getOutlineColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getOutlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getOutlineColor(a0));

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getOutlineColor, doc_tlp_GlAbstractPolygon_getOutlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setOutlineColor, "tlp.GlAbstractPolygon.setOutlineColor(int, tlp.Color)\n"
    "tlp.GlAbstractPolygon.setOutlineColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setOutlineColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setOutlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        const tlp::Color * a1;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0, sipType_tlp_Color, &a1))
        {
            sipCpp->setOutlineColor(a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const tlp::Color * a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setOutlineColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setOutlineColor, doc_tlp_GlAbstractPolygon_setOutlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getTextureName, "tlp.GlAbstractPolygon.getTextureName() -> string");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getTextureName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getTextureName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getTextureName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getTextureName, doc_tlp_GlAbstractPolygon_getTextureName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setTextureName, "tlp.GlAbstractPolygon.setTextureName(string)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setTextureName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setTextureName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setTextureName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setTextureName, doc_tlp_GlAbstractPolygon_setTextureName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getOutlineSize, "tlp.GlAbstractPolygon.getOutlineSize() -> float");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getOutlineSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getOutlineSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getOutlineSize();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getOutlineSize, doc_tlp_GlAbstractPolygon_getOutlineSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setOutlineSize, "tlp.GlAbstractPolygon.setOutlineSize(float)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setOutlineSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setOutlineSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            sipCpp->setOutlineSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setOutlineSize, doc_tlp_GlAbstractPolygon_setOutlineSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getHideOutlineLod, "tlp.GlAbstractPolygon.getHideOutlineLod() -> float");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getHideOutlineLod(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getHideOutlineLod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getHideOutlineLod();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getHideOutlineLod, doc_tlp_GlAbstractPolygon_getHideOutlineLod);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setHideOutlineLod, "tlp.GlAbstractPolygon.setHideOutlineLod(float)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setHideOutlineLod(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setHideOutlineLod(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0))
        {
            sipCpp->setHideOutlineLod(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setHideOutlineLod, doc_tlp_GlAbstractPolygon_setHideOutlineLod);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_getXML, "tlp.GlAbstractPolygon.getXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_getXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_getXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlAbstractPolygon::getXML(a0) : sipCpp->getXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_getXML, doc_tlp_GlAbstractPolygon_getXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setWithXML, "tlp.GlAbstractPolygon.setWithXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setWithXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setWithXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlAbstractPolygon::setWithXML(a0) : sipCpp->setWithXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setWithXML, doc_tlp_GlAbstractPolygon_setWithXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setPoints, "tlp.GlAbstractPolygon.setPoints(list-of-tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setPoints(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_std_vector_0100tlp_Coord,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setPoints(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setPoints, doc_tlp_GlAbstractPolygon_setPoints);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setPoint, "tlp.GlAbstractPolygon.setPoint(int, tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setPoint(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        uint a0;
        const tlp::Coord * a1;
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, &a0, sipType_tlp_Coord, &a1))
        {
            sipCpp->sipProtectVirt_setPoint(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setPoint, doc_tlp_GlAbstractPolygon_setPoint);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setFillColors, "tlp.GlAbstractPolygon.setFillColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setFillColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setFillColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setFillColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setFillColors, doc_tlp_GlAbstractPolygon_setFillColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_setOutlineColors, "tlp.GlAbstractPolygon.setOutlineColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_setOutlineColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_setOutlineColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setOutlineColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_setOutlineColors, doc_tlp_GlAbstractPolygon_setOutlineColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_recomputeBoundingBox, "tlp.GlAbstractPolygon.recomputeBoundingBox()");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_recomputeBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_recomputeBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            sipCpp->sipProtectVirt_recomputeBoundingBox(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_recomputeBoundingBox, doc_tlp_GlAbstractPolygon_recomputeBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlAbstractPolygon_clearGenerated, "tlp.GlAbstractPolygon.clearGenerated()");

extern "C" {static PyObject *meth_tlp_GlAbstractPolygon_clearGenerated(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlAbstractPolygon_clearGenerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlAbstractPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlAbstractPolygon, &sipCpp))
        {
            sipCpp->sipProtectVirt_clearGenerated(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlAbstractPolygon, sipName_clearGenerated, doc_tlp_GlAbstractPolygon_clearGenerated);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlAbstractPolygon(void *, const sipTypeDef *);}
static void *cast_tlp_GlAbstractPolygon(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlAbstractPolygon)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlSimpleEntity)->ctd_cast((tlp::GlSimpleEntity *)(tlp::GlAbstractPolygon *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlAbstractPolygon(void *, int);}
static void release_tlp_GlAbstractPolygon(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlAbstractPolygon *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlAbstractPolygon *>(sipCppV);
}


extern "C" {static void assign_tlp_GlAbstractPolygon(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlAbstractPolygon(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlAbstractPolygon *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlAbstractPolygon *>(sipSrc);
}


extern "C" {static void *array_tlp_GlAbstractPolygon(SIP_SSIZE_T);}
static void *array_tlp_GlAbstractPolygon(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlAbstractPolygon[sipNrElem];
}


extern "C" {static void *copy_tlp_GlAbstractPolygon(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlAbstractPolygon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlAbstractPolygon(reinterpret_cast<const tlp::GlAbstractPolygon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlAbstractPolygon(sipSimpleWrapper *);}
static void dealloc_tlp_GlAbstractPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlAbstractPolygon *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlAbstractPolygon(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlAbstractPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlAbstractPolygon(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlAbstractPolygon *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlAbstractPolygon();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlAbstractPolygon * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlAbstractPolygon, &a0))
        {
            sipCpp = new siptlp_GlAbstractPolygon(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlAbstractPolygon[] = {{23, 255, 1}};


static PyMethodDef methods_tlp_GlAbstractPolygon[] = {
    {SIP_MLNAME_CAST(sipName_clearGenerated), meth_tlp_GlAbstractPolygon_clearGenerated, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_clearGenerated)},
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_GlAbstractPolygon_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_draw)},
    {SIP_MLNAME_CAST(sipName_getFillColor), meth_tlp_GlAbstractPolygon_getFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getFillColor)},
    {SIP_MLNAME_CAST(sipName_getFillMode), meth_tlp_GlAbstractPolygon_getFillMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getFillMode)},
    {SIP_MLNAME_CAST(sipName_getHideOutlineLod), meth_tlp_GlAbstractPolygon_getHideOutlineLod, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getHideOutlineLod)},
    {SIP_MLNAME_CAST(sipName_getLightingMode), meth_tlp_GlAbstractPolygon_getLightingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getLightingMode)},
    {SIP_MLNAME_CAST(sipName_getOutlineColor), meth_tlp_GlAbstractPolygon_getOutlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getOutlineColor)},
    {SIP_MLNAME_CAST(sipName_getOutlineMode), meth_tlp_GlAbstractPolygon_getOutlineMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getOutlineMode)},
    {SIP_MLNAME_CAST(sipName_getOutlineSize), meth_tlp_GlAbstractPolygon_getOutlineSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getOutlineSize)},
    {SIP_MLNAME_CAST(sipName_getPolygonMode), meth_tlp_GlAbstractPolygon_getPolygonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getPolygonMode)},
    {SIP_MLNAME_CAST(sipName_getTextureName), meth_tlp_GlAbstractPolygon_getTextureName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getTextureName)},
    {SIP_MLNAME_CAST(sipName_getXML), meth_tlp_GlAbstractPolygon_getXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_getXML)},
    {SIP_MLNAME_CAST(sipName_recomputeBoundingBox), meth_tlp_GlAbstractPolygon_recomputeBoundingBox, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_recomputeBoundingBox)},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_tlp_GlAbstractPolygon_setFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setFillColor)},
    {SIP_MLNAME_CAST(sipName_setFillColors), meth_tlp_GlAbstractPolygon_setFillColors, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setFillColors)},
    {SIP_MLNAME_CAST(sipName_setFillMode), meth_tlp_GlAbstractPolygon_setFillMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setFillMode)},
    {SIP_MLNAME_CAST(sipName_setHideOutlineLod), meth_tlp_GlAbstractPolygon_setHideOutlineLod, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setHideOutlineLod)},
    {SIP_MLNAME_CAST(sipName_setLightingMode), meth_tlp_GlAbstractPolygon_setLightingMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setLightingMode)},
    {SIP_MLNAME_CAST(sipName_setOutlineColor), meth_tlp_GlAbstractPolygon_setOutlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setOutlineColor)},
    {SIP_MLNAME_CAST(sipName_setOutlineColors), meth_tlp_GlAbstractPolygon_setOutlineColors, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setOutlineColors)},
    {SIP_MLNAME_CAST(sipName_setOutlineMode), meth_tlp_GlAbstractPolygon_setOutlineMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setOutlineMode)},
    {SIP_MLNAME_CAST(sipName_setOutlineSize), meth_tlp_GlAbstractPolygon_setOutlineSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setOutlineSize)},
    {SIP_MLNAME_CAST(sipName_setPoint), meth_tlp_GlAbstractPolygon_setPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setPoint)},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_tlp_GlAbstractPolygon_setPoints, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setPoints)},
    {SIP_MLNAME_CAST(sipName_setPolygonMode), meth_tlp_GlAbstractPolygon_setPolygonMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setPolygonMode)},
    {SIP_MLNAME_CAST(sipName_setTextureName), meth_tlp_GlAbstractPolygon_setTextureName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setTextureName)},
    {SIP_MLNAME_CAST(sipName_setWithXML), meth_tlp_GlAbstractPolygon_setWithXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlAbstractPolygon_setWithXML)}
};

static sipEnumMemberDef enummembers_tlp_GlAbstractPolygon[] = {
    {sipName_POLYGON, tlp::GlAbstractPolygon::POLYGON, 8},
    {sipName_QUAD_STRIP, tlp::GlAbstractPolygon::QUAD_STRIP, 8},
};

PyDoc_STRVAR(doc_tlp_GlAbstractPolygon, "\1tlp.GlAbstractPolygon()\n"
    "tlp.GlAbstractPolygon(tlp.GlAbstractPolygon)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlAbstractPolygon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlAbstractPolygon,
        {0}
    },
    {
        sipNameNr_GlAbstractPolygon,
        {5, 255, 0},
        27, methods_tlp_GlAbstractPolygon,
        2, enummembers_tlp_GlAbstractPolygon,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlAbstractPolygon,
    -1,
    -1,
    supers_tlp_GlAbstractPolygon,
    0,
    init_tlp_GlAbstractPolygon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlAbstractPolygon,
    assign_tlp_GlAbstractPolygon,
    array_tlp_GlAbstractPolygon,
    copy_tlp_GlAbstractPolygon,
    release_tlp_GlAbstractPolygon,
    cast_tlp_GlAbstractPolygon,
    0,
    0,
    0
};
