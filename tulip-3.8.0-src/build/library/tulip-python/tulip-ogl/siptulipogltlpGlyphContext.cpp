/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 32 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphContext.cpp"

#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphInputData.sip"
#include <tulip/GlGraphInputData.h>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphContext.cpp"


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlyphContext(void *, const sipTypeDef *);}
static void *cast_tlp_GlyphContext(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_GlyphContext)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlyphContext(void *, int);}
static void release_tlp_GlyphContext(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::GlyphContext *>(sipCppV);
}


extern "C" {static void assign_tlp_GlyphContext(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlyphContext(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlyphContext *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlyphContext *>(sipSrc);
}


extern "C" {static void *array_tlp_GlyphContext(SIP_SSIZE_T);}
static void *array_tlp_GlyphContext(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlyphContext[sipNrElem];
}


extern "C" {static void *copy_tlp_GlyphContext(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlyphContext(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlyphContext(reinterpret_cast<const tlp::GlyphContext *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlyphContext(sipSimpleWrapper *);}
static void dealloc_tlp_GlyphContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlyphContext(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_GlyphContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlyphContext(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::GlyphContext *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::GlyphContext();

            return sipCpp;
        }
    }

    {
        const tlp::GlyphContext * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlyphContext, &a0))
        {
            sipCpp = new tlp::GlyphContext(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_tlp_GlyphContext_glGraphInputData(void *, PyObject *);}
static PyObject *varget_tlp_GlyphContext_glGraphInputData(void *sipSelf, PyObject *)
{
    tlp::GlGraphInputData *sipVal;
    tlp::GlyphContext *sipCpp = reinterpret_cast<tlp::GlyphContext *>(sipSelf);

    sipVal = sipCpp->glGraphInputData;

    return sipConvertFromType(sipVal,sipType_tlp_GlGraphInputData, NULL);
}


extern "C" {static int varset_tlp_GlyphContext_glGraphInputData(void *, PyObject *, PyObject *);}
static int varset_tlp_GlyphContext_glGraphInputData(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::GlGraphInputData *sipVal;
    tlp::GlyphContext *sipCpp = reinterpret_cast<tlp::GlyphContext *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::GlGraphInputData *>(sipForceConvertToType(sipPy,sipType_tlp_GlGraphInputData,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->glGraphInputData = sipVal;

    return 0;
}

sipVariableDef variables_tlp_GlyphContext[] = {
    {InstanceVariable, sipName_glGraphInputData, (PyMethodDef *)varget_tlp_GlyphContext_glGraphInputData, (PyMethodDef *)varset_tlp_GlyphContext_glGraphInputData, NULL, NULL},
};

PyDoc_STRVAR(doc_tlp_GlyphContext, "\1tlp.GlyphContext()\n"
    "tlp.GlyphContext(tlp.GlyphContext)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlyphContext = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlyphContext,
        {0}
    },
    {
        sipNameNr_GlyphContext,
        {5, 255, 0},
        0, 0,
        0, 0,
        1, variables_tlp_GlyphContext,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlyphContext,
    -1,
    -1,
    0,
    0,
    init_tlp_GlyphContext,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlyphContext,
    assign_tlp_GlyphContext,
    array_tlp_GlyphContext,
    copy_tlp_GlyphContext,
    release_tlp_GlyphContext,
    cast_tlp_GlyphContext,
    0,
    0,
    0
};
