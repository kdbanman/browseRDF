/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Fri Apr 26 16:35:20 2013
 */

#include "sipAPItulipogl.h"

#line 36 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <tulip/GlSimpleEntity.h>
#line 12 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"

#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 16 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"
#line 33 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 19 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"
#line 31 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 22 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 25 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"
#line 30 "/home/kdbanman/Desktop/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 28 "/home/kdbanman/Desktop/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSimpleEntity.cpp"


class siptlp_GlSimpleEntity : public tlp::GlSimpleEntity
{
public:
    siptlp_GlSimpleEntity();
    siptlp_GlSimpleEntity(const tlp::GlSimpleEntity&);
    virtual ~siptlp_GlSimpleEntity();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(float,tlp::Camera *);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void setVisible(bool);
    void setStencil(int);
    tlp::BoundingBox getBoundingBox();
    void translate(const tlp::Coord&);
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlSimpleEntity(const siptlp_GlSimpleEntity &);
    siptlp_GlSimpleEntity &operator = (const siptlp_GlSimpleEntity &);

    char sipPyMethods[8];
};

siptlp_GlSimpleEntity::siptlp_GlSimpleEntity(): tlp::GlSimpleEntity(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlSimpleEntity::siptlp_GlSimpleEntity(const tlp::GlSimpleEntity& a0): tlp::GlSimpleEntity(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlSimpleEntity::~siptlp_GlSimpleEntity()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlSimpleEntity::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_GlSimpleEntity,sipName_draw);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlSimpleEntity::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlSimpleEntity::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void siptlp_GlSimpleEntity::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlSimpleEntity::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlSimpleEntity::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlSimpleEntity::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_GlSimpleEntity,sipName_getXML);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlSimpleEntity::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_GlSimpleEntity,sipName_setWithXML);

    if (!sipMeth)
        return;

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_draw, "tlp.GlSimpleEntity.draw(float, tlp.Camera)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        float a0;
        tlp::Camera * a1;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, &a0, sipType_tlp_Camera, &a1))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GlSimpleEntity, sipName_draw);
                return NULL;
            }

            sipCpp->draw(a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_draw, doc_tlp_GlSimpleEntity_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_acceptVisitor, "tlp.GlSimpleEntity.acceptVisitor(tlp.GlSceneVisitor)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_acceptVisitor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_acceptVisitor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlSceneVisitor * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType_tlp_GlSceneVisitor, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSimpleEntity::acceptVisitor(a0) : sipCpp->acceptVisitor(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_acceptVisitor, doc_tlp_GlSimpleEntity_acceptVisitor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_setVisible, "tlp.GlSimpleEntity.setVisible(bool)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_setVisible(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_setVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        bool a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSimpleEntity::setVisible(a0) : sipCpp->setVisible(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_setVisible, doc_tlp_GlSimpleEntity_setVisible);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_isVisible, "tlp.GlSimpleEntity.isVisible() -> bool");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_isVisible(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_isVisible(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isVisible();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_isVisible, doc_tlp_GlSimpleEntity_isVisible);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_setStencil, "tlp.GlSimpleEntity.setStencil(int)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_setStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_setStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        int a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSimpleEntity::setStencil(a0) : sipCpp->setStencil(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_setStencil, doc_tlp_GlSimpleEntity_setStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_getStencil, "tlp.GlSimpleEntity.getStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_getStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_getStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_getStencil, doc_tlp_GlSimpleEntity_getStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_getBoundingBox, "tlp.GlSimpleEntity.getBoundingBox() -> tlp.BoundingBox");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_getBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_getBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp))
        {
            tlp::BoundingBox *sipRes;

            sipRes = new tlp::BoundingBox((sipSelfWasArg ? sipCpp->tlp::GlSimpleEntity::getBoundingBox() : sipCpp->getBoundingBox()));

            return sipConvertFromNewType(sipRes,sipType_tlp_BoundingBox,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_getBoundingBox, doc_tlp_GlSimpleEntity_getBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_addParent, "tlp.GlSimpleEntity.addParent(tlp.GlComposite)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_addParent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_addParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlComposite * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType_tlp_GlComposite, &a0))
        {
            sipCpp->addParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_addParent, doc_tlp_GlSimpleEntity_addParent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_removeParent, "tlp.GlSimpleEntity.removeParent(tlp.GlComposite)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_removeParent(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_removeParent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlComposite * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType_tlp_GlComposite, &a0))
        {
            sipCpp->removeParent(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_removeParent, doc_tlp_GlSimpleEntity_removeParent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_translate, "tlp.GlSimpleEntity.translate(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_translate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_translate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Coord * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType_tlp_Coord, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlSimpleEntity::translate(*a0) : sipCpp->translate(*a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_translate, doc_tlp_GlSimpleEntity_translate);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_getXML, "tlp.GlSimpleEntity.getXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_getXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_getXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        _xmlNode * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType__xmlNode, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GlSimpleEntity, sipName_getXML);
                return NULL;
            }

            sipCpp->getXML(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_getXML, doc_tlp_GlSimpleEntity_getXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSimpleEntity_setWithXML, "tlp.GlSimpleEntity.setWithXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlSimpleEntity_setWithXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSimpleEntity_setWithXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        _xmlNode * a0;
        tlp::GlSimpleEntity *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlSimpleEntity, &sipCpp, sipType__xmlNode, &a0))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GlSimpleEntity, sipName_setWithXML);
                return NULL;
            }

            sipCpp->setWithXML(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSimpleEntity, sipName_setWithXML, doc_tlp_GlSimpleEntity_setWithXML);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlSimpleEntity(void *, const sipTypeDef *);}
static void *cast_tlp_GlSimpleEntity(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_GlSimpleEntity)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlSimpleEntity(void *, int);}
static void release_tlp_GlSimpleEntity(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlSimpleEntity *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlSimpleEntity *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlSimpleEntity(sipSimpleWrapper *);}
static void dealloc_tlp_GlSimpleEntity(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlSimpleEntity *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlSimpleEntity(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlSimpleEntity(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlSimpleEntity(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlSimpleEntity *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlSimpleEntity();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlSimpleEntity * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlSimpleEntity, &a0))
        {
            sipCpp = new siptlp_GlSimpleEntity(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_GlSimpleEntity[] = {
    {SIP_MLNAME_CAST(sipName_acceptVisitor), meth_tlp_GlSimpleEntity_acceptVisitor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_acceptVisitor)},
    {SIP_MLNAME_CAST(sipName_addParent), meth_tlp_GlSimpleEntity_addParent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_addParent)},
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_GlSimpleEntity_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_draw)},
    {SIP_MLNAME_CAST(sipName_getBoundingBox), meth_tlp_GlSimpleEntity_getBoundingBox, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_getBoundingBox)},
    {SIP_MLNAME_CAST(sipName_getStencil), meth_tlp_GlSimpleEntity_getStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_getStencil)},
    {SIP_MLNAME_CAST(sipName_getXML), meth_tlp_GlSimpleEntity_getXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_getXML)},
    {SIP_MLNAME_CAST(sipName_isVisible), meth_tlp_GlSimpleEntity_isVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_isVisible)},
    {SIP_MLNAME_CAST(sipName_removeParent), meth_tlp_GlSimpleEntity_removeParent, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_removeParent)},
    {SIP_MLNAME_CAST(sipName_setStencil), meth_tlp_GlSimpleEntity_setStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_setStencil)},
    {SIP_MLNAME_CAST(sipName_setVisible), meth_tlp_GlSimpleEntity_setVisible, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_setVisible)},
    {SIP_MLNAME_CAST(sipName_setWithXML), meth_tlp_GlSimpleEntity_setWithXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_setWithXML)},
    {SIP_MLNAME_CAST(sipName_translate), meth_tlp_GlSimpleEntity_translate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSimpleEntity_translate)}
};

PyDoc_STRVAR(doc_tlp_GlSimpleEntity, "\1tlp.GlSimpleEntity()\n"
    "tlp.GlSimpleEntity(tlp.GlSimpleEntity)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlSimpleEntity = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__GlSimpleEntity,
        {0}
    },
    {
        sipNameNr_GlSimpleEntity,
        {5, 255, 0},
        12, methods_tlp_GlSimpleEntity,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlSimpleEntity,
    -1,
    -1,
    0,
    0,
    init_tlp_GlSimpleEntity,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlSimpleEntity,
    0,
    0,
    0,
    release_tlp_GlSimpleEntity,
    cast_tlp_GlSimpleEntity,
    0,
    0,
    0
};
