/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:50:53 2013
 */

#include "sipAPItulipogl.h"

#line 9 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphRenderingParameters.sip"
#include <tulip/GlGraphRenderingParameters.h>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphRenderingParameters.cpp"

#line 32 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BooleanProperty.sip"
#include <tulip/BooleanProperty.h>
#line 16 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphRenderingParameters.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 19 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphRenderingParameters.cpp"
#line 32 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/DoubleProperty.sip"
#include <tulip/DoubleProperty.h>
#line 22 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphRenderingParameters.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 26 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphRenderingParameters.cpp"


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getPointModeLOD, "tlp.GlGraphRenderingParameters.getPointModeLOD()\n"
    "\n"
    "Returns the Level Of Detail threshold below which point rendering for nodes and edges\n"
    "(typically when far from the camera) is activated.\n"
    "\n"
    ":rtype: float");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getPointModeLOD(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getPointModeLOD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getPointModeLOD();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getPointModeLOD, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setPointModeLOD, "tlp.GlGraphRenderingParameters.setPointModeLOD(lod)\n"
    "\n"
    "Sets the Level Of Detail threshold below which point rendering for nodes and edges\n"
    "(typically when far from the camera) is activated.\n"
    "\n"
    ":param lod: the Level Of Detail threshold value\n"
    ":type lod: float");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setPointModeLOD(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setPointModeLOD(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setPointModeLOD(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setPointModeLOD, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setAntialiasing, "tlp.GlGraphRenderingParameters.setAntiAliasing(antialiasing)\n"
    "\n"
    "Activates/desactivates antialiasing.\n"
    "\n"
    ":param antialiasing: the antialiasing state\n"
    ":type antialiasing: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setAntialiasing(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setAntialiasing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setAntialiasing(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setAntialiasing, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isAntialiased, "tlp.GlGraphRenderingParameters.isAntialiased()\n"
    "\n"
    "Returns if antialiasing rendering is activated.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isAntialiased(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isAntialiased(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isAntialiased();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isAntialiased, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setViewArrow, "tlp.GlGraphRenderingParameters.setViewArrow(arrow)\n"
    "\n"
    "Activates / desactivates the displaying of arrows along the graph edges.\n"
    "\n"
    ":param arrow: the state of the arrows rendering\n"
    ":type arrow: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setViewArrow(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setViewArrow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setViewArrow(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setViewArrow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isViewArrow, "tlp.GlGraphRenderingParameters.isViewArrow()\n"
    "\n"
    "Returns the state of the displaying of arrows along the graph edges.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isViewArrow(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isViewArrow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewArrow();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isViewArrow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setViewNodeLabel, "tlp.GlGraphRenderingParameters.setViewNodeLabel(nodeLabel)\n"
    "\n"
    "Activates / desactivates the displaying of nodes labels.\n"
    "\n"
    ":param nodeLabel: the state of the nodes labels rendering\n"
    ":type nodeLabel: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setViewNodeLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setViewNodeLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setViewNodeLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setViewNodeLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isViewNodeLabel, "tlp.GlGraphRenderingParameters.isViewNodeLabel()\n"
    "\n"
    "Returns the state of the displaying of nodes labels.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isViewNodeLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isViewNodeLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewNodeLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isViewNodeLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setViewEdgeLabel, "tlp.GlGraphRenderingParameters.setViewEdgeLabel(edgeLabel)\n"
    "\n"
    "Activates / desactivates the displaying of edges labels.\n"
    "\n"
    ":param edgeLabel: the state of the edges labels rendering\n"
    ":type edgeLabel: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setViewEdgeLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setViewEdgeLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setViewEdgeLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setViewEdgeLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isViewEdgeLabel, "tlp.GlGraphRenderingParameters.isViewEdgeLabel()\n"
    "\n"
    "Returns the state of the displaying of edges labels.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isViewEdgeLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isViewEdgeLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewEdgeLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isViewEdgeLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setViewOutScreenLabel, "tlp.GlGraphRenderingParameters.setViewOutScreenLabel(outScreenLabel)\n"
    "\n"
    "Activates / desactivates the displaying of labels for elements outside the screen.\n"
    "\n"
    ":param outScreenLabel: the state of the labels rendering for elements outside the screen.\n"
    ":type outScreenLabel: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setViewOutScreenLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setViewOutScreenLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setViewOutScreenLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setViewOutScreenLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isViewOutScreenLabel, "tlp.GlGraphRenderingParameters.isViewOutScreenLabel()\n"
    "\n"
    "Returns the state of the displaying of labels for elements outside the screen.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isViewOutScreenLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isViewOutScreenLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewOutScreenLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isViewOutScreenLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setEdgeColorInterpolate, "tlp.GlGraphRenderingParameters.setEdgeColorInterpolate(interpolate)\n"
    "\n"
    "Activates / desactivates the interpolation of nodes colors along edges.\n"
    "\n"
    ":param interpolate: the state of the edge color interpolation\n"
    ":type interpolate: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgeColorInterpolate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgeColorInterpolate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setEdgeColorInterpolate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setEdgeColorInterpolate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isEdgeColorInterpolate, "tlp.GlGraphRenderingParameters.isEdgeColorInterpolate()\n"
    "\n"
    "Returns the state of the edge color interpolation.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isEdgeColorInterpolate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isEdgeColorInterpolate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEdgeColorInterpolate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isEdgeColorInterpolate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setEdgeSizeInterpolate, "tlp.GlGraphRenderingParameters.setEdgeSizeInterpolate(interpolate)\n"
    "\n"
    "Activates / desactivates the interpolation of nodes sizes along edges.\n"
    "\n"
    ":param interpolate: the state of the edge size interpolation\n"
    ":type interpolate: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgeSizeInterpolate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgeSizeInterpolate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setEdgeSizeInterpolate(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setEdgeSizeInterpolate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isEdgeSizeInterpolate, "tlp.GlGraphRenderingParameters.isEdgeSizeInterpolate()\n"
    "\n"
    "Returns the state of the edge size interpolation.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isEdgeSizeInterpolate(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isEdgeSizeInterpolate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEdgeSizeInterpolate();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isEdgeSizeInterpolate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setTexturePath, "tlp.GlGraphRenderingParameters.setTexturePath(path)\n"
    "\n"
    "Sets the absolute path for textures loading.\n"
    "\n"
    ":param path: the absolute path of a directory for textures loading.\n"
    ":type path: string");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setTexturePath(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setTexturePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setTexturePath(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setTexturePath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getTexturePath, "tlp.GlGraphRenderingParameters.getTexturePath()\n"
    "\n"
    "Returns the absolute path used for texture loading.\n"
    "\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getTexturePath(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getTexturePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getTexturePath());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getTexturePath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setFontsPath, "tlp.GlGraphRenderingParameters.setFontsPath(path)\n"
    "\n"
    "Sets the absolute path for fonts loading (.ttf files).\n"
    "\n"
    ":param path: the absolute path of a directory for fonts loading.\n"
    ":type path: string");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setFontsPath(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setFontsPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setFontsPath(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setFontsPath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getFontsPath, "tlp.GlGraphRenderingParameters.getFontsPath()\n"
    "\n"
    "Returns the absolute path used for fonts loading (.ttf files).\n"
    "\n"
    ":rtype: string");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getFontsPath(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getFontsPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getFontsPath());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getFontsPath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setViewMetaLabel, "tlp.GlGraphRenderingParameters.setViewMetaLabel(metaLabel)\n"
    "\n"
    "Activates / desactivates the displaying of labels inside meta-nodes.\n"
    "\n"
    ":param metaLabel: the state of the displaying of labels inside meta-nodes.\n"
    ":type edgeLabel: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setViewMetaLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setViewMetaLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setViewMetaLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setViewMetaLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isViewMetaLabel, "tlp.GlGraphRenderingParameters.isViewMetaLabel()\n"
    "\n"
    "Returns the state of the displaying of labels inside meta-nodes.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isViewMetaLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isViewMetaLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isViewMetaLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isViewMetaLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setDisplayEdges, "tlp.GlGraphRenderingParameters.setDisplayEdges(displayEdges)\n"
    "\n"
    "Activates / desactivates the displaying of edges.\n"
    "\n"
    ":param displayEdges: the state of the displaying of edges.\n"
    ":type displayEdges: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setDisplayEdges(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setDisplayEdges, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isDisplayEdges, "tlp.GlGraphRenderingParameters.isDisplayEdges()\n"
    "\n"
    "Returns the state of the displaying of edges.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayEdges();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isDisplayEdges, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setDisplayNodes, "tlp.GlGraphRenderingParameters.setDisplayNodes(displayNodes)\n"
    "\n"
    "Activates / desactivates the displaying of nodes.\n"
    "\n"
    ":param displayNodes: the state of the displaying of nodes.\n"
    ":type displayNodes: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setDisplayNodes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setDisplayNodes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isDisplayNodes, "tlp.GlGraphRenderingParameters.isDisplayNodes()\n"
    "\n"
    "Returns the state of the displaying of nodes.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isDisplayNodes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setDisplayMetaNodes, "tlp.GlGraphRenderingParameters.setDisplayMetaNodes(displayMetaNodes)\n"
    "\n"
    "Activates / desactivates the displaying of nodes.\n"
    "\n"
    ":param displayMetaNodes: the state of the displaying of meta-nodes.\n"
    ":type displayMetaNodes: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayMetaNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayMetaNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setDisplayMetaNodes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setDisplayMetaNodes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isDisplayMetaNodes, "tlp.GlGraphRenderingParameters.isDisplayMetaNodes()\n"
    "\n"
    "Returns the state of the displaying of meta-nodes.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayMetaNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isDisplayMetaNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayMetaNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isDisplayMetaNodes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setSelectedNodesStencil, "tlp.GlGraphRenderingParameters.setSelectedNodesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for selected nodes. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 2.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setSelectedNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setSelectedNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getSelectedNodesStencil, "tlp.GlGraphRenderingParameters.getSelectedNodesStencil()\n"
    "\n"
    "Returns the stencil value for selected nodes.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getSelectedNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setSelectedMetaNodesStencil, "tlp.GlGraphRenderingParameters.setSelectedMetaNodesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for selected meta-nodes. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 2.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setSelectedMetaNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setSelectedMetaNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getSelectedMetaNodesStencil, "tlp.GlGraphRenderingParameters.getSelectedMetaNodesStencil()\n"
    "\n"
    "Returns the stencil value for selected meta-nodes.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedMetaNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getSelectedMetaNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setSelectedEdgesStencil, "tlp.GlGraphRenderingParameters.setSelectedEdgesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for selected edges. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 2.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectedEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setSelectedEdgesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setSelectedEdgesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getSelectedEdgesStencil, "tlp.GlGraphRenderingParameters.getSelectedEdgesStencil()\n"
    "\n"
    "Returns the stencil value for selected edges.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectedEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedEdgesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getSelectedEdgesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setNodesStencil, "tlp.GlGraphRenderingParameters.setNodesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for nodes. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getNodesStencil, "tlp.GlGraphRenderingParameters.getNodesStencil()\n"
    "\n"
    "Returns the stencil value for nodes.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setMetaNodesStencil, "tlp.GlGraphRenderingParameters.setMetaNodesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for meta-nodes. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setMetaNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setMetaNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getMetaNodesStencil, "tlp.GlGraphRenderingParameters.getMetaNodesStencil()\n"
    "\n"
    "Returns the stencil value for meta-nodes.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMetaNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getMetaNodesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setEdgesStencil, "tlp.GlGraphRenderingParameters.setEdgesStencil(stencil)\n"
    "\n"
    "Sets the stencil value for edges. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setEdgesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setEdgesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getEdgesStencil, "tlp.GlGraphRenderingParameters.getEdgesStencil()\n"
    "\n"
    "Returns the stencil value for edges.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getEdgesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getEdgesStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setNodesLabelStencil, "tlp.GlGraphRenderingParameters.setNodesLabelStencil(stencil)\n"
    "\n"
    "Sets the stencil value for nodes labels. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setNodesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setNodesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getNodesLabelStencil, "tlp.GlGraphRenderingParameters.getNodesLabelStencil()\n"
    "\n"
    "Returns the stencil value for nodes labels.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getNodesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getNodesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setMetaNodesLabelStencil, "tlp.GlGraphRenderingParameters.setMetaNodesLabelsStencil(stencil)\n"
    "\n"
    "Sets the stencil value for meta-nodes labels. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setMetaNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setMetaNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setMetaNodesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setMetaNodesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getMetaNodesLabelStencil, "tlp.GlGraphRenderingParameters.getMetaNodesLabelStencil()\n"
    "\n"
    "Returns the stencil value for meta-nodes labels.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getMetaNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getMetaNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMetaNodesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getMetaNodesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setEdgesLabelStencil, "tlp.GlGraphRenderingParameters.setEdgesLabelStencil(stencil)\n"
    "\n"
    "Sets the stencil value for edges labels. The lower the value is, the more the objects will be drawn\n"
    "on top of other ones. The default value is 255.\n"
    "\n"
    ":param stencil: a value in the range [0, 255]\n"
    ":type stencil: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setEdgesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setEdgesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setEdgesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getEdgesLabelStencil, "tlp.GlGraphRenderingParameters.getEdgesLabelStencil()\n"
    "\n"
    "Returns the stencil value for edges labels.\n"
    "\n"
    ":rtype: integer ");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getEdgesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getEdgesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getEdgesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getEdgesLabelStencil, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setElementOrdered, "tlp.GlGraphRenderingParameters.setElementOrdered(elementOrdered)\n"
    "\n"
    "Activates / desactivates the ordered rendering of graph elements according\n"
    "to the values in the \"viewMetric\" double property.\n"
    "\n"
    ":param elementsOrdered: the state of the ordered rendering\n"
    ":type elementOrdered: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setElementOrdered(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setElementOrdered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setElementOrdered(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setElementOrdered, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isElementOrdered, "tlp.GlGraphRenderingParameters.isElementOrdered()\n"
    "\n"
    "Returns the state of the ordered rendering of graph elements.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isElementOrdered(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isElementOrdered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isElementOrdered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isElementOrdered, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setElementOrderingProperty, "tlp.GlGraphRenderingParameters.setElementOrderingProperty(property)\n"
    "\n"
    "Defines which property should be used for the ordered rendering of graph elements.\n"
    "Setting it to :const:`None` will use the \"viewMetric\" property if the ordering is enabled.\n"
    "\n"
    ":param property: the property to use to order the rendering of graph elements\n"
    ":type property: :class:`tulip.tlp.DoubleProperty`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setElementOrderingProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setElementOrderingProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::DoubleProperty * a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, sipType_tlp_DoubleProperty, &a0))
        {
            sipCpp->setElementOrderingProperty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setElementOrderingProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getElementOrderingProperty, "tlp.GlGraphRenderingParameters.getElementOrderingProperty()\n"
    "\n"
    "Returns the double property used for the ordered rendering of graph elements.\n"
    "\n"
    ":rtype: :class:`tulip.tlp.DoubleProperty`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getElementOrderingProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getElementOrderingProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            tlp::DoubleProperty *sipRes;

            sipRes = sipCpp->getElementOrderingProperty();

            return sipConvertFromType(sipRes,sipType_tlp_DoubleProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getElementOrderingProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setElementZOrdered, "tlp.GlGraphRenderingParameters.setElementZOrdered(zOrdering)\n"
    "\n"
    "Activates / desactivates the ordered rendering of elements according to their\n"
    "distance to the camera.\n"
    "\n"
    ":param zOrdering: the state of the z-ordered rendering\n"
    ":type zOrdering: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setElementZOrdered(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setElementZOrdered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setElementZOrdered(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setElementZOrdered, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isElementZOrdered, "tlp.GlGraphRenderingParameters.isElementZOrdered()\n"
    "\n"
    "Returns the state of the z-ordered rendering.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isElementZOrdered(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isElementZOrdered(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isElementZOrdered();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isElementZOrdered, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setEdge3D, "tlp.GlGraphRenderingParameters.setEdge3D(edge3d)\n"
    "\n"
    "Activates / desactivates the 3d displaying of edges instead of 2d lines.\n"
    "\n"
    ":param edge3d: the state of the 3d edge rendering\n"
    ":type edge3d: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setEdge3D(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setEdge3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setEdge3D(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setEdge3D, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isEdge3D, "tlp.GlGraphRenderingParameters.isEdge3D()\n"
    "\n"
    "Returns the state of the 3d edge rendering.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isEdge3D(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isEdge3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isEdge3D();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isEdge3D, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setSelectionColor, "tlp.GlGraphRenderingParameters.setSelectionColor(color)\n"
    "\n"
    "Sets the color of selected elements.\n"
    "\n"
    ":param color: the selection color\n"
    ":type color: :class:`tulip.tlp.Color`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectionColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setSelectionColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Color * a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setSelectionColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setSelectionColor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getSelectionColor, "tlp.GlGraphRenderingParameters.getSelectionColor()\n"
    "\n"
    "Returns the color of selection.\n"
    "\n"
    ":rtype: :class:`tulip.tlp.Color`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectionColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getSelectionColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getSelectionColor());

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getSelectionColor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_isLabelScaled, "tlp.GlGraphRenderingParameters.isLabelScaled()\n"
    "\n"
    "Returns the state of the scaling of labels to nodes sizes.\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_isLabelScaled(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_isLabelScaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isLabelScaled();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_isLabelScaled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setLabelScaled, "tlp.GlGraphRenderingParameters.setLabelScaled(labelScaled)\n"
    "\n"
    "Activates / desactivates the scaling of labels to nodes sizes.\n"
    "\n"
    ":param labelScaled: the state of the scaling of labels to nodes sizes.\n"
    ":type labelScaled: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelScaled(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelScaled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setLabelScaled(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setLabelScaled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getLabelsDensity, "tlp.GlGraphRenderingParameters.getLabelsDensity()\n"
    "\n"
    "Returns the labels density value.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getLabelsDensity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getLabelsDensity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getLabelsDensity();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getLabelsDensity, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setLabelsDensity, "tlp.GlGraphRenderingParameters.setLabelsDensity(density)\n"
    "\n"
    "Sets the labels density value. It must be in the range [-100, 100].\n"
    "The labels are displayed according to that value :\n"
    "\n"
    "  * -100 : no labels are displayed\n"
    "  * 0 : only non overlapping labels are displayed\n"
    "  * 100 : all labels are displayed\n"
    "\n"
    ":param density: a value in the range [-100, 100]\n"
    ":type density: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelsDensity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelsDensity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setLabelsDensity(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setLabelsDensity, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getMinSizeOfLabel, "tlp.GlGraphRenderingParameters.getMinSizeOfLabel()\n"
    "\n"
    "Returns the minimum size of labels. That value is only used if the labels\n"
    "are not scaled to nodes sizes.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getMinSizeOfLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getMinSizeOfLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMinSizeOfLabel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getMinSizeOfLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setMinSizeOfLabel, "tlp.GlGraphRenderingParameters.setMinSizeOfLabel(size)\n"
    "\n"
    "Sets the minimum size of labels. That value is only used if the labels\n"
    "are not scaled to nodes sizes.\n"
    "\n"
    ":param size: the minimum size of labels\n"
    ":type: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setMinSizeOfLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setMinSizeOfLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setMinSizeOfLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setMinSizeOfLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getMaxSizeOfLabel, "tlp.GlGraphRenderingParameters.getMaxSizeOfLabel()\n"
    "\n"
    "Returns the maximum size of labels. That value is only used if the labels\n"
    "are not scaled to nodes sizes.\n"
    "\n"
    ":rtype: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getMaxSizeOfLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getMaxSizeOfLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMaxSizeOfLabel();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getMaxSizeOfLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setMaxSizeOfLabel, "tlp.GlGraphRenderingParameters.setMaxSizeOfLabel(size)\n"
    "\n"
    "Sets the maximum size of labels. That value is only used if the labels\n"
    "are not scaled to nodes sizes.\n"
    "\n"
    ":param size: the maximum size of labels\n"
    ":type: integer");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setMaxSizeOfLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setMaxSizeOfLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setMaxSizeOfLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setMaxSizeOfLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getLabelsAreBillboarded, "tlp.GlGraphRenderingParameters.getLabelsAreBillboarded()\n"
    "\n"
    "Returns the state of the labels billboarding (always facing the camera).\n"
    "\n"
    ":rtype: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getLabelsAreBillboarded(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getLabelsAreBillboarded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->getLabelsAreBillboarded();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getLabelsAreBillboarded, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setLabelsAreBillboarded, "tlp.GlGraphRenderingParameters.setLabelsAreBillboarded(billboardLabels)\n"
    "\n"
    "Activates / desactivates labels billboarding (always facing the camera).\n"
    "\n"
    ":param billboardLabels: the state of labels billboarding\n"
    ":type billboardLabels: boolean");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelsAreBillboarded(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setLabelsAreBillboarded(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, &a0))
        {
            sipCpp->setLabelsAreBillboarded(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setLabelsAreBillboarded, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_setDisplayFilteringProperty, "tlp.GlGraphRenderingParameters.setDisplayFilteringProperty(property)\n"
    "\n"
    "Sets the boolean property used to filter the rendering of graph elements. If sets to :const:`None`,\n"
    "the filtering is desactivated. If the value for a node / edge in that property is :const:`False`,\n"
    "it will not be displayed.\n"
    "\n"
    ":param property: the boolean property used to filter the rendering of graph elements\n"
    ":type property: :class:`tulip.tlp.BooleanProperty`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayFilteringProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_setDisplayFilteringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::BooleanProperty * a0;
        tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp, sipType_tlp_BooleanProperty, &a0))
        {
            sipCpp->setDisplayFilteringProperty(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_setDisplayFilteringProperty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters_getDisplayFilteringProperty, "tlp.GlGraphRenderingParameters.getDisplayFilteringProperty()\n"
    "\n"
    "Returns the boolean property used to filter the rendering of graph elements.\n"
    "\n"
    ":rtype: :class:`tulip.tlp.BooleanProperty`");

extern "C" {static PyObject *meth_tlp_GlGraphRenderingParameters_getDisplayFilteringProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphRenderingParameters_getDisplayFilteringProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphRenderingParameters, &sipCpp))
        {
            tlp::BooleanProperty *sipRes;

            sipRes = sipCpp->getDisplayFilteringProperty();

            return sipConvertFromType(sipRes,sipType_tlp_BooleanProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphRenderingParameters, sipName_getDisplayFilteringProperty, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlGraphRenderingParameters(void *, const sipTypeDef *);}
static void *cast_tlp_GlGraphRenderingParameters(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_GlGraphRenderingParameters)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlGraphRenderingParameters(void *, int);}
static void release_tlp_GlGraphRenderingParameters(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::GlGraphRenderingParameters *>(sipCppV);
}


extern "C" {static void assign_tlp_GlGraphRenderingParameters(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlGraphRenderingParameters(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlGraphRenderingParameters *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlGraphRenderingParameters *>(sipSrc);
}


extern "C" {static void *array_tlp_GlGraphRenderingParameters(SIP_SSIZE_T);}
static void *array_tlp_GlGraphRenderingParameters(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlGraphRenderingParameters[sipNrElem];
}


extern "C" {static void *copy_tlp_GlGraphRenderingParameters(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlGraphRenderingParameters(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlGraphRenderingParameters(reinterpret_cast<const tlp::GlGraphRenderingParameters *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlGraphRenderingParameters(sipSimpleWrapper *);}
static void dealloc_tlp_GlGraphRenderingParameters(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlGraphRenderingParameters(sipGetAddress(sipSelf),0);
    }
}


extern "C" {static void *init_tlp_GlGraphRenderingParameters(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlGraphRenderingParameters(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    tlp::GlGraphRenderingParameters *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new tlp::GlGraphRenderingParameters();

            return sipCpp;
        }
    }

    {
        const tlp::GlGraphRenderingParameters * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlGraphRenderingParameters, &a0))
        {
            sipCpp = new tlp::GlGraphRenderingParameters(*a0);

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_tlp_GlGraphRenderingParameters[] = {
    {SIP_MLNAME_CAST(sipName_getDisplayFilteringProperty), meth_tlp_GlGraphRenderingParameters_getDisplayFilteringProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getDisplayFilteringProperty)},
    {SIP_MLNAME_CAST(sipName_getEdgesLabelStencil), meth_tlp_GlGraphRenderingParameters_getEdgesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getEdgesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getEdgesStencil), meth_tlp_GlGraphRenderingParameters_getEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_getElementOrderingProperty), meth_tlp_GlGraphRenderingParameters_getElementOrderingProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getElementOrderingProperty)},
    {SIP_MLNAME_CAST(sipName_getFontsPath), meth_tlp_GlGraphRenderingParameters_getFontsPath, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getFontsPath)},
    {SIP_MLNAME_CAST(sipName_getLabelsAreBillboarded), meth_tlp_GlGraphRenderingParameters_getLabelsAreBillboarded, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getLabelsAreBillboarded)},
    {SIP_MLNAME_CAST(sipName_getLabelsDensity), meth_tlp_GlGraphRenderingParameters_getLabelsDensity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getLabelsDensity)},
    {SIP_MLNAME_CAST(sipName_getMaxSizeOfLabel), meth_tlp_GlGraphRenderingParameters_getMaxSizeOfLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getMaxSizeOfLabel)},
    {SIP_MLNAME_CAST(sipName_getMetaNodesLabelStencil), meth_tlp_GlGraphRenderingParameters_getMetaNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getMetaNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getMetaNodesStencil), meth_tlp_GlGraphRenderingParameters_getMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getMinSizeOfLabel), meth_tlp_GlGraphRenderingParameters_getMinSizeOfLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getMinSizeOfLabel)},
    {SIP_MLNAME_CAST(sipName_getNodesLabelStencil), meth_tlp_GlGraphRenderingParameters_getNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getNodesStencil), meth_tlp_GlGraphRenderingParameters_getNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getPointModeLOD), meth_tlp_GlGraphRenderingParameters_getPointModeLOD, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getPointModeLOD)},
    {SIP_MLNAME_CAST(sipName_getSelectedEdgesStencil), meth_tlp_GlGraphRenderingParameters_getSelectedEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getSelectedEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_getSelectedMetaNodesStencil), meth_tlp_GlGraphRenderingParameters_getSelectedMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getSelectedMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getSelectedNodesStencil), meth_tlp_GlGraphRenderingParameters_getSelectedNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getSelectedNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getSelectionColor), meth_tlp_GlGraphRenderingParameters_getSelectionColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getSelectionColor)},
    {SIP_MLNAME_CAST(sipName_getTexturePath), meth_tlp_GlGraphRenderingParameters_getTexturePath, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_getTexturePath)},
    {SIP_MLNAME_CAST(sipName_isAntialiased), meth_tlp_GlGraphRenderingParameters_isAntialiased, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isAntialiased)},
    {SIP_MLNAME_CAST(sipName_isDisplayEdges), meth_tlp_GlGraphRenderingParameters_isDisplayEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isDisplayEdges)},
    {SIP_MLNAME_CAST(sipName_isDisplayMetaNodes), meth_tlp_GlGraphRenderingParameters_isDisplayMetaNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isDisplayMetaNodes)},
    {SIP_MLNAME_CAST(sipName_isDisplayNodes), meth_tlp_GlGraphRenderingParameters_isDisplayNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isDisplayNodes)},
    {SIP_MLNAME_CAST(sipName_isEdge3D), meth_tlp_GlGraphRenderingParameters_isEdge3D, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isEdge3D)},
    {SIP_MLNAME_CAST(sipName_isEdgeColorInterpolate), meth_tlp_GlGraphRenderingParameters_isEdgeColorInterpolate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isEdgeColorInterpolate)},
    {SIP_MLNAME_CAST(sipName_isEdgeSizeInterpolate), meth_tlp_GlGraphRenderingParameters_isEdgeSizeInterpolate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isEdgeSizeInterpolate)},
    {SIP_MLNAME_CAST(sipName_isElementOrdered), meth_tlp_GlGraphRenderingParameters_isElementOrdered, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isElementOrdered)},
    {SIP_MLNAME_CAST(sipName_isElementZOrdered), meth_tlp_GlGraphRenderingParameters_isElementZOrdered, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isElementZOrdered)},
    {SIP_MLNAME_CAST(sipName_isLabelScaled), meth_tlp_GlGraphRenderingParameters_isLabelScaled, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isLabelScaled)},
    {SIP_MLNAME_CAST(sipName_isViewArrow), meth_tlp_GlGraphRenderingParameters_isViewArrow, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isViewArrow)},
    {SIP_MLNAME_CAST(sipName_isViewEdgeLabel), meth_tlp_GlGraphRenderingParameters_isViewEdgeLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isViewEdgeLabel)},
    {SIP_MLNAME_CAST(sipName_isViewMetaLabel), meth_tlp_GlGraphRenderingParameters_isViewMetaLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isViewMetaLabel)},
    {SIP_MLNAME_CAST(sipName_isViewNodeLabel), meth_tlp_GlGraphRenderingParameters_isViewNodeLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isViewNodeLabel)},
    {SIP_MLNAME_CAST(sipName_isViewOutScreenLabel), meth_tlp_GlGraphRenderingParameters_isViewOutScreenLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_isViewOutScreenLabel)},
    {SIP_MLNAME_CAST(sipName_setAntialiasing), meth_tlp_GlGraphRenderingParameters_setAntialiasing, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setAntialiasing)},
    {SIP_MLNAME_CAST(sipName_setDisplayEdges), meth_tlp_GlGraphRenderingParameters_setDisplayEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setDisplayEdges)},
    {SIP_MLNAME_CAST(sipName_setDisplayFilteringProperty), meth_tlp_GlGraphRenderingParameters_setDisplayFilteringProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setDisplayFilteringProperty)},
    {SIP_MLNAME_CAST(sipName_setDisplayMetaNodes), meth_tlp_GlGraphRenderingParameters_setDisplayMetaNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setDisplayMetaNodes)},
    {SIP_MLNAME_CAST(sipName_setDisplayNodes), meth_tlp_GlGraphRenderingParameters_setDisplayNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setDisplayNodes)},
    {SIP_MLNAME_CAST(sipName_setEdge3D), meth_tlp_GlGraphRenderingParameters_setEdge3D, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setEdge3D)},
    {SIP_MLNAME_CAST(sipName_setEdgeColorInterpolate), meth_tlp_GlGraphRenderingParameters_setEdgeColorInterpolate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setEdgeColorInterpolate)},
    {SIP_MLNAME_CAST(sipName_setEdgeSizeInterpolate), meth_tlp_GlGraphRenderingParameters_setEdgeSizeInterpolate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setEdgeSizeInterpolate)},
    {SIP_MLNAME_CAST(sipName_setEdgesLabelStencil), meth_tlp_GlGraphRenderingParameters_setEdgesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setEdgesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setEdgesStencil), meth_tlp_GlGraphRenderingParameters_setEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_setElementOrdered), meth_tlp_GlGraphRenderingParameters_setElementOrdered, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setElementOrdered)},
    {SIP_MLNAME_CAST(sipName_setElementOrderingProperty), meth_tlp_GlGraphRenderingParameters_setElementOrderingProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setElementOrderingProperty)},
    {SIP_MLNAME_CAST(sipName_setElementZOrdered), meth_tlp_GlGraphRenderingParameters_setElementZOrdered, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setElementZOrdered)},
    {SIP_MLNAME_CAST(sipName_setFontsPath), meth_tlp_GlGraphRenderingParameters_setFontsPath, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setFontsPath)},
    {SIP_MLNAME_CAST(sipName_setLabelScaled), meth_tlp_GlGraphRenderingParameters_setLabelScaled, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setLabelScaled)},
    {SIP_MLNAME_CAST(sipName_setLabelsAreBillboarded), meth_tlp_GlGraphRenderingParameters_setLabelsAreBillboarded, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setLabelsAreBillboarded)},
    {SIP_MLNAME_CAST(sipName_setLabelsDensity), meth_tlp_GlGraphRenderingParameters_setLabelsDensity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setLabelsDensity)},
    {SIP_MLNAME_CAST(sipName_setMaxSizeOfLabel), meth_tlp_GlGraphRenderingParameters_setMaxSizeOfLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setMaxSizeOfLabel)},
    {SIP_MLNAME_CAST(sipName_setMetaNodesLabelStencil), meth_tlp_GlGraphRenderingParameters_setMetaNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setMetaNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setMetaNodesStencil), meth_tlp_GlGraphRenderingParameters_setMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setMinSizeOfLabel), meth_tlp_GlGraphRenderingParameters_setMinSizeOfLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setMinSizeOfLabel)},
    {SIP_MLNAME_CAST(sipName_setNodesLabelStencil), meth_tlp_GlGraphRenderingParameters_setNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setNodesStencil), meth_tlp_GlGraphRenderingParameters_setNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setPointModeLOD), meth_tlp_GlGraphRenderingParameters_setPointModeLOD, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setPointModeLOD)},
    {SIP_MLNAME_CAST(sipName_setSelectedEdgesStencil), meth_tlp_GlGraphRenderingParameters_setSelectedEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setSelectedEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_setSelectedMetaNodesStencil), meth_tlp_GlGraphRenderingParameters_setSelectedMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setSelectedMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setSelectedNodesStencil), meth_tlp_GlGraphRenderingParameters_setSelectedNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setSelectedNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setSelectionColor), meth_tlp_GlGraphRenderingParameters_setSelectionColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setSelectionColor)},
    {SIP_MLNAME_CAST(sipName_setTexturePath), meth_tlp_GlGraphRenderingParameters_setTexturePath, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setTexturePath)},
    {SIP_MLNAME_CAST(sipName_setViewArrow), meth_tlp_GlGraphRenderingParameters_setViewArrow, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setViewArrow)},
    {SIP_MLNAME_CAST(sipName_setViewEdgeLabel), meth_tlp_GlGraphRenderingParameters_setViewEdgeLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setViewEdgeLabel)},
    {SIP_MLNAME_CAST(sipName_setViewMetaLabel), meth_tlp_GlGraphRenderingParameters_setViewMetaLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setViewMetaLabel)},
    {SIP_MLNAME_CAST(sipName_setViewNodeLabel), meth_tlp_GlGraphRenderingParameters_setViewNodeLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setViewNodeLabel)},
    {SIP_MLNAME_CAST(sipName_setViewOutScreenLabel), meth_tlp_GlGraphRenderingParameters_setViewOutScreenLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphRenderingParameters_setViewOutScreenLabel)}
};

PyDoc_STRVAR(doc_tlp_GlGraphRenderingParameters, ".. versionadded:: 3.8\n"
    "\n"
    "That class holds all the rendering parameters for a Tulip OpenGL graph drawing.");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlGraphRenderingParameters = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlGraphRenderingParameters,
        {0}
    },
    {
        sipNameNr_GlGraphRenderingParameters,
        {5, 255, 0},
        68, methods_tlp_GlGraphRenderingParameters,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlGraphRenderingParameters,
    -1,
    -1,
    0,
    0,
    init_tlp_GlGraphRenderingParameters,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlGraphRenderingParameters,
    assign_tlp_GlGraphRenderingParameters,
    array_tlp_GlGraphRenderingParameters,
    copy_tlp_GlGraphRenderingParameters,
    release_tlp_GlGraphRenderingParameters,
    cast_tlp_GlGraphRenderingParameters,
    0,
    0,
    0
};
