/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphInputData.sip"
#include <tulip/GlGraphInputData.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"

#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/IntegerProperty.sip"
#include <tulip/IntegerProperty.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/ColorProperty.sip"
#include <tulip/ColorProperty.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/DoubleProperty.sip"
#include <tulip/DoubleProperty.h>
#line 22 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/StringProperty.sip"
#include <tulip/StringProperty.h>
#line 25 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/LayoutProperty.sip"
#include <tulip/LayoutProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BooleanProperty.sip"
#include <tulip/BooleanProperty.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/SizeProperty.sip"
#include <tulip/SizeProperty.h>
#line 34 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Graph.sip"
#include <tulip/Graph.h>
#line 51 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 9 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphRenderingParameters.sip"
#include <tulip/GlGraphRenderingParameters.h>
#line 54 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 58 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphInputData.cpp"


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getGraph, "tlp.GlGraphInputData.getGraph() -> tlp.Graph");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getGraph(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::Graph *sipRes;

            sipRes = sipCpp->getGraph();

            return sipConvertFromType(sipRes,sipType_tlp_Graph,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getGraph, doc_tlp_GlGraphInputData_getGraph);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_reloadLayoutProperty, "tlp.GlGraphInputData.reloadLayoutProperty()");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_reloadLayoutProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_reloadLayoutProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            sipCpp->reloadLayoutProperty();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_reloadLayoutProperty, doc_tlp_GlGraphInputData_reloadLayoutProperty);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getLayoutProperty, "tlp.GlGraphInputData.getLayoutProperty() -> tlp.LayoutProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getLayoutProperty(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getLayoutProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::LayoutProperty *sipRes;

            sipRes = sipCpp->getLayoutProperty();

            return sipConvertFromType(sipRes,sipType_tlp_LayoutProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getLayoutProperty, doc_tlp_GlGraphInputData_getLayoutProperty);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_reloadAllProperties, "tlp.GlGraphInputData.reloadAllProperties()");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_reloadAllProperties(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_reloadAllProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            sipCpp->reloadAllProperties();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_reloadAllProperties, doc_tlp_GlGraphInputData_reloadAllProperties);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementColorPropName, "tlp.GlGraphInputData.setElementColorPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementColorPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementColorPropName, doc_tlp_GlGraphInputData_setElementColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementColorPropName, "tlp.GlGraphInputData.getElementColorPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementColorPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementColorPropName, doc_tlp_GlGraphInputData_getElementColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabelColorPropName, "tlp.GlGraphInputData.setElementLabelColorPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabelColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabelColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementLabelColorPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabelColorPropName, doc_tlp_GlGraphInputData_setElementLabelColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabelColorPropName, "tlp.GlGraphInputData.getElementLabelColorPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabelColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabelColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementLabelColorPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabelColorPropName, doc_tlp_GlGraphInputData_getElementLabelColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSizePropName, "tlp.GlGraphInputData.setElementSizePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementSizePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSizePropName, doc_tlp_GlGraphInputData_setElementSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSizePropName, "tlp.GlGraphInputData.getElementSizePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementSizePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSizePropName, doc_tlp_GlGraphInputData_getElementSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabelPositionPropName, "tlp.GlGraphInputData.setElementLabelPositionPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabelPositionPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabelPositionPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementLabelPositionPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabelPositionPropName, doc_tlp_GlGraphInputData_setElementLabelPositionPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabelPositionPropName, "tlp.GlGraphInputData.getElementLabelPositionPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabelPositionPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabelPositionPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementLabelPositionPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabelPositionPropName, doc_tlp_GlGraphInputData_getElementLabelPositionPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementShapePropName, "tlp.GlGraphInputData.setElementShapePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementShapePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementShapePropName, doc_tlp_GlGraphInputData_setElementShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementShapePropName, "tlp.GlGraphInputData.getElementShapePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementShapePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementShapePropName, doc_tlp_GlGraphInputData_getElementShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementRotationPropName, "tlp.GlGraphInputData.setElementRotationPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementRotationPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementRotationPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementRotationPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementRotationPropName, doc_tlp_GlGraphInputData_setElementRotationPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementRotationPropName, "tlp.GlGraphInputData.getElementRotationPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementRotationPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementRotationPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementRotationPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementRotationPropName, doc_tlp_GlGraphInputData_getElementRotationPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSelectedPropName, "tlp.GlGraphInputData.setElementSelectedPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSelectedPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSelectedPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementSelectedPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSelectedPropName, doc_tlp_GlGraphInputData_setElementSelectedPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSelectedPropName, "tlp.GlGraphInputData.getElementSelectedPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSelectedPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSelectedPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementSelectedPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSelectedPropName, doc_tlp_GlGraphInputData_getElementSelectedPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementFontPropName, "tlp.GlGraphInputData.setElementFontPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementFontPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementFontPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementFontPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementFontPropName, doc_tlp_GlGraphInputData_setElementFontPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementFontPropName, "tlp.GlGraphInputData.getElementFontPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementFontPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementFontPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementFontPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementFontPropName, doc_tlp_GlGraphInputData_getElementFontPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementFontSizePropName, "tlp.GlGraphInputData.setElementFontSizePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementFontSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementFontSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementFontSizePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementFontSizePropName, doc_tlp_GlGraphInputData_setElementFontSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementFontSizePropName, "tlp.GlGraphInputData.getElementFontSizePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementFontSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementFontSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementFontSizePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementFontSizePropName, doc_tlp_GlGraphInputData_getElementFontSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabelPropName, "tlp.GlGraphInputData.setElementLabelPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabelPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabelPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementLabelPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabelPropName, doc_tlp_GlGraphInputData_setElementLabelPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabelPropName, "tlp.GlGraphInputData.getElementLabelPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabelPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabelPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementLabelPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabelPropName, doc_tlp_GlGraphInputData_getElementLabelPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTexturePropName, "tlp.GlGraphInputData.setElementTexturePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTexturePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTexturePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementTexturePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTexturePropName, doc_tlp_GlGraphInputData_setElementTexturePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTexturePropName, "tlp.GlGraphInputData.getElementTexturePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTexturePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTexturePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementTexturePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTexturePropName, doc_tlp_GlGraphInputData_getElementTexturePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementBorderColorPropName, "tlp.GlGraphInputData.setElementBorderColorPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementBorderColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementBorderColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementBorderColorPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementBorderColorPropName, doc_tlp_GlGraphInputData_setElementBorderColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementBorderColorPropName, "tlp.GlGraphInputData.getElementBorderColorPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementBorderColorPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementBorderColorPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementBorderColorPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementBorderColorPropName, doc_tlp_GlGraphInputData_getElementBorderColorPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementBorderWidthPropName, "tlp.GlGraphInputData.setElementBorderWidthPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementBorderWidthPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementBorderWidthPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementBorderWidthPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementBorderWidthPropName, doc_tlp_GlGraphInputData_setElementBorderWidthPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementBorderWidthPropName, "tlp.GlGraphInputData.getElementBorderWidthPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementBorderWidthPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementBorderWidthPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementBorderWidthPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementBorderWidthPropName, doc_tlp_GlGraphInputData_getElementBorderWidthPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLayoutPropName, "tlp.GlGraphInputData.setElementLayoutPropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLayoutPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLayoutPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementLayoutPropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLayoutPropName, doc_tlp_GlGraphInputData_setElementLayoutPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLayoutPropName, "tlp.GlGraphInputData.getElementLayoutPropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLayoutPropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLayoutPropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementLayoutPropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLayoutPropName, doc_tlp_GlGraphInputData_getElementLayoutPropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSourceAnchorShapePropName, "tlp.GlGraphInputData.getElementSourceAnchorShapePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSourceAnchorShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSourceAnchorShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementSourceAnchorShapePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSourceAnchorShapePropName, doc_tlp_GlGraphInputData_getElementSourceAnchorShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSourceAnchorShapePropName, "tlp.GlGraphInputData.setElementSourceAnchorShapePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSourceAnchorShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSourceAnchorShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementSourceAnchorShapePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSourceAnchorShapePropName, doc_tlp_GlGraphInputData_setElementSourceAnchorShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSourceAnchorSizePropName, "tlp.GlGraphInputData.getElementSourceAnchorSizePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSourceAnchorSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSourceAnchorSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementSourceAnchorSizePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSourceAnchorSizePropName, doc_tlp_GlGraphInputData_getElementSourceAnchorSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSourceAnchorSizePropName, "tlp.GlGraphInputData.setElementSourceAnchorSizePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSourceAnchorSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSourceAnchorSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementSourceAnchorSizePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSourceAnchorSizePropName, doc_tlp_GlGraphInputData_setElementSourceAnchorSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTargetAnchorShapePropName, "tlp.GlGraphInputData.getElementTargetAnchorShapePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTargetAnchorShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTargetAnchorShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementTargetAnchorShapePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTargetAnchorShapePropName, doc_tlp_GlGraphInputData_getElementTargetAnchorShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTargetAnchorShapePropName, "tlp.GlGraphInputData.setElementTargetAnchorShapePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTargetAnchorShapePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTargetAnchorShapePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementTargetAnchorShapePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTargetAnchorShapePropName, doc_tlp_GlGraphInputData_setElementTargetAnchorShapePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTargetAnchorSizePropName, "tlp.GlGraphInputData.getElementTargetAnchorSizePropName() -> string");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTargetAnchorSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTargetAnchorSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getElementTargetAnchorSizePropName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTargetAnchorSizePropName, doc_tlp_GlGraphInputData_getElementTargetAnchorSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTargetAnchorSizePropName, "tlp.GlGraphInputData.setElementTargetAnchorSizePropName(string)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTargetAnchorSizePropName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTargetAnchorSizePropName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const std::string * a0;
        int a0State = 0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_std_string,&a0, &a0State))
        {
            sipCpp->setElementTargetAnchorSizePropName(*a0);
            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTargetAnchorSizePropName, doc_tlp_GlGraphInputData_setElementTargetAnchorSizePropName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementColor, "tlp.GlGraphInputData.getElementColor() -> tlp.ColorProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::ColorProperty *sipRes;

            sipRes = sipCpp->getElementColor();

            return sipConvertFromType(sipRes,sipType_tlp_ColorProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementColor, doc_tlp_GlGraphInputData_getElementColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementColor, "tlp.GlGraphInputData.setElementColor(tlp.ColorProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::ColorProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_ColorProperty, &a0))
        {
            sipCpp->setElementColor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementColor, doc_tlp_GlGraphInputData_setElementColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabelColor, "tlp.GlGraphInputData.getElementLabelColor() -> tlp.ColorProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabelColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::ColorProperty *sipRes;

            sipRes = sipCpp->getElementLabelColor();

            return sipConvertFromType(sipRes,sipType_tlp_ColorProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabelColor, doc_tlp_GlGraphInputData_getElementLabelColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabelColor, "tlp.GlGraphInputData.setElementLabelColor(tlp.ColorProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabelColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabelColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::ColorProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_ColorProperty, &a0))
        {
            sipCpp->setElementLabelColor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabelColor, doc_tlp_GlGraphInputData_setElementLabelColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSize, "tlp.GlGraphInputData.getElementSize() -> tlp.SizeProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::SizeProperty *sipRes;

            sipRes = sipCpp->getElementSize();

            return sipConvertFromType(sipRes,sipType_tlp_SizeProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSize, doc_tlp_GlGraphInputData_getElementSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSize, "tlp.GlGraphInputData.setElementSize(tlp.SizeProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::SizeProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_SizeProperty, &a0))
        {
            sipCpp->setElementSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSize, doc_tlp_GlGraphInputData_setElementSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabelPosition, "tlp.GlGraphInputData.getElementLabelPosition() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabelPosition(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabelPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementLabelPosition();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabelPosition, doc_tlp_GlGraphInputData_getElementLabelPosition);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabelPosition, "tlp.GlGraphInputData.setElementLabelPosition(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabelPosition(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabelPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementLabelPosition(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabelPosition, doc_tlp_GlGraphInputData_setElementLabelPosition);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementShape, "tlp.GlGraphInputData.getElementShape() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementShape();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementShape, doc_tlp_GlGraphInputData_getElementShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementShape, "tlp.GlGraphInputData.setElementShape(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementShape, doc_tlp_GlGraphInputData_setElementShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementRotation, "tlp.GlGraphInputData.getElementRotation() -> tlp.DoubleProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementRotation(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::DoubleProperty *sipRes;

            sipRes = sipCpp->getElementRotation();

            return sipConvertFromType(sipRes,sipType_tlp_DoubleProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementRotation, doc_tlp_GlGraphInputData_getElementRotation);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementRotation, "tlp.GlGraphInputData.setElementRotation(tlp.DoubleProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementRotation(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementRotation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::DoubleProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_DoubleProperty, &a0))
        {
            sipCpp->setElementRotation(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementRotation, doc_tlp_GlGraphInputData_setElementRotation);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSelected, "tlp.GlGraphInputData.getElementSelected() -> tlp.BooleanProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSelected(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::BooleanProperty *sipRes;

            sipRes = sipCpp->getElementSelected();

            return sipConvertFromType(sipRes,sipType_tlp_BooleanProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSelected, doc_tlp_GlGraphInputData_getElementSelected);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSelected, "tlp.GlGraphInputData.setElementSelected(tlp.BooleanProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSelected(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSelected(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::BooleanProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_BooleanProperty, &a0))
        {
            sipCpp->setElementSelected(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSelected, doc_tlp_GlGraphInputData_setElementSelected);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementFont, "tlp.GlGraphInputData.getElementFont() -> tlp.StringProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementFont(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::StringProperty *sipRes;

            sipRes = sipCpp->getElementFont();

            return sipConvertFromType(sipRes,sipType_tlp_StringProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementFont, doc_tlp_GlGraphInputData_getElementFont);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementFont, "tlp.GlGraphInputData.setElementFont(tlp.StringProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementFont(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_StringProperty, &a0))
        {
            sipCpp->setElementFont(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementFont, doc_tlp_GlGraphInputData_setElementFont);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementFontSize, "tlp.GlGraphInputData.getElementFontSize() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementFontSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementFontSize();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementFontSize, doc_tlp_GlGraphInputData_getElementFontSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementFontSize, "tlp.GlGraphInputData.setElementFontSize(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementFontSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementFontSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementFontSize, doc_tlp_GlGraphInputData_setElementFontSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLabel, "tlp.GlGraphInputData.getElementLabel() -> tlp.StringProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::StringProperty *sipRes;

            sipRes = sipCpp->getElementLabel();

            return sipConvertFromType(sipRes,sipType_tlp_StringProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLabel, doc_tlp_GlGraphInputData_getElementLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLabel, "tlp.GlGraphInputData.setElementLabel(tlp.StringProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_StringProperty, &a0))
        {
            sipCpp->setElementLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLabel, doc_tlp_GlGraphInputData_setElementLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementLayout, "tlp.GlGraphInputData.getElementLayout() -> tlp.LayoutProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementLayout(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::LayoutProperty *sipRes;

            sipRes = sipCpp->getElementLayout();

            return sipConvertFromType(sipRes,sipType_tlp_LayoutProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementLayout, doc_tlp_GlGraphInputData_getElementLayout);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementLayout, "tlp.GlGraphInputData.setElementLayout(tlp.LayoutProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementLayout(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementLayout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::LayoutProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_LayoutProperty, &a0))
        {
            sipCpp->setElementLayout(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementLayout, doc_tlp_GlGraphInputData_setElementLayout);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTexture, "tlp.GlGraphInputData.getElementTexture() -> tlp.StringProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTexture(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::StringProperty *sipRes;

            sipRes = sipCpp->getElementTexture();

            return sipConvertFromType(sipRes,sipType_tlp_StringProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTexture, doc_tlp_GlGraphInputData_getElementTexture);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTexture, "tlp.GlGraphInputData.setElementTexture(tlp.StringProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTexture(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTexture(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::StringProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_StringProperty, &a0))
        {
            sipCpp->setElementTexture(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTexture, doc_tlp_GlGraphInputData_setElementTexture);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementBorderColor, "tlp.GlGraphInputData.getElementBorderColor() -> tlp.ColorProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementBorderColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementBorderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::ColorProperty *sipRes;

            sipRes = sipCpp->getElementBorderColor();

            return sipConvertFromType(sipRes,sipType_tlp_ColorProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementBorderColor, doc_tlp_GlGraphInputData_getElementBorderColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementBorderColor, "tlp.GlGraphInputData.setElementBorderColor(tlp.ColorProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementBorderColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementBorderColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::ColorProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_ColorProperty, &a0))
        {
            sipCpp->setElementBorderColor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementBorderColor, doc_tlp_GlGraphInputData_setElementBorderColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementBorderWidth, "tlp.GlGraphInputData.getElementBorderWidth() -> tlp.DoubleProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementBorderWidth(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementBorderWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::DoubleProperty *sipRes;

            sipRes = sipCpp->getElementBorderWidth();

            return sipConvertFromType(sipRes,sipType_tlp_DoubleProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementBorderWidth, doc_tlp_GlGraphInputData_getElementBorderWidth);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementBorderWidth, "tlp.GlGraphInputData.setElementBorderWidth(tlp.DoubleProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementBorderWidth(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementBorderWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::DoubleProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_DoubleProperty, &a0))
        {
            sipCpp->setElementBorderWidth(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementBorderWidth, doc_tlp_GlGraphInputData_setElementBorderWidth);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSrcAnchorShape, "tlp.GlGraphInputData.getElementSrcAnchorShape() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSrcAnchorShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSrcAnchorShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementSrcAnchorShape();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSrcAnchorShape, doc_tlp_GlGraphInputData_getElementSrcAnchorShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSrcAnchorShape, "tlp.GlGraphInputData.setElementSrcAnchorShape(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSrcAnchorShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSrcAnchorShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementSrcAnchorShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSrcAnchorShape, doc_tlp_GlGraphInputData_setElementSrcAnchorShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementSrcAnchorSize, "tlp.GlGraphInputData.getElementSrcAnchorSize() -> tlp.SizeProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementSrcAnchorSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementSrcAnchorSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::SizeProperty *sipRes;

            sipRes = sipCpp->getElementSrcAnchorSize();

            return sipConvertFromType(sipRes,sipType_tlp_SizeProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementSrcAnchorSize, doc_tlp_GlGraphInputData_getElementSrcAnchorSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementSrcAnchorSize, "tlp.GlGraphInputData.setElementSrcAnchorSize(tlp.SizeProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementSrcAnchorSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementSrcAnchorSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::SizeProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_SizeProperty, &a0))
        {
            sipCpp->setElementSrcAnchorSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementSrcAnchorSize, doc_tlp_GlGraphInputData_setElementSrcAnchorSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTgtAnchorShape, "tlp.GlGraphInputData.getElementTgtAnchorShape() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTgtAnchorShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTgtAnchorShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementTgtAnchorShape();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTgtAnchorShape, doc_tlp_GlGraphInputData_getElementTgtAnchorShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTgtAnchorShape, "tlp.GlGraphInputData.setElementTgtAnchorShape(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTgtAnchorShape(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTgtAnchorShape(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementTgtAnchorShape(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTgtAnchorShape, doc_tlp_GlGraphInputData_setElementTgtAnchorShape);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementTgtAnchorSize, "tlp.GlGraphInputData.getElementTgtAnchorSize() -> tlp.SizeProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementTgtAnchorSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementTgtAnchorSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::SizeProperty *sipRes;

            sipRes = sipCpp->getElementTgtAnchorSize();

            return sipConvertFromType(sipRes,sipType_tlp_SizeProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementTgtAnchorSize, doc_tlp_GlGraphInputData_getElementTgtAnchorSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementTgtAnchorSize, "tlp.GlGraphInputData.setElementTgtAnchorSize(tlp.SizeProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementTgtAnchorSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementTgtAnchorSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::SizeProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_SizeProperty, &a0))
        {
            sipCpp->setElementTgtAnchorSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementTgtAnchorSize, doc_tlp_GlGraphInputData_setElementTgtAnchorSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_getElementAnimationFrame, "tlp.GlGraphInputData.getElementAnimationFrame() -> tlp.IntegerProperty");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_getElementAnimationFrame(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_getElementAnimationFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp))
        {
            tlp::IntegerProperty *sipRes;

            sipRes = sipCpp->getElementAnimationFrame();

            return sipConvertFromType(sipRes,sipType_tlp_IntegerProperty,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_getElementAnimationFrame, doc_tlp_GlGraphInputData_getElementAnimationFrame);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphInputData_setElementAnimationFrame, "tlp.GlGraphInputData.setElementAnimationFrame(tlp.IntegerProperty)");

extern "C" {static PyObject *meth_tlp_GlGraphInputData_setElementAnimationFrame(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphInputData_setElementAnimationFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::IntegerProperty * a0;
        tlp::GlGraphInputData *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphInputData, &sipCpp, sipType_tlp_IntegerProperty, &a0))
        {
            sipCpp->setElementAnimationFrame(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphInputData, sipName_setElementAnimationFrame, doc_tlp_GlGraphInputData_setElementAnimationFrame);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlGraphInputData(void *, const sipTypeDef *);}
static void *cast_tlp_GlGraphInputData(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_tlp_GlGraphInputData)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlGraphInputData(void *, int);}
static void release_tlp_GlGraphInputData(void *sipCppV,int)
{
    delete reinterpret_cast<tlp::GlGraphInputData *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlGraphInputData(sipSimpleWrapper *);}
static void dealloc_tlp_GlGraphInputData(sipSimpleWrapper *sipSelf)
{
    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlGraphInputData(sipGetAddress(sipSelf),0);
    }
}


static PyMethodDef methods_tlp_GlGraphInputData[] = {
    {SIP_MLNAME_CAST(sipName_getElementAnimationFrame), meth_tlp_GlGraphInputData_getElementAnimationFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementAnimationFrame)},
    {SIP_MLNAME_CAST(sipName_getElementBorderColor), meth_tlp_GlGraphInputData_getElementBorderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementBorderColor)},
    {SIP_MLNAME_CAST(sipName_getElementBorderColorPropName), meth_tlp_GlGraphInputData_getElementBorderColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementBorderColorPropName)},
    {SIP_MLNAME_CAST(sipName_getElementBorderWidth), meth_tlp_GlGraphInputData_getElementBorderWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementBorderWidth)},
    {SIP_MLNAME_CAST(sipName_getElementBorderWidthPropName), meth_tlp_GlGraphInputData_getElementBorderWidthPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementBorderWidthPropName)},
    {SIP_MLNAME_CAST(sipName_getElementColor), meth_tlp_GlGraphInputData_getElementColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementColor)},
    {SIP_MLNAME_CAST(sipName_getElementColorPropName), meth_tlp_GlGraphInputData_getElementColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementColorPropName)},
    {SIP_MLNAME_CAST(sipName_getElementFont), meth_tlp_GlGraphInputData_getElementFont, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementFont)},
    {SIP_MLNAME_CAST(sipName_getElementFontPropName), meth_tlp_GlGraphInputData_getElementFontPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementFontPropName)},
    {SIP_MLNAME_CAST(sipName_getElementFontSize), meth_tlp_GlGraphInputData_getElementFontSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementFontSize)},
    {SIP_MLNAME_CAST(sipName_getElementFontSizePropName), meth_tlp_GlGraphInputData_getElementFontSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementFontSizePropName)},
    {SIP_MLNAME_CAST(sipName_getElementLabel), meth_tlp_GlGraphInputData_getElementLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabel)},
    {SIP_MLNAME_CAST(sipName_getElementLabelColor), meth_tlp_GlGraphInputData_getElementLabelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabelColor)},
    {SIP_MLNAME_CAST(sipName_getElementLabelColorPropName), meth_tlp_GlGraphInputData_getElementLabelColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabelColorPropName)},
    {SIP_MLNAME_CAST(sipName_getElementLabelPosition), meth_tlp_GlGraphInputData_getElementLabelPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabelPosition)},
    {SIP_MLNAME_CAST(sipName_getElementLabelPositionPropName), meth_tlp_GlGraphInputData_getElementLabelPositionPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabelPositionPropName)},
    {SIP_MLNAME_CAST(sipName_getElementLabelPropName), meth_tlp_GlGraphInputData_getElementLabelPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLabelPropName)},
    {SIP_MLNAME_CAST(sipName_getElementLayout), meth_tlp_GlGraphInputData_getElementLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLayout)},
    {SIP_MLNAME_CAST(sipName_getElementLayoutPropName), meth_tlp_GlGraphInputData_getElementLayoutPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementLayoutPropName)},
    {SIP_MLNAME_CAST(sipName_getElementRotation), meth_tlp_GlGraphInputData_getElementRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementRotation)},
    {SIP_MLNAME_CAST(sipName_getElementRotationPropName), meth_tlp_GlGraphInputData_getElementRotationPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementRotationPropName)},
    {SIP_MLNAME_CAST(sipName_getElementSelected), meth_tlp_GlGraphInputData_getElementSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSelected)},
    {SIP_MLNAME_CAST(sipName_getElementSelectedPropName), meth_tlp_GlGraphInputData_getElementSelectedPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSelectedPropName)},
    {SIP_MLNAME_CAST(sipName_getElementShape), meth_tlp_GlGraphInputData_getElementShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementShape)},
    {SIP_MLNAME_CAST(sipName_getElementShapePropName), meth_tlp_GlGraphInputData_getElementShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementShapePropName)},
    {SIP_MLNAME_CAST(sipName_getElementSize), meth_tlp_GlGraphInputData_getElementSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSize)},
    {SIP_MLNAME_CAST(sipName_getElementSizePropName), meth_tlp_GlGraphInputData_getElementSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSizePropName)},
    {SIP_MLNAME_CAST(sipName_getElementSourceAnchorShapePropName), meth_tlp_GlGraphInputData_getElementSourceAnchorShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSourceAnchorShapePropName)},
    {SIP_MLNAME_CAST(sipName_getElementSourceAnchorSizePropName), meth_tlp_GlGraphInputData_getElementSourceAnchorSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSourceAnchorSizePropName)},
    {SIP_MLNAME_CAST(sipName_getElementSrcAnchorShape), meth_tlp_GlGraphInputData_getElementSrcAnchorShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSrcAnchorShape)},
    {SIP_MLNAME_CAST(sipName_getElementSrcAnchorSize), meth_tlp_GlGraphInputData_getElementSrcAnchorSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementSrcAnchorSize)},
    {SIP_MLNAME_CAST(sipName_getElementTargetAnchorShapePropName), meth_tlp_GlGraphInputData_getElementTargetAnchorShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTargetAnchorShapePropName)},
    {SIP_MLNAME_CAST(sipName_getElementTargetAnchorSizePropName), meth_tlp_GlGraphInputData_getElementTargetAnchorSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTargetAnchorSizePropName)},
    {SIP_MLNAME_CAST(sipName_getElementTexture), meth_tlp_GlGraphInputData_getElementTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTexture)},
    {SIP_MLNAME_CAST(sipName_getElementTexturePropName), meth_tlp_GlGraphInputData_getElementTexturePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTexturePropName)},
    {SIP_MLNAME_CAST(sipName_getElementTgtAnchorShape), meth_tlp_GlGraphInputData_getElementTgtAnchorShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTgtAnchorShape)},
    {SIP_MLNAME_CAST(sipName_getElementTgtAnchorSize), meth_tlp_GlGraphInputData_getElementTgtAnchorSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getElementTgtAnchorSize)},
    {SIP_MLNAME_CAST(sipName_getGraph), meth_tlp_GlGraphInputData_getGraph, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getGraph)},
    {SIP_MLNAME_CAST(sipName_getLayoutProperty), meth_tlp_GlGraphInputData_getLayoutProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_getLayoutProperty)},
    {SIP_MLNAME_CAST(sipName_reloadAllProperties), meth_tlp_GlGraphInputData_reloadAllProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_reloadAllProperties)},
    {SIP_MLNAME_CAST(sipName_reloadLayoutProperty), meth_tlp_GlGraphInputData_reloadLayoutProperty, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_reloadLayoutProperty)},
    {SIP_MLNAME_CAST(sipName_setElementAnimationFrame), meth_tlp_GlGraphInputData_setElementAnimationFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementAnimationFrame)},
    {SIP_MLNAME_CAST(sipName_setElementBorderColor), meth_tlp_GlGraphInputData_setElementBorderColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementBorderColor)},
    {SIP_MLNAME_CAST(sipName_setElementBorderColorPropName), meth_tlp_GlGraphInputData_setElementBorderColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementBorderColorPropName)},
    {SIP_MLNAME_CAST(sipName_setElementBorderWidth), meth_tlp_GlGraphInputData_setElementBorderWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementBorderWidth)},
    {SIP_MLNAME_CAST(sipName_setElementBorderWidthPropName), meth_tlp_GlGraphInputData_setElementBorderWidthPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementBorderWidthPropName)},
    {SIP_MLNAME_CAST(sipName_setElementColor), meth_tlp_GlGraphInputData_setElementColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementColor)},
    {SIP_MLNAME_CAST(sipName_setElementColorPropName), meth_tlp_GlGraphInputData_setElementColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementColorPropName)},
    {SIP_MLNAME_CAST(sipName_setElementFont), meth_tlp_GlGraphInputData_setElementFont, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementFont)},
    {SIP_MLNAME_CAST(sipName_setElementFontPropName), meth_tlp_GlGraphInputData_setElementFontPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementFontPropName)},
    {SIP_MLNAME_CAST(sipName_setElementFontSize), meth_tlp_GlGraphInputData_setElementFontSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementFontSize)},
    {SIP_MLNAME_CAST(sipName_setElementFontSizePropName), meth_tlp_GlGraphInputData_setElementFontSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementFontSizePropName)},
    {SIP_MLNAME_CAST(sipName_setElementLabel), meth_tlp_GlGraphInputData_setElementLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabel)},
    {SIP_MLNAME_CAST(sipName_setElementLabelColor), meth_tlp_GlGraphInputData_setElementLabelColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabelColor)},
    {SIP_MLNAME_CAST(sipName_setElementLabelColorPropName), meth_tlp_GlGraphInputData_setElementLabelColorPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabelColorPropName)},
    {SIP_MLNAME_CAST(sipName_setElementLabelPosition), meth_tlp_GlGraphInputData_setElementLabelPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabelPosition)},
    {SIP_MLNAME_CAST(sipName_setElementLabelPositionPropName), meth_tlp_GlGraphInputData_setElementLabelPositionPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabelPositionPropName)},
    {SIP_MLNAME_CAST(sipName_setElementLabelPropName), meth_tlp_GlGraphInputData_setElementLabelPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLabelPropName)},
    {SIP_MLNAME_CAST(sipName_setElementLayout), meth_tlp_GlGraphInputData_setElementLayout, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLayout)},
    {SIP_MLNAME_CAST(sipName_setElementLayoutPropName), meth_tlp_GlGraphInputData_setElementLayoutPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementLayoutPropName)},
    {SIP_MLNAME_CAST(sipName_setElementRotation), meth_tlp_GlGraphInputData_setElementRotation, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementRotation)},
    {SIP_MLNAME_CAST(sipName_setElementRotationPropName), meth_tlp_GlGraphInputData_setElementRotationPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementRotationPropName)},
    {SIP_MLNAME_CAST(sipName_setElementSelected), meth_tlp_GlGraphInputData_setElementSelected, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSelected)},
    {SIP_MLNAME_CAST(sipName_setElementSelectedPropName), meth_tlp_GlGraphInputData_setElementSelectedPropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSelectedPropName)},
    {SIP_MLNAME_CAST(sipName_setElementShape), meth_tlp_GlGraphInputData_setElementShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementShape)},
    {SIP_MLNAME_CAST(sipName_setElementShapePropName), meth_tlp_GlGraphInputData_setElementShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementShapePropName)},
    {SIP_MLNAME_CAST(sipName_setElementSize), meth_tlp_GlGraphInputData_setElementSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSize)},
    {SIP_MLNAME_CAST(sipName_setElementSizePropName), meth_tlp_GlGraphInputData_setElementSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSizePropName)},
    {SIP_MLNAME_CAST(sipName_setElementSourceAnchorShapePropName), meth_tlp_GlGraphInputData_setElementSourceAnchorShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSourceAnchorShapePropName)},
    {SIP_MLNAME_CAST(sipName_setElementSourceAnchorSizePropName), meth_tlp_GlGraphInputData_setElementSourceAnchorSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSourceAnchorSizePropName)},
    {SIP_MLNAME_CAST(sipName_setElementSrcAnchorShape), meth_tlp_GlGraphInputData_setElementSrcAnchorShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSrcAnchorShape)},
    {SIP_MLNAME_CAST(sipName_setElementSrcAnchorSize), meth_tlp_GlGraphInputData_setElementSrcAnchorSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementSrcAnchorSize)},
    {SIP_MLNAME_CAST(sipName_setElementTargetAnchorShapePropName), meth_tlp_GlGraphInputData_setElementTargetAnchorShapePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTargetAnchorShapePropName)},
    {SIP_MLNAME_CAST(sipName_setElementTargetAnchorSizePropName), meth_tlp_GlGraphInputData_setElementTargetAnchorSizePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTargetAnchorSizePropName)},
    {SIP_MLNAME_CAST(sipName_setElementTexture), meth_tlp_GlGraphInputData_setElementTexture, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTexture)},
    {SIP_MLNAME_CAST(sipName_setElementTexturePropName), meth_tlp_GlGraphInputData_setElementTexturePropName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTexturePropName)},
    {SIP_MLNAME_CAST(sipName_setElementTgtAnchorShape), meth_tlp_GlGraphInputData_setElementTgtAnchorShape, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTgtAnchorShape)},
    {SIP_MLNAME_CAST(sipName_setElementTgtAnchorSize), meth_tlp_GlGraphInputData_setElementTgtAnchorSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphInputData_setElementTgtAnchorSize)}
};


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementAnimationFrame(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementAnimationFrame(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementAnimationFrame;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementAnimationFrame(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementAnimationFrame(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementAnimationFrame = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementBorderColor(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementBorderColor(void *sipSelf, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementBorderColor;

    return sipConvertFromType(sipVal,sipType_tlp_ColorProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementBorderColor(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementBorderColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::ColorProperty *>(sipForceConvertToType(sipPy,sipType_tlp_ColorProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementBorderColor = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementBorderWidth(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementBorderWidth(void *sipSelf, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementBorderWidth;

    return sipConvertFromType(sipVal,sipType_tlp_DoubleProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementBorderWidth(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementBorderWidth(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::DoubleProperty *>(sipForceConvertToType(sipPy,sipType_tlp_DoubleProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementBorderWidth = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementColor(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementColor(void *sipSelf, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementColor;

    return sipConvertFromType(sipVal,sipType_tlp_ColorProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementColor(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::ColorProperty *>(sipForceConvertToType(sipPy,sipType_tlp_ColorProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementColor = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementFont(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementFont(void *sipSelf, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementFont;

    return sipConvertFromType(sipVal,sipType_tlp_StringProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementFont(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementFont(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::StringProperty *>(sipForceConvertToType(sipPy,sipType_tlp_StringProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementFont = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementFontSize(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementFontSize(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementFontSize;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementFontSize(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementFontSize(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementFontSize = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementLabel(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementLabel(void *sipSelf, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementLabel;

    return sipConvertFromType(sipVal,sipType_tlp_StringProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementLabel(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementLabel(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::StringProperty *>(sipForceConvertToType(sipPy,sipType_tlp_StringProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementLabel = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementLabelColor(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementLabelColor(void *sipSelf, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementLabelColor;

    return sipConvertFromType(sipVal,sipType_tlp_ColorProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementLabelColor(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementLabelColor(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::ColorProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::ColorProperty *>(sipForceConvertToType(sipPy,sipType_tlp_ColorProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementLabelColor = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementLabelPosition(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementLabelPosition(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementLabelPosition;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementLabelPosition(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementLabelPosition(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementLabelPosition = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementLayout(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementLayout(void *sipSelf, PyObject *)
{
    tlp::LayoutProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementLayout;

    return sipConvertFromType(sipVal,sipType_tlp_LayoutProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementLayout(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementLayout(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::LayoutProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::LayoutProperty *>(sipForceConvertToType(sipPy,sipType_tlp_LayoutProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementLayout = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementRotation(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementRotation(void *sipSelf, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementRotation;

    return sipConvertFromType(sipVal,sipType_tlp_DoubleProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementRotation(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementRotation(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::DoubleProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::DoubleProperty *>(sipForceConvertToType(sipPy,sipType_tlp_DoubleProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementRotation = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementSelected(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementSelected(void *sipSelf, PyObject *)
{
    tlp::BooleanProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementSelected;

    return sipConvertFromType(sipVal,sipType_tlp_BooleanProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementSelected(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementSelected(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::BooleanProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::BooleanProperty *>(sipForceConvertToType(sipPy,sipType_tlp_BooleanProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementSelected = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementShape(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementShape(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementShape;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementShape(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementShape(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementShape = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementSize(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementSize(void *sipSelf, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementSize;

    return sipConvertFromType(sipVal,sipType_tlp_SizeProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementSize(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementSize(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::SizeProperty *>(sipForceConvertToType(sipPy,sipType_tlp_SizeProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementSize = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementSrcAnchorShape(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementSrcAnchorShape(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementSrcAnchorShape;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementSrcAnchorShape(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementSrcAnchorShape(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementSrcAnchorShape = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementSrcAnchorSize(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementSrcAnchorSize(void *sipSelf, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementSrcAnchorSize;

    return sipConvertFromType(sipVal,sipType_tlp_SizeProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementSrcAnchorSize(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementSrcAnchorSize(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::SizeProperty *>(sipForceConvertToType(sipPy,sipType_tlp_SizeProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementSrcAnchorSize = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementTexture(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementTexture(void *sipSelf, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementTexture;

    return sipConvertFromType(sipVal,sipType_tlp_StringProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementTexture(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementTexture(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::StringProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::StringProperty *>(sipForceConvertToType(sipPy,sipType_tlp_StringProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementTexture = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementTgtAnchorShape(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementTgtAnchorShape(void *sipSelf, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementTgtAnchorShape;

    return sipConvertFromType(sipVal,sipType_tlp_IntegerProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementTgtAnchorShape(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementTgtAnchorShape(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::IntegerProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::IntegerProperty *>(sipForceConvertToType(sipPy,sipType_tlp_IntegerProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementTgtAnchorShape = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_elementTgtAnchorSize(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_elementTgtAnchorSize(void *sipSelf, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->elementTgtAnchorSize;

    return sipConvertFromType(sipVal,sipType_tlp_SizeProperty, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_elementTgtAnchorSize(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_elementTgtAnchorSize(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::SizeProperty *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::SizeProperty *>(sipForceConvertToType(sipPy,sipType_tlp_SizeProperty,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->elementTgtAnchorSize = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_graph(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_graph(void *sipSelf, PyObject *)
{
    tlp::Graph *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->graph;

    return sipConvertFromType(sipVal,sipType_tlp_Graph, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_graph(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_graph(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::Graph *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::Graph *>(sipForceConvertToType(sipPy,sipType_tlp_Graph,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->graph = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_tlp_GlGraphInputData_parameters(void *, PyObject *);}
static PyObject *varget_tlp_GlGraphInputData_parameters(void *sipSelf, PyObject *)
{
    tlp::GlGraphRenderingParameters *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    sipVal = sipCpp->parameters;

    return sipConvertFromType(sipVal,sipType_tlp_GlGraphRenderingParameters, NULL);
}


extern "C" {static int varset_tlp_GlGraphInputData_parameters(void *, PyObject *, PyObject *);}
static int varset_tlp_GlGraphInputData_parameters(void *sipSelf, PyObject *sipPy, PyObject *)
{
    tlp::GlGraphRenderingParameters *sipVal;
    tlp::GlGraphInputData *sipCpp = reinterpret_cast<tlp::GlGraphInputData *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast<tlp::GlGraphRenderingParameters *>(sipForceConvertToType(sipPy,sipType_tlp_GlGraphRenderingParameters,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->parameters = sipVal;

    return 0;
}

sipVariableDef variables_tlp_GlGraphInputData[] = {
    {InstanceVariable, sipName_elementAnimationFrame, (PyMethodDef *)varget_tlp_GlGraphInputData_elementAnimationFrame, (PyMethodDef *)varset_tlp_GlGraphInputData_elementAnimationFrame, NULL, NULL},
    {InstanceVariable, sipName_elementBorderColor, (PyMethodDef *)varget_tlp_GlGraphInputData_elementBorderColor, (PyMethodDef *)varset_tlp_GlGraphInputData_elementBorderColor, NULL, NULL},
    {InstanceVariable, sipName_elementBorderWidth, (PyMethodDef *)varget_tlp_GlGraphInputData_elementBorderWidth, (PyMethodDef *)varset_tlp_GlGraphInputData_elementBorderWidth, NULL, NULL},
    {InstanceVariable, sipName_elementColor, (PyMethodDef *)varget_tlp_GlGraphInputData_elementColor, (PyMethodDef *)varset_tlp_GlGraphInputData_elementColor, NULL, NULL},
    {InstanceVariable, sipName_elementFont, (PyMethodDef *)varget_tlp_GlGraphInputData_elementFont, (PyMethodDef *)varset_tlp_GlGraphInputData_elementFont, NULL, NULL},
    {InstanceVariable, sipName_elementFontSize, (PyMethodDef *)varget_tlp_GlGraphInputData_elementFontSize, (PyMethodDef *)varset_tlp_GlGraphInputData_elementFontSize, NULL, NULL},
    {InstanceVariable, sipName_elementLabel, (PyMethodDef *)varget_tlp_GlGraphInputData_elementLabel, (PyMethodDef *)varset_tlp_GlGraphInputData_elementLabel, NULL, NULL},
    {InstanceVariable, sipName_elementLabelColor, (PyMethodDef *)varget_tlp_GlGraphInputData_elementLabelColor, (PyMethodDef *)varset_tlp_GlGraphInputData_elementLabelColor, NULL, NULL},
    {InstanceVariable, sipName_elementLabelPosition, (PyMethodDef *)varget_tlp_GlGraphInputData_elementLabelPosition, (PyMethodDef *)varset_tlp_GlGraphInputData_elementLabelPosition, NULL, NULL},
    {InstanceVariable, sipName_elementLayout, (PyMethodDef *)varget_tlp_GlGraphInputData_elementLayout, (PyMethodDef *)varset_tlp_GlGraphInputData_elementLayout, NULL, NULL},
    {InstanceVariable, sipName_elementRotation, (PyMethodDef *)varget_tlp_GlGraphInputData_elementRotation, (PyMethodDef *)varset_tlp_GlGraphInputData_elementRotation, NULL, NULL},
    {InstanceVariable, sipName_elementSelected, (PyMethodDef *)varget_tlp_GlGraphInputData_elementSelected, (PyMethodDef *)varset_tlp_GlGraphInputData_elementSelected, NULL, NULL},
    {InstanceVariable, sipName_elementShape, (PyMethodDef *)varget_tlp_GlGraphInputData_elementShape, (PyMethodDef *)varset_tlp_GlGraphInputData_elementShape, NULL, NULL},
    {InstanceVariable, sipName_elementSize, (PyMethodDef *)varget_tlp_GlGraphInputData_elementSize, (PyMethodDef *)varset_tlp_GlGraphInputData_elementSize, NULL, NULL},
    {InstanceVariable, sipName_elementSrcAnchorShape, (PyMethodDef *)varget_tlp_GlGraphInputData_elementSrcAnchorShape, (PyMethodDef *)varset_tlp_GlGraphInputData_elementSrcAnchorShape, NULL, NULL},
    {InstanceVariable, sipName_elementSrcAnchorSize, (PyMethodDef *)varget_tlp_GlGraphInputData_elementSrcAnchorSize, (PyMethodDef *)varset_tlp_GlGraphInputData_elementSrcAnchorSize, NULL, NULL},
    {InstanceVariable, sipName_elementTexture, (PyMethodDef *)varget_tlp_GlGraphInputData_elementTexture, (PyMethodDef *)varset_tlp_GlGraphInputData_elementTexture, NULL, NULL},
    {InstanceVariable, sipName_elementTgtAnchorShape, (PyMethodDef *)varget_tlp_GlGraphInputData_elementTgtAnchorShape, (PyMethodDef *)varset_tlp_GlGraphInputData_elementTgtAnchorShape, NULL, NULL},
    {InstanceVariable, sipName_elementTgtAnchorSize, (PyMethodDef *)varget_tlp_GlGraphInputData_elementTgtAnchorSize, (PyMethodDef *)varset_tlp_GlGraphInputData_elementTgtAnchorSize, NULL, NULL},
    {InstanceVariable, sipName_graph, (PyMethodDef *)varget_tlp_GlGraphInputData_graph, (PyMethodDef *)varset_tlp_GlGraphInputData_graph, NULL, NULL},
    {InstanceVariable, sipName_parameters, (PyMethodDef *)varget_tlp_GlGraphInputData_parameters, (PyMethodDef *)varset_tlp_GlGraphInputData_parameters, NULL, NULL},
};


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlGraphInputData = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__GlGraphInputData,
        {0}
    },
    {
        sipNameNr_GlGraphInputData,
        {5, 255, 0},
        78, methods_tlp_GlGraphInputData,
        0, 0,
        21, variables_tlp_GlGraphInputData,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlGraphInputData,
    0,
    0,
    0,
    release_tlp_GlGraphInputData,
    cast_tlp_GlGraphInputData,
    0,
    0,
    0
};
