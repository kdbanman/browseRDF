/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneObserver.sip"
#include <tulip/GlSceneObserver.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"

#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlScene.sip"
#include <tulip/GlScene.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 20 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"
#line 36 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <tulip/GlSimpleEntity.h>
#line 26 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 43 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 54 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 60 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlSceneEvent.cpp"


class siptlp_GlSceneEvent : public tlp::GlSceneEvent
{
public:
    siptlp_GlSceneEvent(const tlp::GlScene&,tlp::GlSceneEvent::GlSceneEventType,const std::string&,tlp::GlLayer *);
    siptlp_GlSceneEvent(const tlp::GlScene&,tlp::GlSimpleEntity *);
    siptlp_GlSceneEvent(const tlp::GlSceneEvent&);
    ~siptlp_GlSceneEvent();

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlSceneEvent(const siptlp_GlSceneEvent &);
    siptlp_GlSceneEvent &operator = (const siptlp_GlSceneEvent &);
};

siptlp_GlSceneEvent::siptlp_GlSceneEvent(const tlp::GlScene& a0,tlp::GlSceneEvent::GlSceneEventType a1,const std::string& a2,tlp::GlLayer *a3): tlp::GlSceneEvent(a0,a1,a2,a3), sipPySelf(0)
{
}

siptlp_GlSceneEvent::siptlp_GlSceneEvent(const tlp::GlScene& a0,tlp::GlSimpleEntity *a1): tlp::GlSceneEvent(a0,a1), sipPySelf(0)
{
}

siptlp_GlSceneEvent::siptlp_GlSceneEvent(const tlp::GlSceneEvent& a0): tlp::GlSceneEvent(a0), sipPySelf(0)
{
}

siptlp_GlSceneEvent::~siptlp_GlSceneEvent()
{
    sipCommonDtor(sipPySelf);
}


PyDoc_STRVAR(doc_tlp_GlSceneEvent_getGlSimpleEntity, "tlp.GlSceneEvent.getGlSimpleEntity() -> tlp.GlSimpleEntity");

extern "C" {static PyObject *meth_tlp_GlSceneEvent_getGlSimpleEntity(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSceneEvent_getGlSimpleEntity(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSceneEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSceneEvent, &sipCpp))
        {
            tlp::GlSimpleEntity *sipRes;

            sipRes = sipCpp->getGlSimpleEntity();

            return sipConvertFromType(sipRes,sipType_tlp_GlSimpleEntity,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSceneEvent, sipName_getGlSimpleEntity, doc_tlp_GlSceneEvent_getGlSimpleEntity);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSceneEvent_getLayerName, "tlp.GlSceneEvent.getLayerName() -> string");

extern "C" {static PyObject *meth_tlp_GlSceneEvent_getLayerName(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSceneEvent_getLayerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSceneEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSceneEvent, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string(sipCpp->getLayerName());

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSceneEvent, sipName_getLayerName, doc_tlp_GlSceneEvent_getLayerName);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlSceneEvent_getLayer, "tlp.GlSceneEvent.getLayer() -> tlp.GlLayer");

extern "C" {static PyObject *meth_tlp_GlSceneEvent_getLayer(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlSceneEvent_getLayer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlSceneEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlSceneEvent, &sipCpp))
        {
            tlp::GlLayer *sipRes;

            sipRes = sipCpp->getLayer();

            return sipConvertFromType(sipRes,sipType_tlp_GlLayer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlSceneEvent, sipName_getLayer, doc_tlp_GlSceneEvent_getLayer);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlSceneEvent(void *, const sipTypeDef *);}
static void *cast_tlp_GlSceneEvent(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlSceneEvent)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_Event)->ctd_cast((tlp::Event *)(tlp::GlSceneEvent *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlSceneEvent(void *, int);}
static void release_tlp_GlSceneEvent(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlSceneEvent *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlSceneEvent *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlSceneEvent(sipSimpleWrapper *);}
static void dealloc_tlp_GlSceneEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlSceneEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlSceneEvent(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlSceneEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlSceneEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlSceneEvent *sipCpp = 0;

    {
        const tlp::GlScene * a0;
        tlp::GlSceneEvent::GlSceneEventType a1;
        const std::string * a2;
        int a2State = 0;
        tlp::GlLayer * a3;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9EJ1J8", sipType_tlp_GlScene, &a0, sipType_tlp_GlSceneEvent_GlSceneEventType, &a1, sipType_std_string,&a2, &a2State, sipType_tlp_GlLayer, &a3))
        {
            sipCpp = new siptlp_GlSceneEvent(*a0,a1,*a2,a3);
            sipReleaseType(const_cast<std::string *>(a2),sipType_std_string,a2State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlScene * a0;
        tlp::GlSimpleEntity * a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J8", sipType_tlp_GlScene, &a0, sipType_tlp_GlSimpleEntity, &a1))
        {
            sipCpp = new siptlp_GlSceneEvent(*a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlSceneEvent * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlSceneEvent, &a0))
        {
            sipCpp = new siptlp_GlSceneEvent(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlSceneEvent[] = {{51, 1, 1}};


static PyMethodDef methods_tlp_GlSceneEvent[] = {
    {SIP_MLNAME_CAST(sipName_getGlSimpleEntity), meth_tlp_GlSceneEvent_getGlSimpleEntity, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSceneEvent_getGlSimpleEntity)},
    {SIP_MLNAME_CAST(sipName_getLayer), meth_tlp_GlSceneEvent_getLayer, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSceneEvent_getLayer)},
    {SIP_MLNAME_CAST(sipName_getLayerName), meth_tlp_GlSceneEvent_getLayerName, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlSceneEvent_getLayerName)}
};

static sipEnumMemberDef enummembers_tlp_GlSceneEvent[] = {
    {sipName_TLP_ADDLAYER, tlp::GlSceneEvent::TLP_ADDLAYER, 21},
    {sipName_TLP_DELLAYER, tlp::GlSceneEvent::TLP_DELLAYER, 21},
    {sipName_TLP_MODIFYENTITY, tlp::GlSceneEvent::TLP_MODIFYENTITY, 21},
    {sipName_TLP_MODIFYLAYER, tlp::GlSceneEvent::TLP_MODIFYLAYER, 21},
};

PyDoc_STRVAR(doc_tlp_GlSceneEvent, "\1tlp.GlSceneEvent(tlp.GlScene, tlp.GlSceneEvent.GlSceneEventType, string, tlp.GlLayer)\n"
    "tlp.GlSceneEvent(tlp.GlScene, tlp.GlSimpleEntity)\n"
    "tlp.GlSceneEvent(tlp.GlSceneEvent)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlSceneEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_tlp__GlSceneEvent,
        {0}
    },
    {
        sipNameNr_GlSceneEvent,
        {5, 255, 0},
        3, methods_tlp_GlSceneEvent,
        4, enummembers_tlp_GlSceneEvent,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlSceneEvent,
    -1,
    -1,
    supers_tlp_GlSceneEvent,
    0,
    init_tlp_GlSceneEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlSceneEvent,
    0,
    0,
    0,
    release_tlp_GlSceneEvent,
    cast_tlp_GlSceneEvent,
    0,
    0,
    0
};
