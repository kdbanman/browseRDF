/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 65 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphFactory.cpp"

#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 17 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphFactory.cpp"
#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 20 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphFactory.cpp"
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
#include <tulip/Glyph.h>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphFactory.cpp"


class siptlp_GlyphFactory : public tlp::GlyphFactory
{
public:
    siptlp_GlyphFactory();
    siptlp_GlyphFactory(const tlp::GlyphFactory&);
    virtual ~siptlp_GlyphFactory();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    tlp::Glyph * createPluginObject(tlp::GlyphContext *);
    int getId() const;
    std::string getMajor();
    std::string getMinor();
    std::string getTulipMajor();
    std::string getTulipMinor();
    std::string getName() const;
    std::string getGroup() const;
    std::string getAuthor() const;
    std::string getDate() const;
    std::string getInfo() const;
    std::string getRelease() const;
    std::string getTulipRelease() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlyphFactory(const siptlp_GlyphFactory &);
    siptlp_GlyphFactory &operator = (const siptlp_GlyphFactory &);

    char sipPyMethods[17];
};

siptlp_GlyphFactory::siptlp_GlyphFactory(): tlp::GlyphFactory(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlyphFactory::siptlp_GlyphFactory(const tlp::GlyphFactory& a0): tlp::GlyphFactory(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlyphFactory::~siptlp_GlyphFactory()
{
    sipCommonDtor(sipPySelf);
}

tlp::Glyph * siptlp_GlyphFactory::createPluginObject(tlp::GlyphContext *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_GlyphFactory,sipName_createPluginObject);

    if (!sipMeth)
        return 0;

    extern tlp::Glyph * sipVH_tulipogl_11(sip_gilstate_t,PyObject *,tlp::GlyphContext *);

    return sipVH_tulipogl_11(sipGILState,sipMeth,a0);
}

int siptlp_GlyphFactory::getId() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_GlyphFactory,sipName_getId);

    if (!sipMeth)
        return 0;

    extern int sipVH_tulipogl_10(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_10(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getMajor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_getMajor);

    if (!sipMeth)
        return tlp::GlyphFactory::getMajor();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getMinor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_getMinor);

    if (!sipMeth)
        return tlp::GlyphFactory::getMinor();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getTulipMajor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_getTulipMajor);

    if (!sipMeth)
        return tlp::GlyphFactory::getTulipMajor();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getTulipMinor()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_getTulipMinor);

    if (!sipMeth)
        return tlp::GlyphFactory::getTulipMinor();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_GlyphFactory,sipName_getName);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getGroup() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_GlyphFactory,sipName_getGroup);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getAuthor() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_GlyphFactory,sipName_getAuthor);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getDate() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_GlyphFactory,sipName_getDate);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getInfo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_GlyphFactory,sipName_getInfo);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getRelease() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_GlyphFactory,sipName_getRelease);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}

std::string siptlp_GlyphFactory::getTulipRelease() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_GlyphFactory,sipName_getTulipRelease);

    if (!sipMeth)
        return std::string();

    typedef std::string (*sipVH_tulip_14)(sip_gilstate_t,PyObject *);

    return ((sipVH_tulip_14)(sipModuleAPI_tulipogl_tulip->em_virthandlers[14]))(sipGILState,sipMeth);
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_createPluginObject, "tlp.GlyphFactory.createPluginObject(tlp.GlyphContext) -> tlp.Glyph");

extern "C" {static PyObject *meth_tlp_GlyphFactory_createPluginObject(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_createPluginObject(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        tlp::GlyphContext * a0;
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp, sipType_tlp_GlyphContext, &a0))
        {
            tlp::Glyph *sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GlyphFactory, sipName_createPluginObject);
                return NULL;
            }

            sipRes = sipCpp->createPluginObject(a0);

            return sipConvertFromNewType(sipRes,sipType_tlp_Glyph,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_createPluginObject, doc_tlp_GlyphFactory_createPluginObject);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_getId, "tlp.GlyphFactory.getId() -> int");

extern "C" {static PyObject *meth_tlp_GlyphFactory_getId(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_getId(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_GlyphFactory, sipName_getId);
                return NULL;
            }

            sipRes = sipCpp->getId();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_getId, doc_tlp_GlyphFactory_getId);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_getMajor, "tlp.GlyphFactory.getMajor() -> string");

extern "C" {static PyObject *meth_tlp_GlyphFactory_getMajor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_getMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::GlyphFactory::getMajor() : sipCpp->getMajor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_getMajor, doc_tlp_GlyphFactory_getMajor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_getMinor, "tlp.GlyphFactory.getMinor() -> string");

extern "C" {static PyObject *meth_tlp_GlyphFactory_getMinor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_getMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::GlyphFactory::getMinor() : sipCpp->getMinor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_getMinor, doc_tlp_GlyphFactory_getMinor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_getTulipMajor, "tlp.GlyphFactory.getTulipMajor() -> string");

extern "C" {static PyObject *meth_tlp_GlyphFactory_getTulipMajor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_getTulipMajor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::GlyphFactory::getTulipMajor() : sipCpp->getTulipMajor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_getTulipMajor, doc_tlp_GlyphFactory_getTulipMajor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_getTulipMinor, "tlp.GlyphFactory.getTulipMinor() -> string");

extern "C" {static PyObject *meth_tlp_GlyphFactory_getTulipMinor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_getTulipMinor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
            std::string *sipRes;

            sipRes = new std::string((sipSelfWasArg ? sipCpp->tlp::GlyphFactory::getTulipMinor() : sipCpp->getTulipMinor()));

            return sipConvertFromNewType(sipRes,sipType_std_string,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_getTulipMinor, doc_tlp_GlyphFactory_getTulipMinor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlyphFactory_registerPlugin, "tlp.GlyphFactory.registerPlugin()");

extern "C" {static PyObject *meth_tlp_GlyphFactory_registerPlugin(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlyphFactory_registerPlugin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlyphFactory *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlyphFactory, &sipCpp))
        {
#line 84 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/Glyph.sip"
        sipCpp->initFactory();
        sipCpp->factory->registerPlugin(sipCpp);
#line 469 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlyphFactory.cpp"

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlyphFactory, sipName_registerPlugin, doc_tlp_GlyphFactory_registerPlugin);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlyphFactory(void *, const sipTypeDef *);}
static void *cast_tlp_GlyphFactory(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlyphFactory)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_PluginInfoInterface)->ctd_cast((tlp::PluginInfoInterface *)(tlp::GlyphFactory *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlyphFactory(void *, int);}
static void release_tlp_GlyphFactory(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlyphFactory *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlyphFactory *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlyphFactory(sipSimpleWrapper *);}
static void dealloc_tlp_GlyphFactory(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlyphFactory *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlyphFactory(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlyphFactory(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlyphFactory(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlyphFactory *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlyphFactory();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlyphFactory * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlyphFactory, &a0))
        {
            sipCpp = new siptlp_GlyphFactory(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlyphFactory[] = {{81, 1, 1}};


static PyMethodDef methods_tlp_GlyphFactory[] = {
    {SIP_MLNAME_CAST(sipName_createPluginObject), meth_tlp_GlyphFactory_createPluginObject, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_createPluginObject)},
    {SIP_MLNAME_CAST(sipName_getId), meth_tlp_GlyphFactory_getId, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_getId)},
    {SIP_MLNAME_CAST(sipName_getMajor), meth_tlp_GlyphFactory_getMajor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_getMajor)},
    {SIP_MLNAME_CAST(sipName_getMinor), meth_tlp_GlyphFactory_getMinor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_getMinor)},
    {SIP_MLNAME_CAST(sipName_getTulipMajor), meth_tlp_GlyphFactory_getTulipMajor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_getTulipMajor)},
    {SIP_MLNAME_CAST(sipName_getTulipMinor), meth_tlp_GlyphFactory_getTulipMinor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_getTulipMinor)},
    {SIP_MLNAME_CAST(sipName_registerPlugin), meth_tlp_GlyphFactory_registerPlugin, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlyphFactory_registerPlugin)}
};

PyDoc_STRVAR(doc_tlp_GlyphFactory, "\1tlp.GlyphFactory()\n"
    "tlp.GlyphFactory(tlp.GlyphFactory)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlyphFactory = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_tlp__GlyphFactory,
        {0}
    },
    {
        sipNameNr_GlyphFactory,
        {5, 255, 0},
        7, methods_tlp_GlyphFactory,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlyphFactory,
    -1,
    -1,
    supers_tlp_GlyphFactory,
    0,
    init_tlp_GlyphFactory,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlyphFactory,
    0,
    0,
    0,
    release_tlp_GlyphFactory,
    cast_tlp_GlyphFactory,
    0,
    0,
    0
};
