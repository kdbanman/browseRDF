/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Mon Apr 29 01:50:53 2013
 */

#include "sipAPItulipogl.h"

#line 9 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphComposite.sip"
#include <tulip/GlGraphComposite.h>
#line 12 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"

#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 112 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Graph.sip"
#include <tulip/Graph.h>
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 28 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 33 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/set.sip"
#include <set>
#line 36 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Node.sip"
#include <tulip/Node.h>
#line 39 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 42 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphInputData.sip"
#include <tulip/GlGraphInputData.h>
#line 45 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 9 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphRenderingParameters.sip"
#include <tulip/GlGraphRenderingParameters.h>
#line 48 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 33 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 51 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 36 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <tulip/GlSimpleEntity.h>
#line 54 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 29 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 58 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlLayer.sip"
#include <tulip/GlLayer.h>
#line 61 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 64 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"
#line 30 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 67 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"


class siptlp_GlGraphComposite : public tlp::GlGraphComposite
{
public:
    siptlp_GlGraphComposite(tlp::Graph *);
    virtual ~siptlp_GlGraphComposite();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void acceptVisitor(tlp::GlSceneVisitor *);
    void addLayerParent(tlp::GlLayer *);
    void removeLayerParent(tlp::GlLayer *);
    void draw(float,tlp::Camera *);
    void setStencil(int);
    void translate(const tlp::Coord&);
    void setVisible(bool);
    tlp::BoundingBox getBoundingBox();
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlGraphComposite(const siptlp_GlGraphComposite &);
    siptlp_GlGraphComposite &operator = (const siptlp_GlGraphComposite &);

    char sipPyMethods[10];
};

siptlp_GlGraphComposite::siptlp_GlGraphComposite(tlp::Graph *a0): tlp::GlGraphComposite(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlGraphComposite::~siptlp_GlGraphComposite()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlGraphComposite::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlGraphComposite::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::addLayerParent(tlp::GlLayer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_addLayerParent);

    if (!sipMeth)
    {
        tlp::GlComposite::addLayerParent(a0);
        return;
    }

    extern void sipVH_tulipogl_16(sip_gilstate_t,PyObject *,tlp::GlLayer *);

    sipVH_tulipogl_16(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::removeLayerParent(tlp::GlLayer *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_removeLayerParent);

    if (!sipMeth)
    {
        tlp::GlComposite::removeLayerParent(a0);
        return;
    }

    extern void sipVH_tulipogl_16(sip_gilstate_t,PyObject *,tlp::GlLayer *);

    sipVH_tulipogl_16(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlComposite::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlGraphComposite::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlComposite::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlComposite::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlGraphComposite::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlGraphComposite::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_getXML);

    if (!sipMeth)
    {
        tlp::GlGraphComposite::getXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlGraphComposite::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_setWithXML);

    if (!sipMeth)
    {
        tlp::GlGraphComposite::setWithXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setRenderingParameters, "tlp.GlGraphComposite.setRenderingParameters(tlp.GlGraphRenderingParameters)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setRenderingParameters(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setRenderingParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::GlGraphRenderingParameters * a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, sipType_tlp_GlGraphRenderingParameters, &a0))
        {
            sipCpp->setRenderingParameters(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setRenderingParameters, doc_tlp_GlGraphComposite_setRenderingParameters);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getRenderingParameters, "tlp.GlGraphComposite.getRenderingParameters() -> tlp.GlGraphRenderingParameters");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getRenderingParameters(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getRenderingParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            tlp::GlGraphRenderingParameters *sipRes = 0;

#line 31 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlGraphComposite.sip"
    sipRes = new tlp::GlGraphRenderingParameters(sipCpp->getRenderingParameters());
#line 333 "/home/kirbybanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlGraphComposite.cpp"

            return sipConvertFromType(sipRes,sipType_tlp_GlGraphRenderingParameters,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getRenderingParameters, doc_tlp_GlGraphComposite_getRenderingParameters);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getInputData, "tlp.GlGraphComposite.getInputData() -> tlp.GlGraphInputData");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getInputData(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getInputData(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            tlp::GlGraphInputData *sipRes;

            sipRes = sipCpp->getInputData();

            return sipConvertFromType(sipRes,sipType_tlp_GlGraphInputData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getInputData, doc_tlp_GlGraphComposite_getInputData);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_acceptVisitor, "tlp.GlGraphComposite.acceptVisitor(tlp.GlSceneVisitor)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_acceptVisitor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_acceptVisitor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        tlp::GlSceneVisitor * a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, sipType_tlp_GlSceneVisitor, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlGraphComposite::acceptVisitor(a0) : sipCpp->acceptVisitor(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_acceptVisitor, doc_tlp_GlGraphComposite_acceptVisitor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getMetaNodes, "tlp.GlGraphComposite.getMetaNodes() -> list-of-tlp.node");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getMetaNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getMetaNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            std::set<tlp::node> *sipRes;

            sipRes = &sipCpp->getMetaNodes();

            return sipConvertFromType(sipRes,sipType_std_set_0100tlp_node,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getMetaNodes, doc_tlp_GlGraphComposite_getMetaNodes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getXML, "tlp.GlGraphComposite.getXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlGraphComposite::getXML(a0) : sipCpp->getXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getXML, doc_tlp_GlGraphComposite_getXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setWithXML, "tlp.GlGraphComposite.setWithXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setWithXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setWithXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlGraphComposite::setWithXML(a0) : sipCpp->setWithXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setWithXML, doc_tlp_GlGraphComposite_setWithXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayNodes, "tlp.GlGraphComposite.setDisplayNodes(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayNodes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayNodes, doc_tlp_GlGraphComposite_setDisplayNodes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayMetaNodes, "tlp.GlGraphComposite.setDisplayMetaNodes(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayMetaNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayMetaNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayMetaNodes(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayMetaNodes, doc_tlp_GlGraphComposite_setDisplayMetaNodes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayEdges, "tlp.GlGraphComposite.setDisplayEdges(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayEdges(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayEdges, doc_tlp_GlGraphComposite_setDisplayEdges);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayNodesLabel, "tlp.GlGraphComposite.setDisplayNodesLabel(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayNodesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayNodesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayNodesLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayNodesLabel, doc_tlp_GlGraphComposite_setDisplayNodesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayMetaNodesLabel, "tlp.GlGraphComposite.setDisplayMetaNodesLabel(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayMetaNodesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayMetaNodesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayMetaNodesLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayMetaNodesLabel, doc_tlp_GlGraphComposite_setDisplayMetaNodesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setDisplayEdgesLabel, "tlp.GlGraphComposite.setDisplayEdgesLabel(bool)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setDisplayEdgesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setDisplayEdgesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setDisplayEdgesLabel(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setDisplayEdgesLabel, doc_tlp_GlGraphComposite_setDisplayEdgesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setSelectedNodesStencil, "tlp.GlGraphComposite.setSelectedNodesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setSelectedNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setSelectedNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setSelectedNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setSelectedNodesStencil, doc_tlp_GlGraphComposite_setSelectedNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setSelectedMetaNodesStencil, "tlp.GlGraphComposite.setSelectedMetaNodesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setSelectedMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setSelectedMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setSelectedMetaNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setSelectedMetaNodesStencil, doc_tlp_GlGraphComposite_setSelectedMetaNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setSelectedEdgesStencil, "tlp.GlGraphComposite.setSelectedEdgesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setSelectedEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setSelectedEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setSelectedEdgesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setSelectedEdgesStencil, doc_tlp_GlGraphComposite_setSelectedEdgesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setNodesStencil, "tlp.GlGraphComposite.setNodesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setNodesStencil, doc_tlp_GlGraphComposite_setNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setMetaNodesStencil, "tlp.GlGraphComposite.setMetaNodesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setMetaNodesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setMetaNodesStencil, doc_tlp_GlGraphComposite_setMetaNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setEdgesStencil, "tlp.GlGraphComposite.setEdgesStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setEdgesStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setEdgesStencil, doc_tlp_GlGraphComposite_setEdgesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setNodesLabelStencil, "tlp.GlGraphComposite.setNodesLabelStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setNodesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setNodesLabelStencil, doc_tlp_GlGraphComposite_setNodesLabelStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setMetaNodesLabelStencil, "tlp.GlGraphComposite.setMetaNodesLabelStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setMetaNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setMetaNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setMetaNodesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setMetaNodesLabelStencil, doc_tlp_GlGraphComposite_setMetaNodesLabelStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_setEdgesLabelStencil, "tlp.GlGraphComposite.setEdgesLabelStencil(int)");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_setEdgesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_setEdgesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp, &a0))
        {
            sipCpp->setEdgesLabelStencil(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_setEdgesLabelStencil, doc_tlp_GlGraphComposite_setEdgesLabelStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayNodes, "tlp.GlGraphComposite.isDisplayNodes() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayNodes, doc_tlp_GlGraphComposite_isDisplayNodes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayMetaNodes, "tlp.GlGraphComposite.isDisplayMetaNodes() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayMetaNodes(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayMetaNodes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayMetaNodes();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayMetaNodes, doc_tlp_GlGraphComposite_isDisplayMetaNodes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayEdges, "tlp.GlGraphComposite.isDisplayEdges() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayEdges(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayEdges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayEdges();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayEdges, doc_tlp_GlGraphComposite_isDisplayEdges);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayNodesLabel, "tlp.GlGraphComposite.isDisplayNodesLabel() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayNodesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayNodesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayNodesLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayNodesLabel, doc_tlp_GlGraphComposite_isDisplayNodesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayMetaNodesLabel, "tlp.GlGraphComposite.isDisplayMetaNodesLabel() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayMetaNodesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayMetaNodesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayMetaNodesLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayMetaNodesLabel, doc_tlp_GlGraphComposite_isDisplayMetaNodesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_isDisplayEdgesLabel, "tlp.GlGraphComposite.isDisplayEdgesLabel() -> bool");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_isDisplayEdgesLabel(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_isDisplayEdgesLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->isDisplayEdgesLabel();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_isDisplayEdgesLabel, doc_tlp_GlGraphComposite_isDisplayEdgesLabel);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getSelectedNodesStencil, "tlp.GlGraphComposite.getSelectedNodesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getSelectedNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getSelectedNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getSelectedNodesStencil, doc_tlp_GlGraphComposite_getSelectedNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getSelectedMetaNodesStencil, "tlp.GlGraphComposite.getSelectedMetaNodesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getSelectedMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getSelectedMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedMetaNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getSelectedMetaNodesStencil, doc_tlp_GlGraphComposite_getSelectedMetaNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getSelectedEdgesStencil, "tlp.GlGraphComposite.getSelectedEdgesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getSelectedEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getSelectedEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getSelectedEdgesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getSelectedEdgesStencil, doc_tlp_GlGraphComposite_getSelectedEdgesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getNodesStencil, "tlp.GlGraphComposite.getNodesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getNodesStencil, doc_tlp_GlGraphComposite_getNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getMetaNodesStencil, "tlp.GlGraphComposite.getMetaNodesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getMetaNodesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getMetaNodesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMetaNodesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getMetaNodesStencil, doc_tlp_GlGraphComposite_getMetaNodesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getEdgesStencil, "tlp.GlGraphComposite.getEdgesStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getEdgesStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getEdgesStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getEdgesStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getEdgesStencil, doc_tlp_GlGraphComposite_getEdgesStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getNodesLabelStencil, "tlp.GlGraphComposite.getNodesLabelStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getNodesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getNodesLabelStencil, doc_tlp_GlGraphComposite_getNodesLabelStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getMetaNodesLabelStencil, "tlp.GlGraphComposite.getMetaNodesLabelStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getMetaNodesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getMetaNodesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getMetaNodesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getMetaNodesLabelStencil, doc_tlp_GlGraphComposite_getMetaNodesLabelStencil);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlGraphComposite_getEdgesLabelStencil, "tlp.GlGraphComposite.getEdgesLabelStencil() -> int");

extern "C" {static PyObject *meth_tlp_GlGraphComposite_getEdgesLabelStencil(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlGraphComposite_getEdgesLabelStencil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlGraphComposite *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlGraphComposite, &sipCpp))
        {
            int sipRes;

            sipRes = sipCpp->getEdgesLabelStencil();

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlGraphComposite, sipName_getEdgesLabelStencil, doc_tlp_GlGraphComposite_getEdgesLabelStencil);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlGraphComposite(void *, const sipTypeDef *);}
static void *cast_tlp_GlGraphComposite(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlGraphComposite)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlComposite)->ctd_cast((tlp::GlComposite *)(tlp::GlGraphComposite *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlGraphComposite(void *, int);}
static void release_tlp_GlGraphComposite(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlGraphComposite *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlGraphComposite *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlGraphComposite(sipSimpleWrapper *);}
static void dealloc_tlp_GlGraphComposite(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlGraphComposite *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlGraphComposite(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlGraphComposite(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlGraphComposite(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlGraphComposite *sipCpp = 0;

    {
        tlp::Graph * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8", sipType_tlp_Graph, &a0))
        {
            sipCpp = new siptlp_GlGraphComposite(a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlGraphComposite[] = {{11, 255, 1}};


static PyMethodDef methods_tlp_GlGraphComposite[] = {
    {SIP_MLNAME_CAST(sipName_acceptVisitor), meth_tlp_GlGraphComposite_acceptVisitor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_acceptVisitor)},
    {SIP_MLNAME_CAST(sipName_getEdgesLabelStencil), meth_tlp_GlGraphComposite_getEdgesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getEdgesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getEdgesStencil), meth_tlp_GlGraphComposite_getEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_getInputData), meth_tlp_GlGraphComposite_getInputData, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getInputData)},
    {SIP_MLNAME_CAST(sipName_getMetaNodes), meth_tlp_GlGraphComposite_getMetaNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getMetaNodes)},
    {SIP_MLNAME_CAST(sipName_getMetaNodesLabelStencil), meth_tlp_GlGraphComposite_getMetaNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getMetaNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getMetaNodesStencil), meth_tlp_GlGraphComposite_getMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getNodesLabelStencil), meth_tlp_GlGraphComposite_getNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_getNodesStencil), meth_tlp_GlGraphComposite_getNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getRenderingParameters), meth_tlp_GlGraphComposite_getRenderingParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getRenderingParameters)},
    {SIP_MLNAME_CAST(sipName_getSelectedEdgesStencil), meth_tlp_GlGraphComposite_getSelectedEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getSelectedEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_getSelectedMetaNodesStencil), meth_tlp_GlGraphComposite_getSelectedMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getSelectedMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getSelectedNodesStencil), meth_tlp_GlGraphComposite_getSelectedNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getSelectedNodesStencil)},
    {SIP_MLNAME_CAST(sipName_getXML), meth_tlp_GlGraphComposite_getXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_getXML)},
    {SIP_MLNAME_CAST(sipName_isDisplayEdges), meth_tlp_GlGraphComposite_isDisplayEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayEdges)},
    {SIP_MLNAME_CAST(sipName_isDisplayEdgesLabel), meth_tlp_GlGraphComposite_isDisplayEdgesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayEdgesLabel)},
    {SIP_MLNAME_CAST(sipName_isDisplayMetaNodes), meth_tlp_GlGraphComposite_isDisplayMetaNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayMetaNodes)},
    {SIP_MLNAME_CAST(sipName_isDisplayMetaNodesLabel), meth_tlp_GlGraphComposite_isDisplayMetaNodesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayMetaNodesLabel)},
    {SIP_MLNAME_CAST(sipName_isDisplayNodes), meth_tlp_GlGraphComposite_isDisplayNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayNodes)},
    {SIP_MLNAME_CAST(sipName_isDisplayNodesLabel), meth_tlp_GlGraphComposite_isDisplayNodesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_isDisplayNodesLabel)},
    {SIP_MLNAME_CAST(sipName_setDisplayEdges), meth_tlp_GlGraphComposite_setDisplayEdges, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayEdges)},
    {SIP_MLNAME_CAST(sipName_setDisplayEdgesLabel), meth_tlp_GlGraphComposite_setDisplayEdgesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayEdgesLabel)},
    {SIP_MLNAME_CAST(sipName_setDisplayMetaNodes), meth_tlp_GlGraphComposite_setDisplayMetaNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayMetaNodes)},
    {SIP_MLNAME_CAST(sipName_setDisplayMetaNodesLabel), meth_tlp_GlGraphComposite_setDisplayMetaNodesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayMetaNodesLabel)},
    {SIP_MLNAME_CAST(sipName_setDisplayNodes), meth_tlp_GlGraphComposite_setDisplayNodes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayNodes)},
    {SIP_MLNAME_CAST(sipName_setDisplayNodesLabel), meth_tlp_GlGraphComposite_setDisplayNodesLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setDisplayNodesLabel)},
    {SIP_MLNAME_CAST(sipName_setEdgesLabelStencil), meth_tlp_GlGraphComposite_setEdgesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setEdgesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setEdgesStencil), meth_tlp_GlGraphComposite_setEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_setMetaNodesLabelStencil), meth_tlp_GlGraphComposite_setMetaNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setMetaNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setMetaNodesStencil), meth_tlp_GlGraphComposite_setMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setNodesLabelStencil), meth_tlp_GlGraphComposite_setNodesLabelStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setNodesLabelStencil)},
    {SIP_MLNAME_CAST(sipName_setNodesStencil), meth_tlp_GlGraphComposite_setNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setRenderingParameters), meth_tlp_GlGraphComposite_setRenderingParameters, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setRenderingParameters)},
    {SIP_MLNAME_CAST(sipName_setSelectedEdgesStencil), meth_tlp_GlGraphComposite_setSelectedEdgesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setSelectedEdgesStencil)},
    {SIP_MLNAME_CAST(sipName_setSelectedMetaNodesStencil), meth_tlp_GlGraphComposite_setSelectedMetaNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setSelectedMetaNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setSelectedNodesStencil), meth_tlp_GlGraphComposite_setSelectedNodesStencil, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setSelectedNodesStencil)},
    {SIP_MLNAME_CAST(sipName_setWithXML), meth_tlp_GlGraphComposite_setWithXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlGraphComposite_setWithXML)}
};

PyDoc_STRVAR(doc_tlp_GlGraphComposite, "\1tlp.GlGraphComposite(tlp.Graph)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlGraphComposite = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlGraphComposite,
        {0}
    },
    {
        sipNameNr_GlGraphComposite,
        {5, 255, 0},
        37, methods_tlp_GlGraphComposite,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlGraphComposite,
    -1,
    -1,
    supers_tlp_GlGraphComposite,
    0,
    init_tlp_GlGraphComposite,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlGraphComposite,
    0,
    0,
    0,
    release_tlp_GlGraphComposite,
    cast_tlp_GlGraphComposite,
    0,
    0,
    0
};
