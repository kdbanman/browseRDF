/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlRegularPolygon.sip"
#include <tulip/GlRegularPolygon.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"

#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Size.sip"
#include <tulip/Size.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 22 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 26 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 35 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlAbstractPolygon.sip"
#include <tulip/GlAbstractPolygon.h>
#line 38 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 44 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 47 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlRegularPolygon.cpp"


class siptlp_GlRegularPolygon : public tlp::GlRegularPolygon
{
public:
    siptlp_GlRegularPolygon(const tlp::Coord&,const tlp::Size&,uint,const tlp::Color&,const tlp::Color&,bool,bool,const std::string&,float);
    siptlp_GlRegularPolygon(const tlp::GlRegularPolygon&);
    virtual ~siptlp_GlRegularPolygon();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_setPoints(bool,const std::vector<tlp::Coord>&);
    void sipProtectVirt_setPoint(bool,uint,const tlp::Coord&);
    void sipProtectVirt_setFillColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_setOutlineColors(bool,const std::vector<tlp::Color>&);
    void sipProtectVirt_recomputeBoundingBox(bool);
    void sipProtectVirt_clearGenerated(bool);
    void sipProtect_computePolygon();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void resizePoints(const uint);
    void resizeColors(const uint);
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);
    void setPoints(const std::vector<tlp::Coord>&);
    void setPoint(uint,const tlp::Coord&);
    void setFillColors(const std::vector<tlp::Color>&);
    void setOutlineColors(const std::vector<tlp::Color>&);
    void recomputeBoundingBox();
    void clearGenerated();
    void draw(float,tlp::Camera *);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void setVisible(bool);
    void setStencil(int);
    tlp::BoundingBox getBoundingBox();
    void translate(const tlp::Coord&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlRegularPolygon(const siptlp_GlRegularPolygon &);
    siptlp_GlRegularPolygon &operator = (const siptlp_GlRegularPolygon &);

    char sipPyMethods[16];
};

siptlp_GlRegularPolygon::siptlp_GlRegularPolygon(const tlp::Coord& a0,const tlp::Size& a1,uint a2,const tlp::Color& a3,const tlp::Color& a4,bool a5,bool a6,const std::string& a7,float a8): tlp::GlRegularPolygon(a0,a1,a2,a3,a4,a5,a6,a7,a8), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRegularPolygon::siptlp_GlRegularPolygon(const tlp::GlRegularPolygon& a0): tlp::GlRegularPolygon(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlRegularPolygon::~siptlp_GlRegularPolygon()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlRegularPolygon::resizePoints(const uint a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_resizePoints);

    if (!sipMeth)
    {
        tlp::GlRegularPolygon::resizePoints(a0);
        return;
    }

    extern void sipVH_tulipogl_6(sip_gilstate_t,PyObject *,const uint);

    sipVH_tulipogl_6(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::resizeColors(const uint a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_resizeColors);

    if (!sipMeth)
    {
        tlp::GlPolygon::resizeColors(a0);
        return;
    }

    extern void sipVH_tulipogl_6(sip_gilstate_t,PyObject *,const uint);

    sipVH_tulipogl_6(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_getXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::getXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_setWithXML);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setWithXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setPoints(const std::vector<tlp::Coord>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setPoints);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoints(a0);
        return;
    }

    extern void sipVH_tulipogl_9(sip_gilstate_t,PyObject *,const std::vector<tlp::Coord>&);

    sipVH_tulipogl_9(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setPoint(uint a0,const tlp::Coord& a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setPoint);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setPoint(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_8(sip_gilstate_t,PyObject *,uint,const tlp::Coord&);

    sipVH_tulipogl_8(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlRegularPolygon::setFillColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_setFillColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setFillColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setOutlineColors(const std::vector<tlp::Color>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_setOutlineColors);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::setOutlineColors(a0);
        return;
    }

    extern void sipVH_tulipogl_7(sip_gilstate_t,PyObject *,const std::vector<tlp::Color>&);

    sipVH_tulipogl_7(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::recomputeBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_recomputeBoundingBox);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::recomputeBoundingBox();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlRegularPolygon::clearGenerated()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_clearGenerated);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::clearGenerated();
        return;
    }

    typedef void (*sipVH_tulip_18)(sip_gilstate_t,PyObject *);

    ((sipVH_tulip_18)(sipModuleAPI_tulipogl_tulip->em_virthandlers[18]))(sipGILState,sipMeth);
}

void siptlp_GlRegularPolygon::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlAbstractPolygon::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlRegularPolygon::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlRegularPolygon::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlRegularPolygon::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}

void siptlp_GlRegularPolygon::sipProtectVirt_setPoints(bool sipSelfWasArg,const std::vector<tlp::Coord>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoints(a0) : setPoints(a0));
}

void siptlp_GlRegularPolygon::sipProtectVirt_setPoint(bool sipSelfWasArg,uint a0,const tlp::Coord& a1)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setPoint(a0,a1) : setPoint(a0,a1));
}

void siptlp_GlRegularPolygon::sipProtectVirt_setFillColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setFillColors(a0) : setFillColors(a0));
}

void siptlp_GlRegularPolygon::sipProtectVirt_setOutlineColors(bool sipSelfWasArg,const std::vector<tlp::Color>& a0)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::setOutlineColors(a0) : setOutlineColors(a0));
}

void siptlp_GlRegularPolygon::sipProtectVirt_recomputeBoundingBox(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::recomputeBoundingBox() : recomputeBoundingBox());
}

void siptlp_GlRegularPolygon::sipProtectVirt_clearGenerated(bool sipSelfWasArg)
{
    (sipSelfWasArg ? tlp::GlAbstractPolygon::clearGenerated() : clearGenerated());
}

void siptlp_GlRegularPolygon::sipProtect_computePolygon()
{
    tlp::GlRegularPolygon::computePolygon();
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setPoints, "tlp.GlRegularPolygon.setPoints(list-of-tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setPoints(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setPoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, sipType_std_vector_0100tlp_Coord,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setPoints(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setPoints, doc_tlp_GlRegularPolygon_setPoints);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setPoint, "tlp.GlRegularPolygon.setPoint(int, tlp.Coord)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setPoint(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        uint a0;
        const tlp::Coord * a1;
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BuJ9", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, &a0, sipType_tlp_Coord, &a1))
        {
            sipCpp->sipProtectVirt_setPoint(sipSelfWasArg,a0,*a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setPoint, doc_tlp_GlRegularPolygon_setPoint);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setFillColors, "tlp.GlRegularPolygon.setFillColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setFillColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setFillColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setFillColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setFillColors, doc_tlp_GlRegularPolygon_setFillColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setOutlineColors, "tlp.GlRegularPolygon.setOutlineColors(list-of-tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setOutlineColors(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setOutlineColors(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Color> * a0;
        int a0State = 0;
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, sipType_std_vector_0100tlp_Color,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_setOutlineColors(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Color> *>(a0),sipType_std_vector_0100tlp_Color,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setOutlineColors, doc_tlp_GlRegularPolygon_setOutlineColors);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_recomputeBoundingBox, "tlp.GlRegularPolygon.recomputeBoundingBox()");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_recomputeBoundingBox(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_recomputeBoundingBox(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp))
        {
            sipCpp->sipProtectVirt_recomputeBoundingBox(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_recomputeBoundingBox, doc_tlp_GlRegularPolygon_recomputeBoundingBox);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_clearGenerated, "tlp.GlRegularPolygon.clearGenerated()");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_clearGenerated(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_clearGenerated(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp))
        {
            sipCpp->sipProtectVirt_clearGenerated(sipSelfWasArg);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_clearGenerated, doc_tlp_GlRegularPolygon_clearGenerated);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setStartAngle, "tlp.GlRegularPolygon.setStartAngle(float)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setStartAngle(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setStartAngle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, &a0))
        {
            sipCpp->setStartAngle(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setStartAngle, doc_tlp_GlRegularPolygon_setStartAngle);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_getNumberOfSides, "tlp.GlRegularPolygon.getNumberOfSides() -> int");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_getNumberOfSides(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_getNumberOfSides(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp))
        {
            uint sipRes;

            sipRes = sipCpp->getNumberOfSides();

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_getNumberOfSides, doc_tlp_GlRegularPolygon_getNumberOfSides);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_resizePoints, "tlp.GlRegularPolygon.resizePoints(int)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_resizePoints(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_resizePoints(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        uint a0;
        tlp::GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlRegularPolygon::resizePoints(a0) : sipCpp->resizePoints(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_resizePoints, doc_tlp_GlRegularPolygon_resizePoints);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_setNumberOfSides, "tlp.GlRegularPolygon.setNumberOfSides(int)");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_setNumberOfSides(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_setNumberOfSides(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        uint a0;
        tlp::GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bu", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp, &a0))
        {
            sipCpp->setNumberOfSides(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_setNumberOfSides, doc_tlp_GlRegularPolygon_setNumberOfSides);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlRegularPolygon_computePolygon, "tlp.GlRegularPolygon.computePolygon()");

extern "C" {static PyObject *meth_tlp_GlRegularPolygon_computePolygon(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlRegularPolygon_computePolygon(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        siptlp_GlRegularPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlRegularPolygon, &sipCpp))
        {
            sipCpp->sipProtect_computePolygon();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlRegularPolygon, sipName_computePolygon, doc_tlp_GlRegularPolygon_computePolygon);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlRegularPolygon(void *, const sipTypeDef *);}
static void *cast_tlp_GlRegularPolygon(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlRegularPolygon)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlPolygon)->ctd_cast((tlp::GlPolygon *)(tlp::GlRegularPolygon *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlRegularPolygon(void *, int);}
static void release_tlp_GlRegularPolygon(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlRegularPolygon *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlRegularPolygon *>(sipCppV);
}


extern "C" {static void dealloc_tlp_GlRegularPolygon(sipSimpleWrapper *);}
static void dealloc_tlp_GlRegularPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlRegularPolygon *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlRegularPolygon(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlRegularPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlRegularPolygon(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlRegularPolygon *sipCpp = 0;

    {
        const tlp::Coord * a0;
        const tlp::Size * a1;
        uint a2;
        const tlp::Color& a3def = tlp::Color(255,0,0,255);
        const tlp::Color * a3 = &a3def;
        const tlp::Color& a4def = tlp::Color(0,0,255,255);
        const tlp::Color * a4 = &a4def;
        bool a5 = 1;
        bool a6 = 1;
        const std::string& a7def = "";
        const std::string * a7 = &a7def;
        int a7State = 0;
        float a8 = 1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9J9u|J9J9bbJ1f", sipType_tlp_Coord, &a0, sipType_tlp_Size, &a1, &a2, sipType_tlp_Color, &a3, sipType_tlp_Color, &a4, &a5, &a6, sipType_std_string,&a7, &a7State, &a8))
        {
            sipCpp = new siptlp_GlRegularPolygon(*a0,*a1,a2,*a3,*a4,a5,a6,*a7,a8);
            sipReleaseType(const_cast<std::string *>(a7),sipType_std_string,a7State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlRegularPolygon * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlRegularPolygon, &a0))
        {
            sipCpp = new siptlp_GlRegularPolygon(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlRegularPolygon[] = {{16, 255, 1}};


static PyMethodDef methods_tlp_GlRegularPolygon[] = {
    {SIP_MLNAME_CAST(sipName_clearGenerated), meth_tlp_GlRegularPolygon_clearGenerated, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_computePolygon), meth_tlp_GlRegularPolygon_computePolygon, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRegularPolygon_computePolygon)},
    {SIP_MLNAME_CAST(sipName_getNumberOfSides), meth_tlp_GlRegularPolygon_getNumberOfSides, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRegularPolygon_getNumberOfSides)},
    {SIP_MLNAME_CAST(sipName_recomputeBoundingBox), meth_tlp_GlRegularPolygon_recomputeBoundingBox, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_resizePoints), meth_tlp_GlRegularPolygon_resizePoints, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRegularPolygon_resizePoints)},
    {SIP_MLNAME_CAST(sipName_setFillColors), meth_tlp_GlRegularPolygon_setFillColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setNumberOfSides), meth_tlp_GlRegularPolygon_setNumberOfSides, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRegularPolygon_setNumberOfSides)},
    {SIP_MLNAME_CAST(sipName_setOutlineColors), meth_tlp_GlRegularPolygon_setOutlineColors, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPoint), meth_tlp_GlRegularPolygon_setPoint, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPoints), meth_tlp_GlRegularPolygon_setPoints, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setStartAngle), meth_tlp_GlRegularPolygon_setStartAngle, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlRegularPolygon_setStartAngle)}
};

PyDoc_STRVAR(doc_tlp_GlRegularPolygon, "\1tlp.GlRegularPolygon(tlp.Coord, tlp.Size, int, tlp.Color outlineColor=tlp.Color(255,0,0,255), tlp.Color fillColor=tlp.Color(0,0,255,255), bool filled=True, bool outlined=True, string textureName=\"\", float outlineSize=1)\n"
    "tlp.GlRegularPolygon(tlp.GlRegularPolygon)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlRegularPolygon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlRegularPolygon,
        {0}
    },
    {
        sipNameNr_GlRegularPolygon,
        {5, 255, 0},
        11, methods_tlp_GlRegularPolygon,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlRegularPolygon,
    -1,
    -1,
    supers_tlp_GlRegularPolygon,
    0,
    init_tlp_GlRegularPolygon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlRegularPolygon,
    0,
    0,
    0,
    release_tlp_GlRegularPolygon,
    cast_tlp_GlRegularPolygon,
    0,
    0,
    0
};
