/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"

#line 36 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComplexPolygon.sip"
#include <tulip/GlComplexPolygon.h>
#line 12 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"

#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Color.sip"
#include <tulip/Color.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/string.sip"
	// Include the library interface to the type being mapped.
#include <string>
#line 23 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 26 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSimpleEntity.sip"
#include <libxml/tree.h>
#line 32 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlComposite.sip"
#include <tulip/GlComposite.h>
#line 35 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/BoundingBox.sip"
#include <tulip/BoundingBox.h>
#line 38 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlSceneVisitor.sip"
#include <tulip/GlSceneVisitor.h>
#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpGlComplexPolygon.cpp"


class siptlp_GlComplexPolygon : public tlp::GlComplexPolygon
{
public:
    siptlp_GlComplexPolygon();
    siptlp_GlComplexPolygon(const std::vector<std_vector_0100tlp_Coord>&,tlp::Color,int,const std::string&);
    siptlp_GlComplexPolygon(const std::vector<std_vector_0100tlp_Coord>&,tlp::Color,tlp::Color,int,const std::string&);
    siptlp_GlComplexPolygon(const std::vector<tlp::Coord>&,tlp::Color,int,const std::string&);
    siptlp_GlComplexPolygon(const std::vector<tlp::Coord>&,tlp::Color,tlp::Color,int,const std::string&);
    siptlp_GlComplexPolygon(const tlp::GlComplexPolygon&);
    virtual ~siptlp_GlComplexPolygon();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void draw(float,tlp::Camera *);
    void getXML(_xmlNode *);
    void setWithXML(_xmlNode *);
    void acceptVisitor(tlp::GlSceneVisitor *);
    void setVisible(bool);
    void setStencil(int);
    tlp::BoundingBox getBoundingBox();
    void translate(const tlp::Coord&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_GlComplexPolygon(const siptlp_GlComplexPolygon &);
    siptlp_GlComplexPolygon &operator = (const siptlp_GlComplexPolygon &);

    char sipPyMethods[8];
};

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(): tlp::GlComplexPolygon(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(const std::vector<std_vector_0100tlp_Coord>& a0,tlp::Color a1,int a2,const std::string& a3): tlp::GlComplexPolygon(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(const std::vector<std_vector_0100tlp_Coord>& a0,tlp::Color a1,tlp::Color a2,int a3,const std::string& a4): tlp::GlComplexPolygon(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(const std::vector<tlp::Coord>& a0,tlp::Color a1,int a2,const std::string& a3): tlp::GlComplexPolygon(a0,a1,a2,a3), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(const std::vector<tlp::Coord>& a0,tlp::Color a1,tlp::Color a2,int a3,const std::string& a4): tlp::GlComplexPolygon(a0,a1,a2,a3,a4), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::siptlp_GlComplexPolygon(const tlp::GlComplexPolygon& a0): tlp::GlComplexPolygon(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_GlComplexPolygon::~siptlp_GlComplexPolygon()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_GlComplexPolygon::draw(float a0,tlp::Camera *a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_draw);

    if (!sipMeth)
    {
        tlp::GlComplexPolygon::draw(a0,a1);
        return;
    }

    extern void sipVH_tulipogl_5(sip_gilstate_t,PyObject *,float,tlp::Camera *);

    sipVH_tulipogl_5(sipGILState,sipMeth,a0,a1);
}

void siptlp_GlComplexPolygon::getXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_getXML);

    if (!sipMeth)
    {
        tlp::GlComplexPolygon::getXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlComplexPolygon::setWithXML(_xmlNode *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_setWithXML);

    if (!sipMeth)
    {
        tlp::GlComplexPolygon::setWithXML(a0);
        return;
    }

    extern void sipVH_tulipogl_4(sip_gilstate_t,PyObject *,_xmlNode *);

    sipVH_tulipogl_4(sipGILState,sipMeth,a0);
}

void siptlp_GlComplexPolygon::acceptVisitor(tlp::GlSceneVisitor *a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_acceptVisitor);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::acceptVisitor(a0);
        return;
    }

    extern void sipVH_tulipogl_15(sip_gilstate_t,PyObject *,tlp::GlSceneVisitor *);

    sipVH_tulipogl_15(sipGILState,sipMeth,a0);
}

void siptlp_GlComplexPolygon::setVisible(bool a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_setVisible);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setVisible(a0);
        return;
    }

    typedef void (*sipVH_tulip_16)(sip_gilstate_t,PyObject *,bool);

    ((sipVH_tulip_16)(sipModuleAPI_tulipogl_tulip->em_virthandlers[16]))(sipGILState,sipMeth,a0);
}

void siptlp_GlComplexPolygon::setStencil(int a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_setStencil);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::setStencil(a0);
        return;
    }

    typedef void (*sipVH_tulip_6)(sip_gilstate_t,PyObject *,int);

    ((sipVH_tulip_6)(sipModuleAPI_tulipogl_tulip->em_virthandlers[6]))(sipGILState,sipMeth,a0);
}

tlp::BoundingBox siptlp_GlComplexPolygon::getBoundingBox()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_getBoundingBox);

    if (!sipMeth)
        return tlp::GlSimpleEntity::getBoundingBox();

    extern tlp::BoundingBox sipVH_tulipogl_18(sip_gilstate_t,PyObject *);

    return sipVH_tulipogl_18(sipGILState,sipMeth);
}

void siptlp_GlComplexPolygon::translate(const tlp::Coord& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_translate);

    if (!sipMeth)
    {
        tlp::GlSimpleEntity::translate(a0);
        return;
    }

    extern void sipVH_tulipogl_1(sip_gilstate_t,PyObject *,const tlp::Coord&);

    sipVH_tulipogl_1(sipGILState,sipMeth,a0);
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_draw, "tlp.GlComplexPolygon.draw(float, tlp.Camera)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_draw(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_draw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        float a0;
        tlp::Camera * a1;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BfJ8", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, &a0, sipType_tlp_Camera, &a1))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComplexPolygon::draw(a0,a1) : sipCpp->draw(a0,a1));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_draw, doc_tlp_GlComplexPolygon_draw);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setOutlineMode, "tlp.GlComplexPolygon.setOutlineMode(bool)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setOutlineMode(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setOutlineMode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        bool a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bb", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, &a0))
        {
            sipCpp->setOutlineMode(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setOutlineMode, doc_tlp_GlComplexPolygon_setOutlineMode);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setOutlineSize, "tlp.GlComplexPolygon.setOutlineSize(float)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setOutlineSize(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setOutlineSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, &a0))
        {
            sipCpp->setOutlineSize(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setOutlineSize, doc_tlp_GlComplexPolygon_setOutlineSize);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_getFillColor, "tlp.GlComplexPolygon.getFillColor() -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_getFillColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_getFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getFillColor());

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_getFillColor, doc_tlp_GlComplexPolygon_getFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setFillColor, "tlp.GlComplexPolygon.setFillColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setFillColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setFillColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Color * a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setFillColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setFillColor, doc_tlp_GlComplexPolygon_setFillColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_getOutlineColor, "tlp.GlComplexPolygon.getOutlineColor() -> tlp.Color");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_getOutlineColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_getOutlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp))
        {
            tlp::Color *sipRes;

            sipRes = new tlp::Color(sipCpp->getOutlineColor());

            return sipConvertFromNewType(sipRes,sipType_tlp_Color,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_getOutlineColor, doc_tlp_GlComplexPolygon_getOutlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setOutlineColor, "tlp.GlComplexPolygon.setOutlineColor(tlp.Color)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setOutlineColor(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setOutlineColor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Color * a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, sipType_tlp_Color, &a0))
        {
            sipCpp->setOutlineColor(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setOutlineColor, doc_tlp_GlComplexPolygon_setOutlineColor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_getTextureZoom, "tlp.GlComplexPolygon.getTextureZoom() -> float");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_getTextureZoom(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_getTextureZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp))
        {
            float sipRes;

            sipRes = sipCpp->getTextureZoom();

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_getTextureZoom, doc_tlp_GlComplexPolygon_getTextureZoom);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setTextureZoom, "tlp.GlComplexPolygon.setTextureZoom(float)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setTextureZoom(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setTextureZoom(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, &a0))
        {
            sipCpp->setTextureZoom(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setTextureZoom, doc_tlp_GlComplexPolygon_setTextureZoom);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_getXML, "tlp.GlComplexPolygon.getXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_getXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_getXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComplexPolygon::getXML(a0) : sipCpp->getXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_getXML, doc_tlp_GlComplexPolygon_getXML);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_GlComplexPolygon_setWithXML, "tlp.GlComplexPolygon.setWithXML(_xmlNode)");

extern "C" {static PyObject *meth_tlp_GlComplexPolygon_setWithXML(PyObject *, PyObject *);}
static PyObject *meth_tlp_GlComplexPolygon_setWithXML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        _xmlNode * a0;
        tlp::GlComplexPolygon *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_GlComplexPolygon, &sipCpp, sipType__xmlNode, &a0))
        {
            (sipSelfWasArg ? sipCpp->tlp::GlComplexPolygon::setWithXML(a0) : sipCpp->setWithXML(a0));

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GlComplexPolygon, sipName_setWithXML, doc_tlp_GlComplexPolygon_setWithXML);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_GlComplexPolygon(void *, const sipTypeDef *);}
static void *cast_tlp_GlComplexPolygon(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_GlComplexPolygon)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_GlSimpleEntity)->ctd_cast((tlp::GlSimpleEntity *)(tlp::GlComplexPolygon *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_GlComplexPolygon(void *, int);}
static void release_tlp_GlComplexPolygon(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_GlComplexPolygon *>(sipCppV);
    else
        delete reinterpret_cast<tlp::GlComplexPolygon *>(sipCppV);
}


extern "C" {static void assign_tlp_GlComplexPolygon(void *, SIP_SSIZE_T, const void *);}
static void assign_tlp_GlComplexPolygon(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<tlp::GlComplexPolygon *>(sipDst)[sipDstIdx] = *reinterpret_cast<const tlp::GlComplexPolygon *>(sipSrc);
}


extern "C" {static void *array_tlp_GlComplexPolygon(SIP_SSIZE_T);}
static void *array_tlp_GlComplexPolygon(SIP_SSIZE_T sipNrElem)
{
    return new tlp::GlComplexPolygon[sipNrElem];
}


extern "C" {static void *copy_tlp_GlComplexPolygon(const void *, SIP_SSIZE_T);}
static void *copy_tlp_GlComplexPolygon(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new tlp::GlComplexPolygon(reinterpret_cast<const tlp::GlComplexPolygon *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_tlp_GlComplexPolygon(sipSimpleWrapper *);}
static void dealloc_tlp_GlComplexPolygon(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_GlComplexPolygon *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_GlComplexPolygon(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_GlComplexPolygon(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_GlComplexPolygon(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_GlComplexPolygon *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            sipCpp = new siptlp_GlComplexPolygon();

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const std::vector<std_vector_0100tlp_Coord> * a0;
        int a0State = 0;
        tlp::Color * a1;
        int a2 = 0;
        const std::string& a3def = "";
        const std::string * a3 = &a3def;
        int a3State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9|iJ1", sipType_std_vector_0100std_vector_0100tlp_Coord,&a0, &a0State, sipType_tlp_Color, &a1, &a2, sipType_std_string,&a3, &a3State))
        {
            sipCpp = new siptlp_GlComplexPolygon(*a0,*a1,a2,*a3);
            sipReleaseType(const_cast<std::vector<std_vector_0100tlp_Coord> *>(a0),sipType_std_vector_0100std_vector_0100tlp_Coord,a0State);
            sipReleaseType(const_cast<std::string *>(a3),sipType_std_string,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const std::vector<std_vector_0100tlp_Coord> * a0;
        int a0State = 0;
        tlp::Color * a1;
        tlp::Color * a2;
        int a3 = 0;
        const std::string& a4def = "";
        const std::string * a4 = &a4def;
        int a4State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9J9|iJ1", sipType_std_vector_0100std_vector_0100tlp_Coord,&a0, &a0State, sipType_tlp_Color, &a1, sipType_tlp_Color, &a2, &a3, sipType_std_string,&a4, &a4State))
        {
            sipCpp = new siptlp_GlComplexPolygon(*a0,*a1,*a2,a3,*a4);
            sipReleaseType(const_cast<std::vector<std_vector_0100tlp_Coord> *>(a0),sipType_std_vector_0100std_vector_0100tlp_Coord,a0State);
            sipReleaseType(const_cast<std::string *>(a4),sipType_std_string,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        tlp::Color * a1;
        int a2 = 0;
        const std::string& a3def = "";
        const std::string * a3 = &a3def;
        int a3State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9|iJ1", sipType_std_vector_0100tlp_Coord,&a0, &a0State, sipType_tlp_Color, &a1, &a2, sipType_std_string,&a3, &a3State))
        {
            sipCpp = new siptlp_GlComplexPolygon(*a0,*a1,a2,*a3);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);
            sipReleaseType(const_cast<std::string *>(a3),sipType_std_string,a3State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const std::vector<tlp::Coord> * a0;
        int a0State = 0;
        tlp::Color * a1;
        tlp::Color * a2;
        int a3 = 0;
        const std::string& a4def = "";
        const std::string * a4 = &a4def;
        int a4State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J1J9J9|iJ1", sipType_std_vector_0100tlp_Coord,&a0, &a0State, sipType_tlp_Color, &a1, sipType_tlp_Color, &a2, &a3, sipType_std_string,&a4, &a4State))
        {
            sipCpp = new siptlp_GlComplexPolygon(*a0,*a1,*a2,a3,*a4);
            sipReleaseType(const_cast<std::vector<tlp::Coord> *>(a0),sipType_std_vector_0100tlp_Coord,a0State);
            sipReleaseType(const_cast<std::string *>(a4),sipType_std_string,a4State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::GlComplexPolygon * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_GlComplexPolygon, &a0))
        {
            sipCpp = new siptlp_GlComplexPolygon(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_GlComplexPolygon[] = {{23, 255, 1}};


static PyMethodDef methods_tlp_GlComplexPolygon[] = {
    {SIP_MLNAME_CAST(sipName_draw), meth_tlp_GlComplexPolygon_draw, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_draw)},
    {SIP_MLNAME_CAST(sipName_getFillColor), meth_tlp_GlComplexPolygon_getFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_getFillColor)},
    {SIP_MLNAME_CAST(sipName_getOutlineColor), meth_tlp_GlComplexPolygon_getOutlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_getOutlineColor)},
    {SIP_MLNAME_CAST(sipName_getTextureZoom), meth_tlp_GlComplexPolygon_getTextureZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_getTextureZoom)},
    {SIP_MLNAME_CAST(sipName_getXML), meth_tlp_GlComplexPolygon_getXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_getXML)},
    {SIP_MLNAME_CAST(sipName_setFillColor), meth_tlp_GlComplexPolygon_setFillColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setFillColor)},
    {SIP_MLNAME_CAST(sipName_setOutlineColor), meth_tlp_GlComplexPolygon_setOutlineColor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setOutlineColor)},
    {SIP_MLNAME_CAST(sipName_setOutlineMode), meth_tlp_GlComplexPolygon_setOutlineMode, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setOutlineMode)},
    {SIP_MLNAME_CAST(sipName_setOutlineSize), meth_tlp_GlComplexPolygon_setOutlineSize, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setOutlineSize)},
    {SIP_MLNAME_CAST(sipName_setTextureZoom), meth_tlp_GlComplexPolygon_setTextureZoom, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setTextureZoom)},
    {SIP_MLNAME_CAST(sipName_setWithXML), meth_tlp_GlComplexPolygon_setWithXML, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_GlComplexPolygon_setWithXML)}
};

PyDoc_STRVAR(doc_tlp_GlComplexPolygon, "\1tlp.GlComplexPolygon()\n"
    "tlp.GlComplexPolygon(list-of-std_vector_0100tlp_Coord, tlp.Color, int polygonEdgesType=0, string textureName=\"\")\n"
    "tlp.GlComplexPolygon(list-of-std_vector_0100tlp_Coord, tlp.Color, tlp.Color, int polygonEdgesType=0, string textureName=\"\")\n"
    "tlp.GlComplexPolygon(list-of-tlp.Coord, tlp.Color, int polygonEdgesType=0, string textureName=\"\")\n"
    "tlp.GlComplexPolygon(list-of-tlp.Coord, tlp.Color, tlp.Color, int polygonEdgesType=0, string textureName=\"\")\n"
    "tlp.GlComplexPolygon(tlp.GlComplexPolygon)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_GlComplexPolygon = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__GlComplexPolygon,
        {0}
    },
    {
        sipNameNr_GlComplexPolygon,
        {5, 255, 0},
        11, methods_tlp_GlComplexPolygon,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_GlComplexPolygon,
    -1,
    -1,
    supers_tlp_GlComplexPolygon,
    0,
    init_tlp_GlComplexPolygon,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_GlComplexPolygon,
    assign_tlp_GlComplexPolygon,
    array_tlp_GlComplexPolygon,
    copy_tlp_GlComplexPolygon,
    release_tlp_GlComplexPolygon,
    cast_tlp_GlComplexPolygon,
    0,
    0,
    0
};
