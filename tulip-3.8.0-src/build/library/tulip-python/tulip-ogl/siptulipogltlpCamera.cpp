/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.13.2 on Tue Apr 30 11:12:56 2013
 */

#include "sipAPItulipogl.h"


#line 41 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/GlScene.sip"
#include <tulip/GlScene.h>
#line 13 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 33 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Coord.sip"
#include <tulip/Coord.h>
#line 16 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 121 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Matrix.sip"
#include <tulip/Matrix.h>
#line 19 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 30 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 36 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 37 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/../stl/vector.sip"
#include <vector>
#line 39 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithParameter.sip"
#include <tulip/WithParameter.h>
#include <tulip/ColorScale.h>
#include <tulip/StringCollection.h>
#include <tulip/IntegerProperty.h>
#include <tulip/LayoutProperty.h>
#include <tulip/SizeProperty.h>
#include <tulip/DoubleProperty.h>
#include <tulip/BooleanProperty.h>
#include <tulip/ColorProperty.h>
#line 28 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/WithDependency.sip"
#include <tulip/WithDependency.h>
#line 31 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/PluginProgress.sip"
#include <tulip/PluginProgress.h>
#line 54 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Observable.sip"
#include <tulip/Observable.h>
#line 56 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"
#line 29 "/home/kdbanman/browseRDF/tulip-3.8.0-src/library/tulip-python/tulip-ogl/../tulip/Node.sip"
#include <tulip/Node.h>
#line 59 "/home/kdbanman/browseRDF/tulip-3.8.0-src/build/library/tulip-python/tulip-ogl/siptulipogltlpCamera.cpp"


class siptlp_Camera : public tlp::Camera
{
public:
    siptlp_Camera(tlp::GlScene *,tlp::Coord,tlp::Coord,tlp::Coord,double,double);
    siptlp_Camera(tlp::GlScene *,bool);
    siptlp_Camera(const tlp::Camera&);
    virtual ~siptlp_Camera();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtectVirt_treatEvents(bool,const std::vector<tlp::Event>&);
    void sipProtectVirt_treatEvent(bool,const tlp::Event&);
    void sipProtect_sendEvent(const tlp::Event&);
    void sipProtect_observableDeleted();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void treatEvents(const std::vector<tlp::Event>&);
    void treatEvent(const tlp::Event&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    siptlp_Camera(const siptlp_Camera &);
    siptlp_Camera &operator = (const siptlp_Camera &);

    char sipPyMethods[2];
};

siptlp_Camera::siptlp_Camera(tlp::GlScene *a0,tlp::Coord a1,tlp::Coord a2,tlp::Coord a3,double a4,double a5): tlp::Camera(a0,a1,a2,a3,a4,a5), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_Camera::siptlp_Camera(tlp::GlScene *a0,bool a1): tlp::Camera(a0,a1), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_Camera::siptlp_Camera(const tlp::Camera& a0): tlp::Camera(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

siptlp_Camera::~siptlp_Camera()
{
    sipCommonDtor(sipPySelf);
}

void siptlp_Camera::treatEvents(const std::vector<tlp::Event>& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_treatEvents);

    if (!sipMeth)
    {
        tlp::Observable::treatEvents(a0);
        return;
    }

    typedef void (*sipVH_tulip_1)(sip_gilstate_t,PyObject *,const std::vector<tlp::Event>&);

    ((sipVH_tulip_1)(sipModuleAPI_tulipogl_tulip->em_virthandlers[1]))(sipGILState,sipMeth,a0);
}

void siptlp_Camera::treatEvent(const tlp::Event& a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_treatEvent);

    if (!sipMeth)
    {
        tlp::Observable::treatEvent(a0);
        return;
    }

    typedef void (*sipVH_tulip_0)(sip_gilstate_t,PyObject *,const tlp::Event&);

    ((sipVH_tulip_0)(sipModuleAPI_tulipogl_tulip->em_virthandlers[0]))(sipGILState,sipMeth,a0);
}

void siptlp_Camera::sipProtectVirt_treatEvents(bool sipSelfWasArg,const std::vector<tlp::Event>& a0)
{
    (sipSelfWasArg ? tlp::Observable::treatEvents(a0) : treatEvents(a0));
}

void siptlp_Camera::sipProtectVirt_treatEvent(bool sipSelfWasArg,const tlp::Event& a0)
{
    (sipSelfWasArg ? tlp::Observable::treatEvent(a0) : treatEvent(a0));
}

void siptlp_Camera::sipProtect_sendEvent(const tlp::Event& a0)
{
    tlp::Observable::sendEvent(a0);
}

void siptlp_Camera::sipProtect_observableDeleted()
{
    tlp::Observable::observableDeleted();
}


PyDoc_STRVAR(doc_tlp_Camera_treatEvents, "tlp.Camera.treatEvents(list-of-tlp.Event)");

extern "C" {static PyObject *meth_tlp_Camera_treatEvents(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_treatEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const std::vector<tlp::Event> * a0;
        int a0State = 0;
        siptlp_Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_std_vector_0100tlp_Event,&a0, &a0State))
        {
            sipCpp->sipProtectVirt_treatEvents(sipSelfWasArg,*a0);
            sipReleaseType(const_cast<std::vector<tlp::Event> *>(a0),sipType_std_vector_0100tlp_Event,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_treatEvents, doc_tlp_Camera_treatEvents);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_treatEvent, "tlp.Camera.treatEvent(tlp.Event)");

extern "C" {static PyObject *meth_tlp_Camera_treatEvent(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_treatEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        const tlp::Event * a0;
        siptlp_Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Event, &a0))
        {
            sipCpp->sipProtectVirt_treatEvent(sipSelfWasArg,*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_treatEvent, doc_tlp_Camera_treatEvent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_sendEvent, "tlp.Camera.sendEvent(tlp.Event)");

extern "C" {static PyObject *meth_tlp_Camera_sendEvent(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_sendEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Event * a0;
        siptlp_Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Event, &a0))
        {
            sipCpp->sipProtect_sendEvent(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_sendEvent, doc_tlp_Camera_sendEvent);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_observableDeleted, "tlp.Camera.observableDeleted()");

extern "C" {static PyObject *meth_tlp_Camera_observableDeleted(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_observableDeleted(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        siptlp_Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            sipCpp->sipProtect_observableDeleted();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_observableDeleted, doc_tlp_Camera_observableDeleted);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setScene, "tlp.Camera.setScene(tlp.GlScene)");

extern "C" {static PyObject *meth_tlp_Camera_setScene(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::GlScene * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ8", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_GlScene, &a0))
        {
            sipCpp->setScene(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setScene, doc_tlp_Camera_setScene);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getScene, "tlp.Camera.getScene() -> tlp.GlScene");

extern "C" {static PyObject *meth_tlp_Camera_getScene(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getScene(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            tlp::GlScene *sipRes;

            sipRes = sipCpp->getScene();

            return sipConvertFromType(sipRes,sipType_tlp_GlScene,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getScene, doc_tlp_Camera_getScene);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_move, "tlp.Camera.move(float)");

extern "C" {static PyObject *meth_tlp_Camera_move(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_move(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->move(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_move, doc_tlp_Camera_move);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_strafeLeftRight, "tlp.Camera.strafeLeftRight(float)");

extern "C" {static PyObject *meth_tlp_Camera_strafeLeftRight(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_strafeLeftRight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->strafeLeftRight(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_strafeLeftRight, doc_tlp_Camera_strafeLeftRight);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_strafeUpDown, "tlp.Camera.strafeUpDown(float)");

extern "C" {static PyObject *meth_tlp_Camera_strafeUpDown(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_strafeUpDown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bf", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->strafeUpDown(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_strafeUpDown, doc_tlp_Camera_strafeUpDown);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_rotate, "tlp.Camera.rotate(float, float, float, float)");

extern "C" {static PyObject *meth_tlp_Camera_rotate(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_rotate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        float a0;
        float a1;
        float a2;
        float a3;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bffff", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0, &a1, &a2, &a3))
        {
            sipCpp->rotate(a0,a1,a2,a3);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_rotate, doc_tlp_Camera_rotate);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_is3D, "tlp.Camera.is3D() -> bool");

extern "C" {static PyObject *meth_tlp_Camera_is3D(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_is3D(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            bool sipRes;

            sipRes = sipCpp->is3D();

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_is3D, doc_tlp_Camera_is3D);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getViewport, "tlp.Camera.getViewport() -> tlp.Vec4i");

extern "C" {static PyObject *meth_tlp_Camera_getViewport(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getViewport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            tlp::Vec4i *sipRes;

            sipRes = new tlp::Vec4i(sipCpp->getViewport());

            return sipConvertFromNewType(sipRes,sipType_tlp_Vec4i,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getViewport, doc_tlp_Camera_getViewport);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_initGl, "tlp.Camera.initGl()");

extern "C" {static PyObject *meth_tlp_Camera_initGl(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_initGl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            sipCpp->initGl();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_initGl, doc_tlp_Camera_initGl);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_initLight, "tlp.Camera.initLight()");

extern "C" {static PyObject *meth_tlp_Camera_initLight(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_initLight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            sipCpp->initLight();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_initLight, doc_tlp_Camera_initLight);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_initProjection, "tlp.Camera.initProjection(tlp.Vec4i, bool reset=True)\n"
    "tlp.Camera.initProjection(bool reset=True)");

extern "C" {static PyObject *meth_tlp_Camera_initProjection(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_initProjection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;
        bool a1 = 1;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|b", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Vec4i, &a0, &a1))
        {
            sipCpp->initProjection(*a0,a1);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        bool a0 = 1;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|b", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->initProjection(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_initProjection, doc_tlp_Camera_initProjection);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_initModelView, "tlp.Camera.initModelView()");

extern "C" {static PyObject *meth_tlp_Camera_initModelView(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_initModelView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            sipCpp->initModelView();

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_initModelView, doc_tlp_Camera_initModelView);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setSceneRadius, "tlp.Camera.setSceneRadius(float)");

extern "C" {static PyObject *meth_tlp_Camera_setSceneRadius(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setSceneRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->setSceneRadius(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setSceneRadius, doc_tlp_Camera_setSceneRadius);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getSceneRadius, "tlp.Camera.getSceneRadius() -> float");

extern "C" {static PyObject *meth_tlp_Camera_getSceneRadius(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getSceneRadius(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getSceneRadius();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getSceneRadius, doc_tlp_Camera_getSceneRadius);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setZoomFactor, "tlp.Camera.setZoomFactor(float)");

extern "C" {static PyObject *meth_tlp_Camera_setZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        double a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bd", &sipSelf, sipType_tlp_Camera, &sipCpp, &a0))
        {
            sipCpp->setZoomFactor(a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setZoomFactor, doc_tlp_Camera_setZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getZoomFactor, "tlp.Camera.getZoomFactor() -> float");

extern "C" {static PyObject *meth_tlp_Camera_getZoomFactor(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getZoomFactor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            double sipRes;

            sipRes = sipCpp->getZoomFactor();

            return PyFloat_FromDouble(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getZoomFactor, doc_tlp_Camera_getZoomFactor);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setEyes, "tlp.Camera.setEyes(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_Camera_setEyes(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setEyes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Coord, &a0))
        {
            sipCpp->setEyes(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setEyes, doc_tlp_Camera_setEyes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getEyes, "tlp.Camera.getEyes() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Camera_getEyes(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getEyes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->getEyes());

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getEyes, doc_tlp_Camera_getEyes);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setCenter, "tlp.Camera.setCenter(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_Camera_setCenter(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Coord, &a0))
        {
            sipCpp->setCenter(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setCenter, doc_tlp_Camera_setCenter);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getCenter, "tlp.Camera.getCenter() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Camera_getCenter(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getCenter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->getCenter());

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getCenter, doc_tlp_Camera_getCenter);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_setUp, "tlp.Camera.setUp(tlp.Coord)");

extern "C" {static PyObject *meth_tlp_Camera_setUp(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_setUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Coord, &a0))
        {
            sipCpp->setUp(*a0);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_setUp, doc_tlp_Camera_setUp);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getUp, "tlp.Camera.getUp() -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Camera_getUp(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getUp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->getUp());

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getUp, doc_tlp_Camera_getUp);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getModelviewMatrix, "tlp.Camera.getModelviewMatrix() -> tlp.Mat4f");

extern "C" {static PyObject *meth_tlp_Camera_getModelviewMatrix(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getModelviewMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Mat4f * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            a0 = new tlp::Mat4f();

            sipCpp->getModelviewMatrix(*a0);

            return sipConvertFromNewType(a0,sipType_tlp_Mat4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getModelviewMatrix, doc_tlp_Camera_getModelviewMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getProjectionMatrix, "tlp.Camera.getProjectionMatrix() -> tlp.Mat4f");

extern "C" {static PyObject *meth_tlp_Camera_getProjectionMatrix(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getProjectionMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Mat4f * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            a0 = new tlp::Mat4f();

            sipCpp->getProjectionMatrix(*a0);

            return sipConvertFromNewType(a0,sipType_tlp_Mat4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getProjectionMatrix, doc_tlp_Camera_getProjectionMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getTransformMatrix, "tlp.Camera.getTransformMatrix() -> tlp.Mat4f\n"
    "tlp.Camera.getTransformMatrix(tlp.Vec4i) -> tlp.Mat4f");

extern "C" {static PyObject *meth_tlp_Camera_getTransformMatrix(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getTransformMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        tlp::Mat4f * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_tlp_Camera, &sipCpp))
        {
            a0 = new tlp::Mat4f();

            sipCpp->getTransformMatrix(*a0);

            return sipConvertFromNewType(a0,sipType_tlp_Mat4f,NULL);
        }
    }

    {
        const tlp::Vec4i * a0;
        tlp::Mat4f * a1;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Vec4i, &a0))
        {
            a1 = new tlp::Mat4f();

            sipCpp->getTransformMatrix(*a0,*a1);

            return sipConvertFromNewType(a1,sipType_tlp_Mat4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getTransformMatrix, doc_tlp_Camera_getTransformMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_getProjAndMVMatrix, "tlp.Camera.getProjAndMVMatrix(tlp.Vec4i) -> (tlp.Mat4f, tlp.Mat4f)");

extern "C" {static PyObject *meth_tlp_Camera_getProjAndMVMatrix(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_getProjAndMVMatrix(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Vec4i * a0;
        tlp::Mat4f * a1;
        tlp::Mat4f * a2;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Vec4i, &a0))
        {
            a1 = new tlp::Mat4f();
            a2 = new tlp::Mat4f();

            sipCpp->getProjAndMVMatrix(*a0,*a1,*a2);

            return sipBuildResult(0,"(NN)",a1,sipType_tlp_Mat4f,NULL,a2,sipType_tlp_Mat4f,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_getProjAndMVMatrix, doc_tlp_Camera_getProjAndMVMatrix);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_screenTo3DWorld, "tlp.Camera.screenTo3DWorld(tlp.Coord) -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Camera_screenTo3DWorld(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_screenTo3DWorld(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Coord, &a0))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->screenTo3DWorld(*a0));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_screenTo3DWorld, doc_tlp_Camera_screenTo3DWorld);

    return NULL;
}


PyDoc_STRVAR(doc_tlp_Camera_worldTo2DScreen, "tlp.Camera.worldTo2DScreen(tlp.Coord) -> tlp.Coord");

extern "C" {static PyObject *meth_tlp_Camera_worldTo2DScreen(PyObject *, PyObject *);}
static PyObject *meth_tlp_Camera_worldTo2DScreen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const tlp::Coord * a0;
        tlp::Camera *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9", &sipSelf, sipType_tlp_Camera, &sipCpp, sipType_tlp_Coord, &a0))
        {
            tlp::Coord *sipRes;

            sipRes = new tlp::Coord(sipCpp->worldTo2DScreen(*a0));

            return sipConvertFromNewType(sipRes,sipType_tlp_Coord,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Camera, sipName_worldTo2DScreen, doc_tlp_Camera_worldTo2DScreen);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_tlp_Camera(void *, const sipTypeDef *);}
static void *cast_tlp_Camera(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_tlp_Camera)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_tlp_Observable)->ctd_cast((tlp::Observable *)(tlp::Camera *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_tlp_Camera(void *, int);}
static void release_tlp_Camera(void *sipCppV,int sipState)
{
    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<siptlp_Camera *>(sipCppV);
    else
        delete reinterpret_cast<tlp::Camera *>(sipCppV);
}


extern "C" {static void dealloc_tlp_Camera(sipSimpleWrapper *);}
static void dealloc_tlp_Camera(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<siptlp_Camera *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_tlp_Camera(sipGetAddress(sipSelf),sipSelf->flags);
    }
}


extern "C" {static void *init_tlp_Camera(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_tlp_Camera(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    siptlp_Camera *sipCpp = 0;

    {
        tlp::GlScene * a0;
        tlp::Coord a1def = tlp::Coord(0,0,0);
        tlp::Coord * a1 = &a1def;
        tlp::Coord a2def = tlp::Coord(0,0,10);
        tlp::Coord * a2 = &a2def;
        tlp::Coord a3def = tlp::Coord(0,-1,0);
        tlp::Coord * a3 = &a3def;
        double a4 = 0.5;
        double a5 = 10;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8|J9J9J9dd", sipType_tlp_GlScene, &a0, sipType_tlp_Coord, &a1, sipType_tlp_Coord, &a2, sipType_tlp_Coord, &a3, &a4, &a5))
        {
            sipCpp = new siptlp_Camera(a0,*a1,*a2,*a3,a4,a5);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        tlp::GlScene * a0;
        bool a1;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J8b", sipType_tlp_GlScene, &a0, &a1))
        {
            sipCpp = new siptlp_Camera(a0,a1);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const tlp::Camera * a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_tlp_Camera, &a0))
        {
            sipCpp = new siptlp_Camera(*a0);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_tlp_Camera[] = {{78, 1, 1}};


static PyMethodDef methods_tlp_Camera[] = {
    {SIP_MLNAME_CAST(sipName_getCenter), meth_tlp_Camera_getCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getCenter)},
    {SIP_MLNAME_CAST(sipName_getEyes), meth_tlp_Camera_getEyes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getEyes)},
    {SIP_MLNAME_CAST(sipName_getModelviewMatrix), meth_tlp_Camera_getModelviewMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getModelviewMatrix)},
    {SIP_MLNAME_CAST(sipName_getProjAndMVMatrix), meth_tlp_Camera_getProjAndMVMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getProjAndMVMatrix)},
    {SIP_MLNAME_CAST(sipName_getProjectionMatrix), meth_tlp_Camera_getProjectionMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getProjectionMatrix)},
    {SIP_MLNAME_CAST(sipName_getScene), meth_tlp_Camera_getScene, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getScene)},
    {SIP_MLNAME_CAST(sipName_getSceneRadius), meth_tlp_Camera_getSceneRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getSceneRadius)},
    {SIP_MLNAME_CAST(sipName_getTransformMatrix), meth_tlp_Camera_getTransformMatrix, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getTransformMatrix)},
    {SIP_MLNAME_CAST(sipName_getUp), meth_tlp_Camera_getUp, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getUp)},
    {SIP_MLNAME_CAST(sipName_getViewport), meth_tlp_Camera_getViewport, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getViewport)},
    {SIP_MLNAME_CAST(sipName_getZoomFactor), meth_tlp_Camera_getZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_getZoomFactor)},
    {SIP_MLNAME_CAST(sipName_initGl), meth_tlp_Camera_initGl, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_initGl)},
    {SIP_MLNAME_CAST(sipName_initLight), meth_tlp_Camera_initLight, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_initLight)},
    {SIP_MLNAME_CAST(sipName_initModelView), meth_tlp_Camera_initModelView, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_initModelView)},
    {SIP_MLNAME_CAST(sipName_initProjection), meth_tlp_Camera_initProjection, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_initProjection)},
    {SIP_MLNAME_CAST(sipName_is3D), meth_tlp_Camera_is3D, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_is3D)},
    {SIP_MLNAME_CAST(sipName_move), meth_tlp_Camera_move, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_move)},
    {SIP_MLNAME_CAST(sipName_observableDeleted), meth_tlp_Camera_observableDeleted, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_rotate), meth_tlp_Camera_rotate, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_rotate)},
    {SIP_MLNAME_CAST(sipName_screenTo3DWorld), meth_tlp_Camera_screenTo3DWorld, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_screenTo3DWorld)},
    {SIP_MLNAME_CAST(sipName_sendEvent), meth_tlp_Camera_sendEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setCenter), meth_tlp_Camera_setCenter, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setCenter)},
    {SIP_MLNAME_CAST(sipName_setEyes), meth_tlp_Camera_setEyes, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setEyes)},
    {SIP_MLNAME_CAST(sipName_setScene), meth_tlp_Camera_setScene, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setScene)},
    {SIP_MLNAME_CAST(sipName_setSceneRadius), meth_tlp_Camera_setSceneRadius, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setSceneRadius)},
    {SIP_MLNAME_CAST(sipName_setUp), meth_tlp_Camera_setUp, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setUp)},
    {SIP_MLNAME_CAST(sipName_setZoomFactor), meth_tlp_Camera_setZoomFactor, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_setZoomFactor)},
    {SIP_MLNAME_CAST(sipName_strafeLeftRight), meth_tlp_Camera_strafeLeftRight, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_strafeLeftRight)},
    {SIP_MLNAME_CAST(sipName_strafeUpDown), meth_tlp_Camera_strafeUpDown, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_strafeUpDown)},
    {SIP_MLNAME_CAST(sipName_treatEvent), meth_tlp_Camera_treatEvent, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_treatEvents), meth_tlp_Camera_treatEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_worldTo2DScreen), meth_tlp_Camera_worldTo2DScreen, METH_VARARGS, SIP_MLDOC_CAST(doc_tlp_Camera_worldTo2DScreen)}
};

PyDoc_STRVAR(doc_tlp_Camera, "\1tlp.Camera(tlp.GlScene, tlp.Coord center=tlp.Coord(0,0,0), tlp.Coord eyes=tlp.Coord(0,0,10), tlp.Coord up=tlp.Coord(0,-1,0), float zoomFactor=0.5, float sceneRadius=10)\n"
    "tlp.Camera(tlp.GlScene, bool)\n"
    "tlp.Camera(tlp.Camera)");


sipClassTypeDef sipTypeDef_tulipogl_tlp_Camera = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_tlp__Camera,
        {0}
    },
    {
        sipNameNr_Camera,
        {5, 255, 0},
        32, methods_tlp_Camera,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_tlp_Camera,
    -1,
    -1,
    supers_tlp_Camera,
    0,
    init_tlp_Camera,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_tlp_Camera,
    0,
    0,
    0,
    release_tlp_Camera,
    cast_tlp_Camera,
    0,
    0,
    0
};
