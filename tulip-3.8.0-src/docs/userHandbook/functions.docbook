<chapter id="functions"><title>Functionalities</title>
  <!-- <sect1 id="manag-graphs"><title>Graph Management</title> -->
	<!-- The information of this section was already covered in the previous chapter -->
  <!-- </sect1> -->
  <sect1 id="algo"><title>Algorithms</title>
		&Algorithms;
  </sect1>
  <sect1 id="graph-properties"><title>Graph properties</title>
    <para>Each node and edge has a set of associated <emphasis>properties</emphasis>.
			<!-- There are two kinds of property: intrinsic and extrinsic. 
					 Intrinsic properties are those computed relatively to the graph structure.
					 On the other hand, if we build for instance the map of a region where the nodes represent cities, the label property can be used for the city name. Since it is not possible to determine the name from the graph structure, this property is extrinsic.
				-->
			The properties used by the renderer begin with the <quote>view</quote> prefix, by convention: viewColor, viewLabel, viewLayout...
			It is possible to define an unlimited number of additional properties to store information.
    </para>
		<sect2 id="list-properties"><title>Rendering Properties</title>
			<para> Here is the list of rendering properties:</para>
			<itemizedlist>
				<listitem><para><code>viewBorderColor</code>: border Color of an edge or a node.
				</para></listitem>
				<listitem><para><code>viewBorderWidth</code>
						<!-- Width of the border of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewColor</code>
						<!-- Color of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewFont</code>:
						Font path used to render the label
				</para></listitem>
				<listitem><para><code>viewFontSize</code>
						<!-- font size used to render label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabel</code>
						<!-- Label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabelColor</code>
						<!-- Color label of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLabelPosition</code>
						<!-- Label position (x,y,z) of an edge or a node. -->
				</para></listitem>
				<listitem><para><code>viewLayout</code>:
						Position (x,y,z) of a node, or vector of the bends positions of an edge.
				</para></listitem>
				<listitem><para><code>viewMetric</code>:
						Result of the last measure (<xref linkend="Measure"/>) algorithm applied.
				</para></listitem>
				<listitem><para><code>viewRotation</code>:
						Rotation (0 to 360) of a node or edge
				</para></listitem>
				<listitem><para><code>viewSelection</code>:
						true if the element is selected, false if not.
				</para></listitem>
				<listitem><para><code>viewShape</code>
						<!-- Shape of a node or a graph. -->
				</para></listitem>
				<listitem><para><code>viewSize</code>:
						For a node: (height, width, depth).
						For an edge: (width at source, width at end, arrow size).
						For edge size to take effect, <code>View editor</code> → <code>Rendering parameters</code> → <code>Size interpolation</code> must be unchecked.
				</para></listitem>
				<listitem><para><code>viewSrcAnchorShape</code>:
						Shape of the source anchor (i.e. shape at one end) of an edge.
						For this setting to take effect, <code>View editor</code> → <code>Rendering parameters</code> → <code>arrows</code> must be checked.
						Used only for edges.
				</para></listitem>
				<listitem><para><code>viewSrcAnchorSize</code>:
						Size (along the x, y, z axis) of this source anchor.
						Used only for edges.
				</para></listitem>
				<listitem><para><code>viewTexture</code>:
						Texture to replace the color background of the node.
				</para></listitem>
				<listitem><para><code>viewTgtAnchorShape</code>
						Like <code>viewSrcAnchorShape</code>, on opposite end of the edge.
				</para></listitem>
				<listitem><para><code>viewTgtAnchorSize</code>: idem.
				</para></listitem>
			</itemizedlist>
		</sect2>
    <sect2 id="mana-inst"><title>Management</title>
    <para>
			There are several ways to update properties:
			<itemizedlist>
				<listitem>through algorithms (as explained in <xref linkend="algo"/>)</listitem>
				<listitem> <code>Import CSV Data</code> allows (through a wizard) to import properties from a CSV file (see <xref linkend="csv-import"/>). </listitem>
				<listitem>through <code>Graph Editor</code> → <code>Property</code> (see <xref linkend="property"/>), as we now explain.
				</listitem>
			</itemizedlist>
    </para>
    <para>
			To modify the properties of just one element:
			<itemizedlist>
				<listitem> In the bottom part, select the property to update.</listitem>
        <listitem><para>In the upper part, double-click the cell to update, edit it and click OK.</para></listitem>
				<listitem>Press <keycap>Enter</keycap> to update the drawing.</listitem>
      </itemizedlist>

			To modify the properties of several elements:
      <itemizedlist>
        <listitem><para>Select elements (for instance with the <inlinegraphic fileref="images/i_selection.png"/> tool).</para></listitem>
        <listitem><para>Select the property to modify, here <code>viewLabel</code>.</para></listitem>
        <listitem>Click <code>selected only</code>: the table above displays only the selected elements.
					(if this is not checked, all nodes will be modified).</listitem>
        <listitem><para>Click <code>Set all</code>, write some text: <quote>Hello world!</quote> and click OK.</para></listitem>
				<listitem>Press enter to update the view.</listitem>
			</itemizedlist>
			Likewise, the <code>Edges</code> tab allows to modify edge properties.
		</para>
		<para>Click <code>To labels</code> to set as labels the values of the selected property.</para>
		<para>
      To remove a property, select it first, then click <code>Remove</code>.
			When deleting properties used by the renderer, those properties will be temporary removed from the list but still continue to exist.
			Note that it is not possible to remove inherited properties.
    </para>
		<para>To find a property more easily, you can enter the first letters of the property name in the text box just above the list of properties.
		</para>
    </sect2>
    <sect2 id="find-tut"><title>Find</title>
      <para>
				Menu <code>Edit</code> → <code>Find</code> allows to run a simple request on the database of elements.
				For instance,
				<itemizedlist>
					<listitem>open a graph with several nodes and select som of them with the selection tool
						<inlinegraphic fileref="images/i_selection.png"/>.</listitem>
					<listitem>Go to <code>Graph editor</code> → <code>Property</code>, click <code>Selected only</code>.
						You should see only the selected nodes in the upper part of the <code>Graph editor</code> subwindow.</listitem>
					<listitem>Click the property <code>viewRotation</code>, then <code>Set all</code>, enter <code>20</code>, click <code>OK</code>.
						We now have some nodes with a rotation of 0 degree and some other rotated 20.</listitem>
					<listitem>Unselect all nodes (Menu <code>Edit</code> or Ctrl+Shift+a).</listitem>
				</itemizedlist>
				We can now demonstrate the Find tool:
        <itemizedlist>
					<listitem> click Menu <code>Edit</code> → <code>Find</code> or Ctrl+Shift+F,</listitem>
          <listitem><para>choose <code>viewRotation</code> as input property</para></listitem>
          <listitem><para>choose <code>=</code> and <code>0</code> as filter</para></listitem>
          <listitem><para>Under <code>options</code>, select <code>Replace</code> and <code>on nodes</code>.</para></listitem>
					<listitem>Press enter.</listitem>
        </itemizedlist>
				All the non-rotated nodes should now be selected.
      </para>
			<para>For textual fields, the filter supports regular expressions.</para>
    </sect2>
  </sect1>
  <sect1 id="hierarchy"><title>Hierarchy</title>
		&Subgraphs;
  </sect1>
<sect1 id="csv-import"><title>Importing CSV data</title>
	<para>Click on the <code>Import CSV Data</code> button in the property editor widget (see <xref linkend="property"/>) to launch the import process.</para>
	<para>To help user during the import data process Tulip provides an import wizard which is a three paneled dialog with configuration options.</para>		
	<para>The first panel allows the user to configure the source file location, the characters encoding, the field delimiter character and the text delimiter character. </para>
	<para>The second panel allows the user to define the line range, which columns to import and to define the type of data for each column.</para>
	<para>The third panel allows the user to select how to import data in the graph.</para>    
	<para>You can find CSV import tutorials here <xref linkend="tuto-csv-import"/>.</para>
	<sect2><title>Source file settings panel</title>
	<para>The first panel allows the user to configure the source file location, the characters encoding, the field delimiter character, the text delimiter character. </para>
	<figure>
            <title>Source file settings panel</title>
            <graphic fileref="images/csvimport_panel_1.png"/>
        </figure>
	<para>The purpose of each labeled component is explained below: </para>
	<orderedlist>
		<listitem>
		  <para>The source file location field : this field indicates the location of the file to parse. To change the source file click on the “...” button.</para>
		</listitem>
		<listitem>
		  <para>The file encoding selection menu : this drop down menu provides a list of encoding schemes for the characters in the text file.</para>
		</listitem>
		<listitem>
		  <para>The data orientation : this check-box allows the user to invert rows and columns i.e to treat rows as columns and columns as rows in next steps.</para>
		</listitem>
		<listitem>
		  <para>The separator selector : this field allows the user to define the characters used to separate data value fields within each row. Select a separator in the list or input a custom separator and press the enter key to validate your input.</para>
		</listitem>
		<listitem>
		  <para>The text delimiter selector : this field allows the user to define the characters used as start and end delimiter for data value fields. Select a delimiter in the list or input a custom and press the enter key to validate your input.
			Separated value files often additionally define a character used to indicate the start and end of a data element which should be considered a single text entry.
			This strategy allows the inclusion of text entries which include the value separator. </para>
		  <para>
			For example, a file which is structured as a comma separated value file, could use the double quotation mark to delimit text values and would then be able to include text values such as: 	'Zoe, Mark, Sally'. 
		  </para>
		</listitem>
		<listitem>
		  <para>The preview area : this area displays a preview of the file as it will be interpreted with these settings.</para>
		</listitem>
	</orderedlist>
	</sect2>	
	<sect2><title>Data selection panel</title>
	<para>The second panel allows the user to define the line range, which columns to import and to define their data types.</para>
	<figure>
            <title>Data selection panel</title>
            <graphic fileref="images/csvimport_panel_2.png"/>
        </figure>
	<para>The purpose of each labeled component is explained below: </para>
	<orderedlist>
		<listitem>
                  <para>Use first line tokens as column names : use the elements in the first line as default names for the columns. If checked the first line will be skipped during the import process.</para>
		</listitem>
		<listitem>
		  <para>The line range spinbuttons : these two spin buttons allow the user to select the start and end rows for the data import. The spin boxes can be used either by typing a new value in the text entry area where the numbers are displayed, or by using the mouse button to click on the up arrow to increase the number and the down arrow to decrease the number. 
			For instance, if the text file contained a large header area with meta information, this header could be excluded from the data imported by increasing the number of the starting, "From", line.
		  </para>
		</listitem>
		<listitem>
		  <para>The columns configuration area : this area allows the user to configure each column detected in the file. Any single column can be excluded from the data imported by clicking in the checkbox under its name to remove the check mark. User can rename a column by editing the field containing it's original name. You can't input the same name of another column. 
			The data type of a column can be changed using the combo-box under it's name. 
		  </para>
		</listitem>
		<listitem>
		  <para>The preview area : this area displays a preview of the file as it will be interpreted with these settings.
			If a column isn't selected it will not appear in the preview.
		  </para>
		</listitem>
		<listitem>
		  <para>The number of preview lines spinbutton : allows the user to increase the number of preview. If unchecked all the file will be displayed.
		  </para>
		</listitem>
	</orderedlist>	
	</sect2>
	<sect2><title>Import method panel</title> 
	<para>The third panel allows the user to select how to import data in the graph.</para>
	<figure>
            <title>Import method panel</title>
            <graphic fileref="images/csvimport_panel_3.png"/>
        </figure>
	<para>The purpose of each labeled component is explained below: </para>
	<orderedlist>
		<listitem>
		  <para>The import methods list</para>
		</listitem>
		<listitem>
		  <para>The configuration area for the selected import method</para>
		</listitem>
	</orderedlist>
        <para>Currently you can import data on:</para>
	<itemizedlist>
          <listitem>New entities (nodes).</listitem>
          <listitem>New relations (edges).</listitem>
          <listitem>Existing entities (nodes).</listitem>
          <listitem>Existing relations (edges).</listitem>
	</itemizedlist>
        <sect3><title>New entities (nodes)</title>
	<para>Create a new entity (node) for each row in the file and import the data of selected columns on created entities (nodes).</para>
	</sect3>
          <sect3><title>New relations (edges)</title>
	  <para>Create a new relation (edge) for each row and import the data of  selected columns on created relations (edges). </para>
	  <para>A relation is defined by it's source entity id and it's destination entity id. For each row we compare source and destination ids to graph entities ids. If the source and destination ids correspond to existing entities ids a new relation is created between those entities. If there is no entities in the graph with such ids you can force the creation of missing entities with the “Create missing entities” option.</para>
	  <para>The example below represents a graph with four entities “a”, “b”, “c”, “d” and  two  relations : “a” -> “b” and “b” -> “c”. </para>	  
	  <para><code>a;b</code></para>
	  <para><code>b;c</code></para>	
	  </sect3>
          <sect3><title>Existing entities (nodes)</title>
	  <para>Import the data of selected columns on existing entities (node).</para>
	  <para>For each row we compare the destination entity id to graph entities ids. If there is a correspondence we import the row data on the first matching entity. If there is no entity with such id you can force the creation of a new entity with the “Create missing entities” option.</para>
	  </sect3>
          <sect3><title>Existing relations (edges)</title>
	  <para>Import selected columns on existing relations(edges).</para>
	  <para>For each row we compare the destination relation id to graph relations ids. If there is a correspondence we import the row data on the first matching relation.</para>
	  </sect3>
	</sect2>	
    </sect1>
	<!-- has text rendering been dropped? -->
	<!-- 
     <sect1 id="text-rend"><title>Text Rendering</title>
       <para>It is possible to assign a label to each element of the graph. <application>Tulip</application> can display them with three methods: 3D and texture for node labels, bitmap for node and edge labels. 
         <figure>
           <title>Bitmap Rendering</title>
           <graphic fileref="images/bitmap-label.png"/>
         </figure>
         <figure>
           <title>3D Rendering</title>
           <graphic fileref="images/3d-label.png"/>
         </figure>
         <figure>
           <title>Texture Rendering</title>
           <graphic fileref="images/text-label.png"/>
         </figure>
       </para>
       <para>In a future version of Tulip, It will be possible to create labels with XML tags like the HTML rendering. Some tags will be available in order to allow the user to organize the content of the labels.</para>
     </sect1>
		 -->
</chapter>

<!--  LocalWords:  tlp GML graphlet XBM XPM viewColor viewLabel viewLayout
	-->
<!--  LocalWords:  uncheck
	-->
